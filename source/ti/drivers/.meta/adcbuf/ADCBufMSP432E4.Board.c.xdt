%%{
/*
 * Copyright (c) 2018-2019, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== ADCBufMSP432E4.Board.c.xdt ========
 */

    /* passed by /ti/drivers/templates/Board.c.xdt */
    let ADCBuf = args[0];
    let instances = ADCBuf.$instances;

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    /* Board_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = ADCBuf.defaultInstanceName + "COUNT";

    let SEQUENCER_COUNT = 4;

    let map = {
        "External Pin"         : "ADCBufMSP432E4_INTERNAL_SOURCE_MODE_OFF",
        "Internal Temperature" : "ADCBufMSP432E4_TEMPERATURE_MODE",
        "Differential"         : "ADCBufMSP432E4_DIFFERENTIAL",
        "Non Differential"     : "ADCBufMSP432E4_SINGLE_ENDED",
        "Timer"                : "ADCBufMSP432E4_TIMER_TRIGGER",
        "Auto"                 : "ADCBufMSP432E4_SOFTWARE_AUTOMATIC_TRIGGER",
        "Internal"             : "ADCBufMSP432E4_VREF_INTERNAL",
        "External"             : "ADCBufMSP432E4_VREF_EXTERNAL_3V"
    };

    function getADCPin(chan, pin)
    {
        chan = (chan.match(/AIN\d{1,2}/i)[0]).replace("AIN", "");
        pin = pin.substring(0, 2) + "_" + pin.substring(2);
        return ("ADCBufMSP432E4_" + pin + "_A" + chan);
    }

%%}
/*
 *  =============================== ADCBuf ===============================
 */

#include <ti/drivers/ADCBuf.h>
#include <ti/drivers/adcbuf/ADCBufMSP432E4.h>

#include <ti/devices/msp432e4/inc/msp432.h>

#define `countDef` `instances.length`

/*
 *  ======== adcbufMSP432E4Objects ========
 */
ADCBufMSP432E4_Object adcbufMSP432E4Objects[`countDef`];

/*
 *  ======== ADCBuf Channels ========
 */
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % let chanCount = 0;
    %
ADCBufMSP432E4_Channels adcBuf`i`MSP432E4Channels[`inst.numChans`] = {
    % for (let j in inst.sequencers) {
    %   let sequencer = inst["sequencer" + inst.sequencers[j]];
    %   for (let k = 0; k < sequencer.channels; k++, chanCount++) {
        %   let chan = sequencer["channel" + k];
        %   let adcPin = "ADCBufMSP432E4_PIN_NONE";
        %   let diffPin = "ADCBufMSP432E4_PIN_NONE";
        %   let adcChan;
        %   if (chan.adcPin) {
        %       adcChan = chan.adcPin.$solution.peripheralPinName;
        %       adcPin = chan.adcPin.$solution.devicePinName;
        %       adcPin = getADCPin(adcChan, adcPin);
        %   }
        %   if (chan.differentialPin) {
        %       diffPin = chan.differentialPin.adcDifferentialPin;
        %       adcChan = diffPin.$solution.peripheralPinName;
        %       diffPin = diffPin.$solution.devicePinName;
        %       diffPin = getADCPin(adcChan, diffPin);
        %   }
    /* `inst.$name``chan.$name` */
    {
        .adcPin = `adcPin`,
        .adcSequence = ADCBufMSP432E4_Seq_`sequencer.number`,
        .adcInputMode = `map[chan.mode]`,
        .adcDifferentialPin = `diffPin`,
        .adcInternalSource = `map[chan.inputSource]`,
        .refVoltage = `chan.referenceVoltage`
    },
        % }
    % }
};

% } // for instances.length
/*
 *  ======== ADCBuf Seqeunce Priorities ========
 */
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    %
static ADCBufMSP432E4_SequencePriorities seqPriorities`i`[ADCBufMSP432E4_SEQUENCER_COUNT] = {
    % for (let j = 0; j < SEQUENCER_COUNT; j++) {
    %   let sequence = inst["sequencer" +j];
    %   let priority = "ADCBufMSP432E4_Seq_Disable";
    %
    %   if (sequence) {
    %       priority = "ADCBufMSP432E4_Priority_" + sequence.priority;
    %   }
    %
    /* Sequencer `j` */
    `priority`,
    % }
};

% }
/*
 *  ======== ADCBuf Seqeunce Trigger Sources ========
 */
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    %
static ADCBufMSP432E4_TriggerSource triggerSource`i`[ADCBufMSP432E4_SEQUENCER_COUNT] = {
    % for (let j = 0; j < SEQUENCER_COUNT; j++) {
    %   let triggerSource = "ADCBufMSP432E4_SOFTWARE_AUTOMATIC_TRIGGER";
    %   let sequence = inst["sequencer" +j];
    %   if (sequence) {
    %       triggerSource = map[sequence.triggerSource];
    %   }
    /* Sequencer `j` trigger source */
    `triggerSource`,
    % }
};

% }
/*
 *  ======== adcbufMSP432E4HWAttrs ========
 */
const ADCBufMSP432E4_HWAttrsV1 adcbufMSP432E4HWAttrs[`countDef`] = {
    % for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % let adcbase = inst.adc.$solution.peripheralName + "_BASE";
    % let timerBase = "NULL";
    %
    % if (inst.timer) {
    %     timerBase = inst.timer.$solution.peripheralName;
    %     timerBase = "TIMER" + timerBase.substring(5) + "_BASE";
    % }
    %
    % let phase = "ADCBufMSP432E4_Phase_Delay_";
    % phase += String(inst.modulePhase).replace('.', '_');
    %
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .intPriority = `Common.intPriority2Hex(inst.interruptPriority)`,
        .adcBase = `adcbase`,
        .channelSetting = adcBuf`i`MSP432E4Channels,
        .sequencePriority = seqPriorities`i`,
        .adcTriggerSource = triggerSource`i`,
        .modulePhase = `phase`,
        .refSource = `map[inst.referenceSource]`,
        .useDMA = `inst.enableDMA | 0`,
        .adcTimerSource = `timerBase`
    },
    % }
};

/*
 *  ======== ADCBuf_config ========
 */
const ADCBuf_Config ADCBuf_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .fxnTablePtr = &ADCBufMSP432E4_fxnTable,
        .object = &adcbufMSP432E4Objects[`inst.$name`],
        .hwAttrs = &adcbufMSP432E4HWAttrs[`inst.$name`]
    },
% }
};

const uint_least8_t ADCBuf_count = `countDef`;
