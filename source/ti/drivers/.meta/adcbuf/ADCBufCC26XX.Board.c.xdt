%%{
/*
 * Copyright (c) 2018-2019, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== ADCBufCC26XX.Board.c.xdt ========
 */

    /* passed by /ti/drivers/templates/Board.c.xdt */
    let ADCBuf = args[0];
    let instances = ADCBuf.$instances;

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    /* Board_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = ADCBuf.defaultInstanceName + "COUNT";

     /* localize the object names with this device ID */
     let devId = system.deviceData.deviceId;
     let driver = "CC26XX";

     if (devId.match(/CC13.2/) || devId.match(/CC26.2/)) {
         driver = 'CC26X2';
     }
%%}
/*
 *  =============================== ADCBuf ===============================
 */

#include <ti/drivers/ADCBuf.h>
#include <ti/drivers/adcbuf/ADCBuf`driver`.h>

#define `countDef` `instances.length`

/*
 *  ======== adcbufCC26XXObjects ========
 */
ADCBuf`driver`_Object adcbufCC26XXbjects[`countDef`];

/*
 *  ======== ADCBuf Channel Lut ========
 */
% for (let i = 0; i < instances.length; i++) {
    % let j;
    % let inst = instances[i];
    % let arraySize = Number(inst.channels);
    % if (inst.batteryChannel) arraySize ++;
    % if (inst.decouplingChannel) arraySize ++;
    % if (inst.groundChannel) arraySize ++;
ADCBuf`driver`_AdcChannelLutEntry adcBufCC26XXChannelLut`i`[`arraySize`] = {
    % for (j = 0; j < inst.channels; j++) {
    %   let channel = inst["adcBufChannel" + j];
    %   let adcPin = channel.adc.adcPin.$solution.devicePinName;
    %   let dioNum = "IOID_" + adcPin.substring(4);
    %   let packagePin = parseInt(channel.adc.adcPin.$solution.packagePinName);
    %   let auxInput = system.deviceData.devicePins[packagePin].attributes.alias_name;
    %   auxInput = "ADC_COMPB_IN_" + auxInput.replace("_", "IO");
    /* `inst.$name``channel.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    { `dioNum`, `auxInput` },
    % }
    % if (inst.batteryChannel) {
    /* `inst.$name``inst.adcBufChannelBattery.$name` */
    {PIN_UNASSIGNED, ADC_COMPB_IN_VDDS},
    % }
    % if (inst.decouplingChannel) {
    /* `inst.$name``inst.adcBufChannelDecoupling.$name` */
    {PIN_UNASSIGNED, ADC_COMPB_IN_DCOUPL},
    % }
    % if (inst.groundChannel) {
    /* `inst.$name``inst.adcBufChannelGround.$name` */
    {PIN_UNASSIGNED, ADC_COMPB_IN_VSS},
    % }
};

% }
/*
 *  ======== adcbufCC26XXHWAttrs ========
 */
const ADCBuf`driver`_HWAttrs adcbufCC26XXHWAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    /* `inst.$name` */
    % /* The ADCBuf instance can't share a timer instance. It always receives
    %  * an 'A' side timer (ie. GPTA) */
    % let timer = inst.timerInstance.timer.$solution.peripheralName; /* GPTM0 */
    % timer = timer.replace('GPTM','');
    {
        .intPriority = `Common.intPriority2Hex(inst.interruptPriority)`,
        .swiPriority = `Common.swiPriority2Int(inst.softwareInterruptPriority)`,
        .adcChannelLut = adcBufCC26XXChannelLut`i`,
    % if (driver == "CC26X2") {
        .gpTimerUnit = `inst.timerInstance.$name`
    % }
    },
% }
};

/*
 *  ======== ADCBuf_config ========
 */
const ADCBuf_Config ADCBuf_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    /* `inst.$name` */
    {
        .fxnTablePtr = &ADCBuf`driver`_fxnTable,
        .object = &adcbufCC26XXbjects[`inst.$name`],
        .hwAttrs = &adcbufCC26XXHWAttrs[`inst.$name`]
    },
% }
};

const uint_least8_t ADCBuf_count = `countDef`;
