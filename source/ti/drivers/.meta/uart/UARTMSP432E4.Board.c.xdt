%%{
/*
 * Copyright (c) 2018-2019, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== UARTMSP432E4.Board.c.xdt ========
 */

    let Common    = system.getScript("/ti/drivers/Common.js");

    let UART      = args[0];
    let instances = UART.$instances;

    if (UART.$instances.length == 0) return;

    /* Board_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = UART.defaultInstanceName + "COUNT";
    let numInstances = instances.length;
%%}
/*
 *  =============================== UART ===============================
 */

#include <ti/drivers/UART.h>
#include <ti/drivers/uart/UARTMSP432E4.h>
#include <ti/devices/msp432e4/driverlib/interrupt.h>

#define `countDef` `instances.length`

UARTMSP432E4_Object uartMSP432E4Objects[`countDef`];

% for (let i = 0; i < numInstances; i++) {
%     let inst = instances[i];
static unsigned char uartMSP432E4RingBuffer`i`[`inst.ringBufferSize`];
% }
%
% for (let i = 0; i < numInstances; i++) {
%     let inst = instances[i];
%     if(inst.errorCallbackFunction != '') {
extern void `inst.errorCallbackFunction`(UART_Handle, uint32_t);

%     }
% }
%
static const UARTMSP432E4_HWAttrs uartMSP432E4HWAttrs[`countDef`] = {
% for (let i = 0; i < numInstances; i++) {
%     let inst        = instances[i];
%     let uart        = inst.uart;
%     let solution    = uart.$solution;
%     let errorFxn    = inst.errorCallbackFunction;
%     if (errorFxn == '') {
%         errorFxn = 'NULL';
%     }
%     let peripheral  = system.deviceData.peripherals[solution.peripheralName];
%     let rxPinName   = 'UARTMSP432E4_PIN_UNASSIGNED';
%     let txPinName   = 'UARTMSP432E4_PIN_UNASSIGNED';
%     let ctsPinName  = 'UARTMSP432E4_PIN_UNASSIGNED';
%     let rtsPinName  = 'UARTMSP432E4_PIN_UNASSIGNED';
%     if ('rxPin' in uart) {
%         let rxName     = uart.rxPin.$solution.devicePinName;
%         let periphName = uart.rxPin.$solution.peripheralPinName;
%         rxPinName   = 'UARTMSP432E4_' + rxName + '_' + periphName;
%     }
%     if ('txPin' in uart) {
%         let txName     = uart.txPin.$solution.devicePinName;
%         let periphName = uart.txPin.$solution.peripheralPinName;
%         txPinName   = 'UARTMSP432E4_'+txName+'_'+periphName;
%     }
%
%     let flowName;
%     if (inst.flowControl === false) {
%         flowName = 'UARTMSP432E4_FLOWCTRL_NONE';
%     }
%     else {
%         let ctsName       = uart.ctsPin.$solution.devicePinName;
%         let rtsName       = uart.rtsPin.$solution.devicePinName;
%         let ctsPeriphName = uart.ctsPin.$solution.peripheralPinName;
%         let rtsPeriphName = uart.rtsPin.$solution.peripheralPinName;
%         flowName      = 'UARTMSP432E4_FLOWCTRL_HARDWARE';
%         rtsPinName    = 'UARTMSP432E4_'+rtsName+'_'+rtsPeriphName;
%         ctsPinName    = 'UARTMSP432E4_'+ctsName+'_'+ctsPeriphName;
%     }
  {
    .baseAddr           = `peripheral.name`_BASE,
    .intNum             = INT_`peripheral.name`,
    .intPriority        = `Common.intPriority2Hex(inst.interruptPriority)`,
    .flowControl        = `flowName`,
    .ringBufPtr         = uartMSP432E4RingBuffer`i`,
    .ringBufSize        = sizeof(uartMSP432E4RingBuffer`i`),
    .rxPin              = `rxPinName`,
    .txPin              = `txPinName`,
    .ctsPin             = `ctsPinName`,
    .rtsPin             = `rtsPinName`,
    .errorFxn           = `errorFxn`
  },
% }
};

const UART_Config UART_config[`countDef`] = {
% for (let i = 0; i < numInstances; i++) {
%     let inst    = instances[i];
    {   /* `inst.$name` */
        .fxnTablePtr = &UARTMSP432E4_fxnTable,
        .object      = &uartMSP432E4Objects[`i`],
        .hwAttrs     = &uartMSP432E4HWAttrs[`i`]
    },
% }
};

const uint_least8_t UART_count = `numInstances`;
