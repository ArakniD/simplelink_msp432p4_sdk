%%{
/*
 * Copyright (c) 2018-2019, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== SPICC26XXDMA.Board.c.xdt ========
 */

    /* passed by /ti/drivers/templates/Board.c.xdt */
    let SPI = args[0];
    let instances = SPI.$instances;

    /* get ti/drivers common utility functions */
    let Common = system.getScript('/ti/drivers/Common.js');

    /* Board_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = SPI.defaultInstanceName + 'COUNT';

    /* localize the object names with this device ID */
    let devId = system.deviceData.deviceId;

    let attrsVer = '';
    let driver = '';  /* String to attach to the driver include name */
    if (devId.match(/CC13.2/) || devId.match(/CC26.2/)) {
        driver = 'CC26X2';
    }
    else {
        driver = 'CC26XX';
        attrsVer = 'V1';
    }

%%}
/*
 *  =============================== SPI DMA ===============================
 */
#include <ti/drivers/SPI.h>
#include <ti/drivers/spi/SPI`driver`DMA.h>

#define `countDef` `instances.length`

/*
 *  ======== spi`driver`DMAObjects ========
 */
SPI`driver`DMA_Object spi`driver`DMAObjects[`countDef`];

/*
 *  ======== spi`driver`DMAHWAttrs ========
 */
const SPI`driver`DMA_HWAttrs`attrsVer` spi`driver`DMAHWAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % let spi = inst.spi;
    % let ssPin;
    % let name = spi.$solution.peripheralName;
    % let sclkPin = spi.sclkPin.$solution.devicePinName.substring(4);
    % let mosiPin = spi.mosiPin.$solution.devicePinName.substring(4);
    % let misoPin = spi.misoPin.$solution.devicePinName.substring(4);
    % if (inst.mode != 'Three Pin') {
    %     ssPin = spi.ssPin.$solution.devicePinName.substring(4);
    % }
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .baseAddr = `name`_BASE,
        .intNum = INT_`name`_COMB,
        .intPriority = `Common.intPriority2Hex(inst.dmaInterruptPriority)`,
        .swiPriority = `Common.swiPriority2Int(inst.softwareInterruptPriority)`,
        .powerMngrId = PowerCC26XX_PERIPH_`name`,
        .defaultTxBufValue = `inst.defaultTxBufferValue`,
        .rxChannelBitMask = 1<<UDMA_CHAN_`name`_RX,
        .txChannelBitMask = 1<<UDMA_CHAN_`name`_TX,
        .minDmaTransferSize = `inst.minDmaTransferSize`,
        .mosiPin = IOID_`mosiPin`,
        .misoPin = IOID_`misoPin`,
        .clkPin  = IOID_`sclkPin`,
    % if (inst.mode != 'Three Pin') {
        .csnPin  = IOID_`ssPin`
    % } else {
        .csnPin  = PIN_UNASSIGNED
    % }
    },
% }
};

/*
 *  ======== SPI_config ========
 */
const SPI_Config SPI_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .fxnTablePtr = &SPI`driver`DMA_fxnTable,
        .object = &spi`driver`DMAObjects[`inst.$name`],
        .hwAttrs = &spi`driver`DMAHWAttrs[`inst.$name`]
    },
% }
};

const uint_least8_t SPI_count = `countDef`;
