%%{
/*
 * Copyright (c) 2018-2019, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== SPIMSP432E4DMA.Board.c.xdt ========
 */

    /* passed by /ti/drivers/templates/Board.c.xdt */
    let SPI = args[0];
    let instances = SPI.$instances;

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    /* Board_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = SPI.defaultInstanceName + "COUNT";
%%}
/*
 *  =============================== SPI ===============================
 */

#include <ti/drivers/SPI.h>
#include <ti/drivers/spi/SPIMSP432E4DMA.h>

#include <ti/devices/msp432e4/inc/msp432.h>
#include <ti/devices/msp432e4/driverlib/adc.h>
#include <ti/devices/msp432e4/driverlib/interrupt.h>
#include <ti/devices/msp432e4/driverlib/pwm.h>
#include <ti/devices/msp432e4/driverlib/sysctl.h>
#include <ti/devices/msp432e4/driverlib/udma.h>

#define `countDef` `instances.length`

/*
 *  ======== spiMSP432E4DMAObjects ========
 */
SPIMSP432E4DMA_Object spiMSP432E4DMAObjects[`countDef`];

/*
 *  ======== spiMSP432E4DMAHWAttrs ========
 */
const SPIMSP432E4DMA_HWAttrs spiMSP432E4DMAHWAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % let spi = inst.spi;
    %
    % /* name is the peripheral name: EUSCI_A<num> or EUSCI_B<num> ... */
    % let name = spi.$solution.peripheralName; /* SSIn */
    % let sclkPin = "SPIMSP432E4_" + spi.sclkPin.$solution.devicePinName;
    % sclkPin += "_" + name + "CLK";
    % let rxDmaCh = "NULL";
    % let txDmaCh = "NULL";
    % let xdat0Pin = "SPIMSP432E4_";
    % let xdat1Pin = "SPIMSP432E4_";
    % if (inst.duplex == "Full") {
    %     xdat0Pin += spi.mosiPin.$solution.devicePinName + "_" + name + "XDAT0";
    %     xdat1Pin += spi.misoPin.$solution.devicePinName + "_" + name + "XDAT1";
    %     rxDmaCh = spi.dmaRxChannel.$solution.devicePinName.substring(7);
    %     rxDmaCh = "UDMA_CH" + rxDmaCh + "_" + name + "RX";
    %     txDmaCh = spi.dmaTxChannel.$solution.devicePinName.substring(7);
    %     txDmaCh = "UDMA_CH" + txDmaCh + "_" + name + "TX";
    % }
    % else if (inst.duplex == "Master RX Only") {
    %     xdat1Pin += spi.misoPin.$solution.devicePinName + "_" + name + "XDAT1";
    %     xdat0Pin += "PIN_NO_CONFIG";
    %     rxDmaCh = spi.dmaRxChannel.$solution.devicePinName.substring(7);
    %     rxDmaCh = "UDMA_CH" + rxDmaCh + "_" + name + "RX";
    % }
    % else if (inst.duplex == "Master TX Only") {
    %     xdat0Pin += spi.mosiPin.$solution.devicePinName + "_" + name + "XDAT0";
    %     xdat1Pin += "PIN_NO_CONFIG";
    %     txDmaCh = spi.dmaTxChannel.$solution.devicePinName.substring(7);
    %     txDmaCh = "UDMA_CH" + txDmaCh + "_" + name + "TX";
    % }
    % else if (inst.duplex == "Slave TX Only") {
    %     xdat1Pin += spi.misoPin.$solution.devicePinName + "_" + name + "XDAT1";
    %     xdat0Pin += "PIN_NO_CONFIG";
    %     txDmaCh = spi.dmaTxChannel.$solution.devicePinName.substring(7);
    %     txDmaCh = "UDMA_CH" + txDmaCh + "_" + name + "TX";
    % }
    % else if (inst.duplex == "Slave RX Only") {
    %     xdat0Pin += spi.mosiPin.$solution.devicePinName + "_" + name + "XDAT0";
    %     xdat1Pin += "PIN_NO_CONFIG";
    %     rxDmaCh = spi.dmaRxChannel.$solution.devicePinName.substring(7);
    %     rxDmaCh = "UDMA_CH" + rxDmaCh + "_" + name + "RX";
    % }
    %
    % let fssPin = "SPIMSP432E4_";
    % if (inst.mode !== "Three Pin") {
    %     fssPin += spi.ssPin.$solution.devicePinName + "_" + name + "FSS";
    % }
    % else {
    %     fssPin += "PIN_NO_CONFIG";
    % }
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .baseAddr = `name`_BASE,
        .intNum = INT_`name`,
        .intPriority = `Common.intPriority2Hex(inst.dmaInterruptPriority)`,
        .defaultTxBufValue = `inst.defaultTxBufferValue`,
        .rxDmaChannel = `rxDmaCh`,
        .txDmaChannel = `txDmaCh`,
        .clkPinMask  = `sclkPin`,
        .xdat0PinMask = `xdat0Pin`,
        .xdat1PinMask = `xdat1Pin`,
        .fssPinMask  = `fssPin`,
        .minDmaTransferSize = `inst.minDmaTransferSize`
    },
% }
};

/*
 *  ======== SPI_config ========
 */
const SPI_Config SPI_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .fxnTablePtr = &SPIMSP432E4DMA_fxnTable,
        .object = &spiMSP432E4DMAObjects[`inst.$name`],
        .hwAttrs = &spiMSP432E4DMAHWAttrs[`inst.$name`]
    },
% }
};

const uint_least8_t SPI_count = `countDef`;
