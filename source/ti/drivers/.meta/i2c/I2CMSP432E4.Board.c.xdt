%%{
/*
 * Copyright (c) 2018-2019, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== I2CMSP432E4.Board.c.xdt ========
 */

    /* passed by /ti/drivers/templates/Board.c.xdt */
    let I2C = args[0];
    let instances = I2C.$instances;

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    /* Board_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = I2C.defaultInstanceName + "COUNT";
%%}
/*
 *  =============================== I2C ===============================
 */

#include <ti/drivers/I2C.h>
#include <ti/drivers/i2c/I2CMSP432E4.h>

#include <ti/devices/msp432e4/inc/msp432.h>
#include <ti/devices/msp432e4/driverlib/interrupt.h>
#include <ti/devices/msp432e4/driverlib/i2c.h>

#define `countDef` `instances.length`

/*
 *  ======== i2cMSP432E4Objects ========
 */
I2CMSP432E4_Object i2cMSP432E4Objects[`countDef`];

/*
 *  ======== i2cMSP432E4HWAttrs ========
 */
const I2CMSP432E4_HWAttrs i2cMSP432E4HWAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    %
    % /* i2c is a hash of resources assigned to inst: sdaPin, sclPin, ... */
    % let i2c = inst.i2c;
    % /* name is the peripheral name: EUSCI_A<num> or EUSCI_B<num> ... */
    % let name = i2c.$solution.peripheralName;
    % let sclPin = i2c.sclPin.$solution.devicePinName;
    % let sdaPin = i2c.sdaPin.$solution.devicePinName;
    /* `inst.$name` */
    % if (inst.$hardware && inst.$hardware.length > 0) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .baseAddr = `name`_BASE,
        .intNum = INT_`name`,
        .intPriority = `Common.intPriority2Hex(inst.interruptPriority)`,
        .sclPin  = I2CMSP432E4_`sclPin`_`name`SCL,
        .sdaPin = I2CMSP432E4_`sdaPin`_`name`SDA,
        .masterCode = `inst.masterCode`
    },
% }
};

/*
 *  ======== I2C_config ========
 */
const I2C_Config I2C_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % let name = inst.$name;
    /* `inst.$name` */
    % if (inst.$hardware && inst.$hardware.length > 0) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .fxnTablePtr = &I2CMSP432E4_fxnTable,
        .object = &i2cMSP432E4Objects[`name`],
        .hwAttrs = &i2cMSP432E4HWAttrs[`name`]
    },
% }
};

const uint_least8_t I2C_count = `countDef`;
