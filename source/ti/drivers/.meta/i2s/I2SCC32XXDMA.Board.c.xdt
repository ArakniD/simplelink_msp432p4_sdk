%%{
/*
 * Copyright (c) 2018 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== I2SCC32XXDMA.Board.c.xdt ========
 */

     /* passed by /ti/drivers/templates/Board.c.xdt */
    let I2S = args[0];
    let instances = I2S.$instances;

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    /* Board_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = I2S.defaultInstanceName + "COUNT";
%%}
/*
 *  =============================== I2S ===============================
 */
#include <ti/drivers/I2S.h>
#include <ti/drivers/i2s/I2SCC32XXDMA.h>

#include <ti/devices/cc32xx/inc/hw_types.h>
#include <ti/devices/cc32xx/inc/hw_ints.h>
#include <ti/devices/cc32xx/inc/hw_memmap.h>
#include <ti/devices/cc32xx/driverlib/udma.h>

#define `countDef` `instances.length`

/*
 *  ======== i2sCC32XXObjects ========
 */
I2SCC32XXDMA_Object i2sCC32XXObjects[Board_I2SCOUNT];

/*
 *  ======== i2sCC32XXHWAttrs ========
 */
const I2SCC32XXDMA_HWAttrsV1 i2sCC32XXHWAttrs[Board_I2SCOUNT] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % let i2s = inst.i2s;
    % let aclkPin = i2s.clkPin.$solution.packagePinName;
    % if (aclkPin.length == 1) aclkPin = "0" + aclkPin;
    % let aclkxPin = i2s.clkxPin.$solution.packagePinName;
    % if (aclkxPin.length == 1) aclkxPin = "0" + aclkxPin;
    % let afsxPin = i2s.fsPin.$solution.packagePinName;
    % if (afsxPin.length == 1) afsxPin = "0" + afsxPin;
    % let axr0Pin = i2s.data0Pin.$solution.packagePinName;
    % if (axr0Pin.length == 1) axr0Pin = "0" + axr0Pin;
    % let axr1Pin = i2s.data1Pin.$solution.packagePinName;
    % if (axr1Pin.length == 1) axr1Pin = "0" + axr1Pin;
    % let rdmach = i2s.dmaRxChannel.$solution.devicePinName.substring(7); /* UDMA_CHXX */
    % let tdmach = i2s.dmaTxChannel.$solution.devicePinName.substring(7); /* UDMA_CHXX */
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .baseAddr = I2S_BASE,
        .intNum = INT_I2S,
        .intPriority = `Common.intPriority2Hex(inst.interruptPriority)`,
        .rxChannelIndex = UDMA_CH`rdmach`_I2S_RX,
        .txChannelIndex = UDMA_CH`tdmach`_I2S_TX,
        .xr0Pin  = I2SCC32XXDMA_PIN_`axr0Pin`_McAXR0,
        .xr1Pin  = I2SCC32XXDMA_PIN_`axr1Pin`_McAXR1,
        .clkxPin  = I2SCC32XXDMA_PIN_`aclkxPin`_McACLKX,
        .clkPin  = I2SCC32XXDMA_PIN_`aclkPin`_McACLK,
        .fsxPin  = I2SCC32XXDMA_PIN_`afsxPin`_McAFSX,
    },
% }
};

/*
 *  ======== I2S_config ========
 */
const I2S_Config I2S_config[Board_I2SCOUNT] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .fxnTablePtr = &I2SCC32XXDMA_fxnTable,
        .object = &i2sCC32XXObjects[`inst.$name`],
        .hwAttrs = &i2sCC32XXHWAttrs[`inst.$name`]
    },
% }
};

const uint_least8_t I2S_count = Board_I2SCOUNT;
