%%{
/*
 * Copyright (c) 2018 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== RFCC26XX.Board.c.xdt ========
 */

    /* RF module passed in args[] */
    let RF = args[0];

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    let callbackFxn = RF.$static.globalCallbackFunction;
    if ((callbackFxn.length == 0) ||
            (RF.$static.globalCallbackFunction.toLowerCase() == "null")) {
        callbackFxn = "NULL";
    }

    /* generate a list of all extern references */
    let hwiPriority = Common.intPriority2Hex(RF.$static.interruptPriority);
    let swiPriority = Common.swiPriority2Int(RF.$static.softwareInterruptPriority);

    let eventMask;

    if (RF.$static.globalEventMask.length == 0) {
        eventMask = 0;
    }
    else {
        eventMask = RF.$static.globalEventMask.join(" | ");
    }

%%}
/*
 *  =============================== RF Driver ===============================
 */

#include <ti/drivers/rf/RF.h>
% if (callbackFxn != "NULL") {

extern void `callbackFxn`(RF_Handle h, RF_GlobalEvent event, void* arg);
% }

const RFCC26XX_HWAttrsV2 RFCC26XX_hwAttrs = {
    .hwiPriority        = `hwiPriority`,
    .swiPriority        = (uint8_t)`swiPriority`,
    .xoscHfAlwaysNeeded = `RF.$static.xoscNeeded`,
    .globalCallback     = `callbackFxn`,
    .globalEventMask    = `eventMask`
};
