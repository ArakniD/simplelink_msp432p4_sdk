%%{
/* 
 *  Copyright (c) 2008-2015 Texas Instruments and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 *
 *  Contributors:
 *      Texas Instruments - initial implementation
 *
 * */

/* Linker templates are passed the following arguments:
 *      $out        - an open file stream for the generated linker
 *                    command file
 *      $args[]     - array of zero or more libraries that should be linked
 *                    with (in the order they appear in the argument list)
 *
 *  We can't add "'s around names; otherwise the GNU linker looks for names
 *  with "'s.
 */

/*
 * Bare Metal ARM v7a and v7m link template
 */
%%}
/*
 * This file was generated by linkcmd_bm_v7a.xdt from the gnu.target.arm  package.
 */

ENTRY(_c_int00)

__TI_STACK_SIZE = `utils.toHex(prog.stack)`;
__STACK_SIZE = __TI_STACK_SIZE;

__HEAP_SIZE = `utils.toHex(prog.heap)`;

%if ($args.length > 0) {
INPUT(
    %for (var i = 0; i < $args.length; i++) {
    "`$args[i]`"
    %}
)
%}

MEMORY
{
%for (var i = 0; i < prog.cpu.memoryMap.length; i++) {
    %var mem = prog.cpu.memoryMap[i];
    %var page = (mem.page != null) ? ("PAGE " + mem.page + ": ") : "";
    %var org = utils.toHex(mem.base);
    %var len = utils.toHex(mem.len);
    %var access = (mem.access != null) ? (" (" + mem.access + ")") : "";
    `page``mem.name``access` : org = `org`, len = `len`
%}
}

/*
 * In order to put the .bass, .text, .data, .heap or .stack into a
 * different memory section, change the corresponding REGION_ALIAS.
 */
REGION_ALIAS("REGION_BSS", `Program.platform.dataMemory`);
REGION_ALIAS("REGION_TEXT", `Program.platform.codeMemory`);
REGION_ALIAS("REGION_DATA", `Program.platform.dataMemory`);
REGION_ALIAS("REGION_STACK", `Program.platform.stackMemory`);
REGION_ALIAS("REGION_HEAP", `Program.platform.dataMemory`);
REGION_ALIAS("REGION_ARM_EXTAB", `Program.platform.dataMemory`);
REGION_ALIAS("REGION_ARM_EXIDX", `Program.platform.dataMemory`);

/*
 * symbolic aliases for static instance objects
 */
%for (var sym in Program.symbol) {
    %var inst = Program.symbol[sym];
    %if (typeof(inst) == 'number') {
`this.build.target.asmName(sym)` = `inst`;
    %}
    %else {
        %var objTab = inst.$module.$name.replace(/\./g, '_') + '_Object__table__V';
        %var off = Program.$capsule.instSize(inst) * inst.$index;
`this.build.target.asmName(sym)` = `this.build.target.asmName(objTab)` + `off`;
    %}
%}

/*
 * Linker command file contributions from all loaded packages:
 */
%var _utils = xdc.loadCapsule("gnu/targets/linkUtils.xs");
`_utils.genContributions($args)`

SECTIONS {

    `_utils.genSections(prog)`

    .c_int00 : {
        KEEP (*(.c_int00))
    } > REGION_TEXT

    .text : {
        CREATE_OBJECT_SYMBOLS
        KEEP (*(.resetVecs))
        KEEP (*(.text))
        *(.text.*)
        *(.gnu.linkonce.t*)
        *(.gnu.warning)
        *(.glue*)
        . = ALIGN(0x4);
        KEEP (*(.ctors))
        *(.gnu.linkonce.r.*)
        . = ALIGN(0x4);
        __init_array_start = .;
        KEEP(*(SORT(.init_array.*)))
        KEEP(*(.init_array))
        __init_array_end = .;
        *(.init)
        *(.fini*)
    } > REGION_TEXT

    .rodata : {
        *(.rodata)
        *(.rodata.*)
    } > REGION_TEXT

    .ARM.extab : {
        *(.ARM.extab*)
        *(.gnu.linkonce.armextab.*)
    } > REGION_ARM_EXTAB

    .ARM.exidx : {
        __exidx_start = .;
        *(.ARM.exidx*)
        *(.gnu.linkonce.armexidx.*)
        __exidx_end = .;
    } > REGION_ARM_EXIDX

    etext   = .;
    _etext  = .;
    __etext = .;

    .data : ALIGN(4) {
        __data_load__ = LOADADDR (.data);
        __data_start__ = .;
        *(.got.plt)
        *(.got)
        *(.shdata)
        KEEP (*(.data))
        KEEP (*(.data*))
        *(.gnu.linkonce.d.*)
        . = ALIGN (4);
        __data_end__ = .;
    } > REGION_DATA AT> REGION_TEXT

    /*
     * Place .heap section before .bss and .stack as the _sbrk
     * implementation in librdimon.a compares the (heap_end + incr)
     * to the current SP value to check if the heap has overlapped
     * with the stack. 
     *
     * If .heap is placed between .bss and .stack in a SYS/BIOS app,
     * when the task stack (allocated in .bss) is the current stack,
     * the heap check in _sbrk will fail and trigger an error even
     * though the heap might not have actually overlapped with the
     * system stack.
     */
    .heap : ALIGN(0x100) {
        __heap_start__ = .;
        end = __heap_start__;
        _end = end;
        __end = end;
        . += __HEAP_SIZE;
        __heap_end__ = .;
        __HeapLimit = __heap_end__;
    } > REGION_HEAP

    .bss : {
        __bss_start__ = .;
        *(.shbss)
        KEEP (*(.bss))
        *(.bss.*)
        *(.gnu.linkonce.b.*)
        *(COMMON)
        . = ALIGN (4);
        __bss_end__ = .;
    } > REGION_BSS

    .stack : ALIGN(0x0008) {
        __TI_STACK_BASE = .;
        __stack = .;
        . += __TI_STACK_SIZE;
    } > REGION_STACK

    .stab           0 : { *(.stab) }
    .stabstr        0 : { *(.stabstr) }
    .stab.excl      0 : { *(.stab.excl) }
    .stab.exclstr   0 : { *(.stab.exclstr) }
    .stab.index     0 : { *(.stab.index) }
    .stab.indexstr  0 : { *(.stab.indexstr) }
    .comment        0 : { *(.comment) }

    .debug          0 : { *(.debug) }
    .line           0 : { *(.line)  }
    .debug_srcinfo  0 : { *(.debug_srcinfo) }
    .debug_sfnames  0 : { *(.debug_sfnames) }
    .debug_aranges  0 : { *(.debug_aranges) }
    .debug_pubnames 0 : { *(.debug_pubnames) }
    .debug_info     0 : { *(.debug_info) }
    .debug_abbrev   0 : { *(.debug_abbrev) }
    .debug_line     0 : { *(.debug_line) }
    .debug_frame    0 : { *(.debug_frame) }
    .debug_str      0 : { *(.debug_str) }
    .debug_loc      0 : { *(.debug_loc) }
    .debug_macinfo  0 : { *(.debug_macinfo) }
    .debug_weaknames    0 : { *(.debug_weaknames) }
    .debug_funcnames    0 : { *(.debug_funcnames) }
    .debug_typenames    0 : { *(.debug_typenames) }
    .debug_varnames     0 : { *(.debug_varnames) }
    .debug_pubtypes     0 : { *(.debug_pubtypes) }
    .debug_ranges       0 : { *(.debug_ranges) }

}

/* function aliases */
%if (prog.build.profile.match(/blas/) == null) {
%    for (var keys = this.$$aliases.keys(); keys.hasMoreElements(); ) {
%        var key = keys.nextElement();
`key` = `this.$$aliases.get(key)`;
%    }
%}
%%{
/*
 * @(#) gnu.targets.arm; 1, 0, 0,0; 8-9-2019 17:14:53; /db/ztree/library/trees/xdctargets/xdctargets-v00/src/ xlibrary

 */

%%}
