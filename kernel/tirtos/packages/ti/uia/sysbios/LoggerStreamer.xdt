%%{
/*
 * Copyright (c) 2013, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

    var LoggerStreamer = xdc.module("ti.uia.sysbios.LoggerStreamer");

    // Size in words
    var write8EventSize = (LoggerStreamer.isTimestampEnabled) ? 12 : 10;

    var bits8InTS = (LoggerStreamer.isTimestampEnabled) ? 8 : 0;

    var hdrOffsetInWords = 4;
    var bytesInWord = 4;

    // Bits8 in Timestamp + Bits8 in writeMemory + Bits8 in event header,
    // converted to bits32
    var headerSizeBits32 = (bits8InTS + 24 + 8) / 4;

    function bits32ToMau(bits32)
    {
        return ("((" + bits32 + ") * sizeof(Bits32))");
    }

    function bits32ToBits8(bits32)
    {
        return ("((" + bits32 + ") * 4)");
    }
%%}
%/*
% *  ======== LoggerStreamer.xdt ========
% */

#include <xdc/std.h>

#include <xdc/runtime/Log.h>
#include <xdc/runtime/Types.h>
#include <xdc/runtime/Timestamp.h>
#include <xdc/runtime/Startup.h>
#include <xdc/runtime/System.h>
#include <ti/sysbios/hal/Hwi.h>
#include <ti/uia/runtime/EventHdr.h>
#include <ti/uia/runtime/UIAPacket.h>
#include <ti/uia/sysbios/LoggerStreamer.h>

#ifdef xdc_target__isaCompatible_64P
#include <c6x.h>
#endif

%if (LoggerStreamer.isBadPacketDetectionEnabled) {
#include <stdio.h>
%}

UInt16 ti_uia_sysbios_LoggerStreamer_eventRecSequence = 0;

UInt16 ti_uia_sysbios_LoggerStreamer_uiaPacketSequence = 0;

/*
 *  ======== ti_uia_sysbios_LoggerStreamer_fillInTimestamp =========
 */
%if (LoggerStreamer.isTimestampEnabled) {
static inline UInt32 *ti_uia_sysbios_LoggerStreamer_fillInTimestamp(UInt32 *writePtr)
{
#ifndef xdc_target__isaCompatible_64P
    xdc_runtime_Types_Timestamp64 tstamp;

    xdc_runtime_Timestamp_get64(&tstamp);
    *(writePtr++) = tstamp.lo;
    *(writePtr++) = tstamp.hi;
#else
    *(writePtr++) = TSCL;
    *(writePtr++) = TSCH;
#endif
    return (writePtr);
}
%}

/*
 *  ======== LoggerStreamer_fillInEventHdrSnapshot =========
 */
static inline Bits32 *ti_uia_sysbios_LoggerStreamer_fillInEventHdrSnapshot(Bits32 *writePtr,
        SizeT numBits8ToWrite, Bits32 serial)
{
%if (LoggerStreamer.isTimestampEnabled == true) {
    *(writePtr++) = ti_uia_runtime_EventHdr_genEventHdrWord1(numBits8ToWrite, serial,
            ti_uia_runtime_EventHdr_HdrType_EventWithSnapshotIdAndTimestamp);
    writePtr = ti_uia_sysbios_LoggerStreamer_fillInTimestamp(writePtr);
%}
%else {
    *(writePtr++) = ti_uia_runtime_EventHdr_genEventHdrWord1(numBits8ToWrite, serial,
            ti_uia_runtime_EventHdr_HdrType_EventWithSnapshotId);
%}
    return (writePtr);
}


/*
 *  ======== ti_uia_sysbios_LoggerStreamer_writeFinish ========
 */
static inline Void ti_uia_sysbios_LoggerStreamer_writeFinish(UInt32 *writePtr)
{
    if (writePtr > ti_uia_sysbios_LoggerStreamer_Module__state__V.end) {
        /* Set UIA packet length and sequence number */
        ti_uia_runtime_UIAPacket_setEventLengthFast(
                (ti_uia_runtime_UIAPacket_Hdr*)ti_uia_sysbios_LoggerStreamer_Module__state__V.buffer,
                (UInt32)((writePtr - ti_uia_sysbios_LoggerStreamer_Module__state__V.buffer) * `bytesInWord`));
        ti_uia_runtime_UIAPacket_setSequenceCountFast(
                (ti_uia_runtime_UIAPacket_Hdr*)ti_uia_sysbios_LoggerStreamer_Module__state__V.buffer,
                ti_uia_sysbios_LoggerStreamer_uiaPacketSequence);

        /*
         *  Check if there is garbage data after the UIA packet
         *  and add an invalid UIA header
         */
        if (ti_uia_sysbios_LoggerStreamer_Module__state__V.end + `write8EventSize` - writePtr > 0) {
            ti_uia_runtime_UIAPacket_setInvalidHdr(writePtr, (ti_uia_sysbios_LoggerStreamer_Module__state__V.end +
                    `write8EventSize` - writePtr) * `bytesInWord`);
        }

%if (LoggerStreamer.testForNullWrPtr) {
        /* Set the module write ptr to NULL to prevent log calls in exchange */
        ti_uia_sysbios_LoggerStreamer_Module__state__V.write = NULL;
%}
%if (LoggerStreamer.isBadPacketDetectionEnabled) {
        ti_uia_sysbios_LoggerStreamer_validatePacket(ti_uia_sysbios_LoggerStreamer_Module__state__V.buffer,
                ti_uia_sysbios_LoggerStreamer_bufSize__C);
%}
        /* Send filled buffer to exchange function */
        ti_uia_sysbios_LoggerStreamer_Module__state__V.buffer =
            (UInt32*)ti_uia_sysbios_LoggerStreamer_exchangeFxn((Ptr)ti_uia_sysbios_LoggerStreamer_Module__state__V.buffer);

        /* Update ptrs to new buffer */
        ti_uia_sysbios_LoggerStreamer_Module__state__V.write =
            ti_uia_sysbios_LoggerStreamer_Module__state__V.buffer + `hdrOffsetInWords`;
        ti_uia_sysbios_LoggerStreamer_Module__state__V.end =
                ti_uia_sysbios_LoggerStreamer_Module__state__V.buffer +
                (ti_uia_sysbios_LoggerStreamer_bufSize / sizeof(UInt32)) - `write8EventSize`;
        ti_uia_sysbios_LoggerStreamer_uiaPacketSequence++;
    }
    else {
        ti_uia_sysbios_LoggerStreamer_Module__state__V.write = writePtr;
    }
}

/*
 *  ======== ti_uia_sysbios_LoggerStreamer_filterOutEvent ========
 *  Returns TRUE if the event should be filtered out.
 *  TODO - Might be more clearly written as 'passesFilter'?
 */
Bool ti_uia_sysbios_LoggerStreamer_filterOutEvent__E(xdc_runtime_Diags_Mask mask)
{
%if (LoggerStreamer.filterByLevel == true) {
    /*
     * If filtering for the event's diags category is currently
     * set to level1...
     */
    if (ti_uia_sysbios_LoggerStreamer_Module__state__V.level1 & mask) {
        /* If the event is lower than level1, filter it out. */
        return (xdc_runtime_Diags_compareLevels(xdc_runtime_Diags_getLevel(mask), xdc_runtime_Diags_LEVEL1));
    }
    /*
     * If filtering for the event's diags category is currently
     * set to level2...
     */
    else if (ti_uia_sysbios_LoggerStreamer_Module__state__V.level2 & mask) {
        /* If the event is lower than level2, filter it out. */
        return (xdc_runtime_Diags_compareLevels(xdc_runtime_Diags_getLevel(mask), xdc_runtime_Diags_LEVEL2));
    }
    /*
     * If filtering for the event's diags category is currently
     * set to level3...
     */
    else if (ti_uia_sysbios_LoggerStreamer_Module__state__V.level3 & mask) {
        /* If the event is lower than level3, filter it out. */
        return (xdc_runtime_Diags_compareLevels(xdc_runtime_Diags_getLevel(mask),
                xdc_runtime_Diags_LEVEL3));
    }
    /*
     * Otherwise, the filter level must be level4, which means that events of
     * all levels should be logged.
     */
    else {
        return (FALSE);
    }

%}
%else {
    return (FALSE);
%}
}


/*
 *  ======== ti_uia_sysbios_LoggerStreamer_write0__E =========
 */
Void ti_uia_sysbios_LoggerStreamer_write0__E(
                                    ti_uia_sysbios_LoggerStreamer_Object *obj,
                                    xdc_runtime_Log_Event evt,
                                    xdc_runtime_Types_ModuleId mid)
{
    UInt key = ti_sysbios_hal_Hwi_disable();
    UInt32 *writePtr = ti_uia_sysbios_LoggerStreamer_Module__state__V.write;

    ti_uia_sysbios_LoggerStreamer_eventRecSequence++;

%if (LoggerStreamer.testForNullWrPtr) {
    if (writePtr == NULL) {
        ti_sysbios_hal_Hwi_restore(key);
        return;
    }
%}

%if (LoggerStreamer.supportLoggerDisable == true) {
    if (!ti_uia_sysbios_LoggerStreamer_Module__state__V.enabled) {
        ti_sysbios_hal_Hwi_restore(key);
        return;
    }
%}

%if (LoggerStreamer.filterByLevel == true) {
    if (ti_uia_sysbios_LoggerStreamer_filterOutEvent__E(xdc_runtime_Log_getMask(evt))) {
        return;
    }
%}

%if (LoggerStreamer.isTimestampEnabled == true) {

    *writePtr++ = ti_uia_runtime_EventHdr_genEventHdrWord1(
            `LoggerStreamer.WRITE0_SIZE_IN_BYTES + LoggerStreamer.TIMESTAMP`,  /* write0 + timestamp size (bytes) */
            ti_uia_sysbios_LoggerStreamer_eventRecSequence,
            ti_uia_runtime_EventHdr_HdrType_EventWithTimestamp);
    writePtr = ti_uia_sysbios_LoggerStreamer_fillInTimestamp(writePtr);
%}
%else {
    *writePtr++ = ti_uia_runtime_EventHdr_genEventHdrWord1(
            `LoggerStreamer.WRITE0_SIZE_IN_BYTES`,  /* write0 size (bytes) */
            ti_uia_sysbios_LoggerStreamer_eventRecSequence,
            ti_uia_runtime_EventHdr_HdrType_Event);
%}
    *writePtr++ = xdc_runtime_Types_makeEvent(xdc_runtime_Log_getEventId(evt), mid);

    ti_uia_sysbios_LoggerStreamer_writeFinish(writePtr);

    ti_sysbios_hal_Hwi_restore(key);
}

/*
 *  ======== ti_uia_sysbios_LoggerStreamer_write1__E =========
 */
Void ti_uia_sysbios_LoggerStreamer_write1__E(
                                    ti_uia_sysbios_LoggerStreamer_Object *obj,
                                    xdc_runtime_Log_Event evt,
                                    xdc_runtime_Types_ModuleId mid,
                                    IArg a1)
{
    UInt key = ti_sysbios_hal_Hwi_disable();
    UInt32 *writePtr = ti_uia_sysbios_LoggerStreamer_Module__state__V.write;

    ti_uia_sysbios_LoggerStreamer_eventRecSequence++;

%if (LoggerStreamer.testForNullWrPtr) {
    if (writePtr == NULL) {
        ti_sysbios_hal_Hwi_restore(key);
        return;
    }
%}

%if (LoggerStreamer.supportLoggerDisable == true) {
    if (!ti_uia_sysbios_LoggerStreamer_Module__state__V.enabled) {
        ti_sysbios_hal_Hwi_restore(key);
        return;
    }
%}

%if (LoggerStreamer.filterByLevel == true) {
    if (ti_uia_sysbios_LoggerStreamer_filterOutEvent__E(xdc_runtime_Log_getMask(evt))) {
        return;
    }
%}

%if (LoggerStreamer.isTimestampEnabled == true) {

    *writePtr++ = ti_uia_runtime_EventHdr_genEventHdrWord1(
            `LoggerStreamer.WRITE1_SIZE_IN_BYTES + LoggerStreamer.TIMESTAMP`,  /* write1 + timestamp size (bytes) */
            ti_uia_sysbios_LoggerStreamer_eventRecSequence,
            ti_uia_runtime_EventHdr_HdrType_EventWithTimestamp);
    writePtr = ti_uia_sysbios_LoggerStreamer_fillInTimestamp(writePtr);
%}
%else {
    *writePtr++ = ti_uia_runtime_EventHdr_genEventHdrWord1(
            `LoggerStreamer.WRITE1_SIZE_IN_BYTES`,  /* write1 size (bytes) */
            ti_uia_sysbios_LoggerStreamer_eventRecSequence,
            ti_uia_runtime_EventHdr_HdrType_Event);
%}
    *writePtr++ = xdc_runtime_Types_makeEvent(xdc_runtime_Log_getEventId(evt), mid);
    *writePtr++ = a1;

    ti_uia_sysbios_LoggerStreamer_writeFinish(writePtr);

    ti_sysbios_hal_Hwi_restore(key);
}

/*
 *  ======== ti_uia_sysbios_LoggerStreamer_write2__E =========
 */
Void ti_uia_sysbios_LoggerStreamer_write2__E(
                                    ti_uia_sysbios_LoggerStreamer_Object *obj,
                                    xdc_runtime_Log_Event evt,
                                    xdc_runtime_Types_ModuleId mid,
                                    IArg a1, IArg a2)
{
    UInt key = ti_sysbios_hal_Hwi_disable();
    UInt32 *writePtr = ti_uia_sysbios_LoggerStreamer_Module__state__V.write;

    ti_uia_sysbios_LoggerStreamer_eventRecSequence++;

%if (LoggerStreamer.testForNullWrPtr) {
    if (writePtr == NULL) {
        ti_sysbios_hal_Hwi_restore(key);
        return;
    }
%}

%if (LoggerStreamer.supportLoggerDisable == true) {
    if (!ti_uia_sysbios_LoggerStreamer_Module__state__V.enabled) {
        ti_sysbios_hal_Hwi_restore(key);
        return;
    }
%}

%if (LoggerStreamer.filterByLevel == true) {
        if (ti_uia_sysbios_LoggerStreamer_filterOutEvent__E(xdc_runtime_Log_getMask(evt))) {
                return;
        }
%}

%if (LoggerStreamer.isTimestampEnabled == true) {

    *writePtr++ = ti_uia_runtime_EventHdr_genEventHdrWord1(
            `LoggerStreamer.WRITE2_SIZE_IN_BYTES + LoggerStreamer.TIMESTAMP`,  /* write2 + timestamp size (bytes) */
            ti_uia_sysbios_LoggerStreamer_eventRecSequence,
            ti_uia_runtime_EventHdr_HdrType_EventWithTimestamp);
    writePtr = ti_uia_sysbios_LoggerStreamer_fillInTimestamp(writePtr);
%}
%else {
    *writePtr++ = ti_uia_runtime_EventHdr_genEventHdrWord1(
            `LoggerStreamer.WRITE2_SIZE_IN_BYTES`,  /* write2 size (bytes) */
            ti_uia_sysbios_LoggerStreamer_eventRecSequence,
            ti_uia_runtime_EventHdr_HdrType_Event);
%}
    *writePtr++ = xdc_runtime_Types_makeEvent(xdc_runtime_Log_getEventId(evt), mid);
    *writePtr++ = a1;
    *writePtr++ = a2;

    ti_uia_sysbios_LoggerStreamer_writeFinish(writePtr);

    ti_sysbios_hal_Hwi_restore(key);
}

/*
 *  ======== ti_uia_sysbios_LoggerStreamer_write4__E =========
 */
Void ti_uia_sysbios_LoggerStreamer_write4__E(
                                    ti_uia_sysbios_LoggerStreamer_Object *obj,
                                    xdc_runtime_Log_Event evt,
                                    xdc_runtime_Types_ModuleId mid,
                                    IArg a1, IArg a2, IArg a3, IArg a4)
{
    UInt key = ti_sysbios_hal_Hwi_disable();
    UInt32 *writePtr = ti_uia_sysbios_LoggerStreamer_Module__state__V.write;

    ti_uia_sysbios_LoggerStreamer_eventRecSequence++;

%if (LoggerStreamer.testForNullWrPtr) {
    if (writePtr == NULL) {
        ti_sysbios_hal_Hwi_restore(key);
        return;
    }
%}

%if (LoggerStreamer.supportLoggerDisable == true) {
    if (!ti_uia_sysbios_LoggerStreamer_Module__state__V.enabled) {
        ti_sysbios_hal_Hwi_restore(key);
        return;
    }
%}

%if (LoggerStreamer.filterByLevel == true) {
    if (ti_uia_sysbios_LoggerStreamer_filterOutEvent__E(xdc_runtime_Log_getMask(evt))) {
        return;
    }
%}

%if (LoggerStreamer.isTimestampEnabled == true) {

    *writePtr++ = ti_uia_runtime_EventHdr_genEventHdrWord1(
            `LoggerStreamer.WRITE4_SIZE_IN_BYTES + LoggerStreamer.TIMESTAMP`,  /* write4 + timestamp size (bytes) */
            ti_uia_sysbios_LoggerStreamer_eventRecSequence,
            ti_uia_runtime_EventHdr_HdrType_EventWithTimestamp);
    writePtr = ti_uia_sysbios_LoggerStreamer_fillInTimestamp(writePtr);
%}
%else {
    *writePtr++ = ti_uia_runtime_EventHdr_genEventHdrWord1(
            `LoggerStreamer.WRITE4_SIZE_IN_BYTES`,  /* write4 size (bytes) */
            ti_uia_sysbios_LoggerStreamer_eventRecSequence,
            ti_uia_runtime_EventHdr_HdrType_Event);
%}
    *writePtr++ = xdc_runtime_Types_makeEvent(xdc_runtime_Log_getEventId(evt), mid);
    *writePtr++ = a1;
    *writePtr++ = a2;
    *writePtr++ = a3;
    *writePtr++ = a4;

    ti_uia_sysbios_LoggerStreamer_writeFinish(writePtr);

    ti_sysbios_hal_Hwi_restore(key);
}


/*
 *  ======== ti_uia_sysbios_LoggerStreamer_write8__E =========
 */
Void ti_uia_sysbios_LoggerStreamer_write8__E(
                                    ti_uia_sysbios_LoggerStreamer_Object *obj,
                                    xdc_runtime_Log_Event evt,
                                    xdc_runtime_Types_ModuleId mid,
                                    IArg a1, IArg a2, IArg a3, IArg a4,
                                    IArg a5, IArg a6, IArg a7, IArg a8)
{
    UInt key = ti_sysbios_hal_Hwi_disable();
    UInt32 *writePtr = ti_uia_sysbios_LoggerStreamer_Module__state__V.write;

    ti_uia_sysbios_LoggerStreamer_eventRecSequence++;

%if (LoggerStreamer.testForNullWrPtr) {
    if (writePtr == NULL) {
        ti_sysbios_hal_Hwi_restore(key);
        return;
    }
%}

%if (LoggerStreamer.supportLoggerDisable == true) {
    if (!ti_uia_sysbios_LoggerStreamer_Module__state__V.enabled) {
        ti_sysbios_hal_Hwi_restore(key);
        return;
    }
%}

%if (LoggerStreamer.filterByLevel == true) {
    if (ti_uia_sysbios_LoggerStreamer_filterOutEvent__E(xdc_runtime_Log_getMask(evt))) {
        return;
    }
%}

%if (LoggerStreamer.isTimestampEnabled == true) {

    *writePtr++ = ti_uia_runtime_EventHdr_genEventHdrWord1(
            `LoggerStreamer.WRITE8_SIZE_IN_BYTES + LoggerStreamer.TIMESTAMP`,  /* write8 + timestamp size (bytes) */
            ti_uia_sysbios_LoggerStreamer_eventRecSequence,
            ti_uia_runtime_EventHdr_HdrType_EventWithTimestamp);
    writePtr = ti_uia_sysbios_LoggerStreamer_fillInTimestamp(writePtr);
%}
%else {
    *writePtr++ = ti_uia_runtime_EventHdr_genEventHdrWord1(
            `LoggerStreamer.WRITE8_SIZE_IN_BYTES`,  /* write8 size (bytes) */
            ti_uia_sysbios_LoggerStreamer_eventRecSequence,
            ti_uia_runtime_EventHdr_HdrType_Event);
%}
    *writePtr++ = xdc_runtime_Types_makeEvent(xdc_runtime_Log_getEventId(evt), mid);
    *writePtr++ = a1;
    *writePtr++ = a2;
    *writePtr++ = a3;
    *writePtr++ = a4;
    *writePtr++ = a5;
    *writePtr++ = a6;
    *writePtr++ = a7;
    *writePtr++ = a8;

    ti_uia_sysbios_LoggerStreamer_writeFinish(writePtr);

    ti_sysbios_hal_Hwi_restore(key);
}
/*
 *  ======== ti_uia_sysbios_LoggerStreamer_setFilterLevel__E ========
 *  Sets the filter level for the given diags level.
 *
 *  LoggerStreamer maintains a separate filter level for every diags category.
 *  This is accomplished by maintaining three masks, one for each of the levels
 *  1 - 3, wich store the diags categories which are currently at that level.
 *  There is no mask for level4; if the diags category is not found in levels
 *  1-3, it is  assumed that the filtering level is level4.
 *
 *  This API is an instance function per the IFilterLogger interface, but
 *  LoggerStreamer only maintains module-wide filter levels.
 *
 *  TODO - Should this be conditional on the 'filterByLevel' config?
 */
Void ti_uia_sysbios_LoggerStreamer_setFilterLevel__E(ti_uia_sysbios_LoggerStreamer_Object *obj,
                xdc_runtime_Diags_Mask mask,
                xdc_runtime_Diags_EventLevel filterLevel)
{
%if (LoggerStreamer.filterByLevel == true) {

    /*
     * First, remove the bits in 'mask' from all of the current 'level' masks.
     * Use level = (~(mask & level) & level) to remove 'mask' bits from all
     * 'level's.
     *    1. AND mask and level to get set of bits that appear in both
     *    2. Take the inverse of this set and AND it with 'level' to disable
     *       any bits which appear in 'mask'.
     */
    ti_uia_sysbios_LoggerStreamer_Module__state__V.level1 = ~(ti_uia_sysbios_LoggerStreamer_Module__state__V.level1 & mask) &
            ti_uia_sysbios_LoggerStreamer_Module__state__V.level1;
    ti_uia_sysbios_LoggerStreamer_Module__state__V.level2 = ~(ti_uia_sysbios_LoggerStreamer_Module__state__V.level2 & mask) &
            ti_uia_sysbios_LoggerStreamer_Module__state__V.level2;
    ti_uia_sysbios_LoggerStreamer_Module__state__V.level3 = ~(ti_uia_sysbios_LoggerStreamer_Module__state__V.level3 & mask) &
            ti_uia_sysbios_LoggerStreamer_Module__state__V.level3;

    /* Enable the bits specified in 'mask' in the appropriate level. */
    switch (filterLevel) {
        case xdc_runtime_Diags_LEVEL1:
            ti_uia_sysbios_LoggerStreamer_Module__state__V.level1 |= mask;
            break;
        case xdc_runtime_Diags_LEVEL2:
            ti_uia_sysbios_LoggerStreamer_Module__state__V.level2 |= mask;
            break;
        case xdc_runtime_Diags_LEVEL3:
            ti_uia_sysbios_LoggerStreamer_Module__state__V.level3 |= mask;
            break;
        case xdc_runtime_Diags_LEVEL4:
                break;
        default: {
            /* Raise an error that a bad filter level was received. */
            xdc_runtime_Error_Block eb;
            xdc_runtime_Error_init(&eb);
            xdc_runtime_Error_raise(&eb, ti_uia_sysbios_LoggerStreamer_E_badLevel, filterLevel, 0);
            break;
        }
    }
%}
}

/*
 *  ======== ti_uia_sysbios_LoggerStreamer_getFilterLevel__E ========
 *  Returns the mask of diags categories which are set to the specified filter
 *  level.
 *
 *  This API is an instance function per the IFilterLogger interface, but
 *  LoggerStreamer only maintains module-wide filter levels.
 */
xdc_runtime_Diags_Mask ti_uia_sysbios_LoggerStreamer_getFilterLevel__E (ti_uia_sysbios_LoggerStreamer_Object *obj,
                xdc_runtime_Diags_EventLevel level)
{
%if (LoggerStreamer.filterByLevel == true) {

    /* Return the mask of diags categories associated with 'level'. */
    switch (level) {
        case xdc_runtime_Diags_LEVEL1:
            return (ti_uia_sysbios_LoggerStreamer_Module__state__V.level1);
        case xdc_runtime_Diags_LEVEL2:
            return (ti_uia_sysbios_LoggerStreamer_Module__state__V.level2);
        case xdc_runtime_Diags_LEVEL3:
            return (ti_uia_sysbios_LoggerStreamer_Module__state__V.level3);
        case xdc_runtime_Diags_LEVEL4:
            /*
             * Return the inverse of all the bits set in levels 1 - 3,
             * and only return those bits which belong to the set of
             * logging categories (excludes asserts and the two level bits).
             */
            return (~(ti_uia_sysbios_LoggerStreamer_Module__state__V.level1 |
                    ti_uia_sysbios_LoggerStreamer_Module__state__V.level2 |
                    ti_uia_sysbios_LoggerStreamer_Module__state__V.level3) &
                    xdc_runtime_Diags_ALL_LOGGING);
        default: {
            /* Raise an error to report the bad filter level. */
            xdc_runtime_Error_Block eb;
            xdc_runtime_Error_init(&eb);
            xdc_runtime_Error_raise(&eb, ti_uia_sysbios_LoggerStreamer_E_badLevel, level, 0);
            return (0);
        }
    }
%}
%else {
    return (0);
%}

}


/*
 *  ======== LoggerStreamer_setModuleIdToRouteToStatusLogger ========
 *  Specifies a module ID to route events to the statusLogger for.
 *  Set mid to -1 for 'none', since a mid of 0 is used for Log_print events.
 *  NOT IMPLEMENTED for LoggerStreamer
 */
Void ti_uia_sysbios_LoggerStreamer_setModuleIdToRouteToStatusLogger__E(xdc_runtime_Types_ModuleId mid)
{
}


/*  ======== writeMemoryRange =========
 *  logs a range of consecutive memory values.
 *
 *  Breaks up large blocks into a series of smaller blocks in order to limit the
 *  maximum amount of time that interrupts are disabled.
 */
Void ti_uia_sysbios_LoggerStreamer_writeMemoryRange__E(ti_uia_sysbios_LoggerStreamer_Object *obj, xdc_runtime_Log_Event evt,
                xdc_runtime_Types_ModuleId mid, UInt32 snapshotId,
                IArg fileName, IArg lineNum, IArg fmt,
                IArg startAdrs, UInt32 lengthInMAUs)
{
    Int i;
    SizeT eventSizeBits32;
    SizeT dataSizeBits32;
    Ptr pAdrs = (Ptr)startAdrs;
    SizeT headerSizeBits32;
    SizeT lenAdjustedBits32;
    Int numRecords;
    UInt key;
    UInt32 *writePtr = ti_uia_sysbios_LoggerStreamer_Module__state__V.write;

%if (LoggerStreamer.testForNullWrPtr) {
    if (writePtr == NULL) {
        return;
    }
%}

%if (LoggerStreamer.supportLoggerDisable == true) {
    if (!ti_uia_sysbios_LoggerStreamer_Module__state__V.enabled) {
        return;
    }
%}

%if (LoggerStreamer.filterByLevel == true) {
    if (ti_uia_sysbios_LoggerStreamer_filterOutEvent__E(xdc_runtime_Log_getMask(evt))) {
        return;
    }
%}

    /* Size of header in 32 bit words */
    headerSizeBits32 = `headerSizeBits32`;

    /* Round up to word boundary */
    lenAdjustedBits32 = (lengthInMAUs + sizeof(Bits32) - 1) / sizeof(Bits32);

    numRecords = (lenAdjustedBits32 / (ti_uia_sysbios_LoggerStreamer_Module__state__V.maxEventSizeInBits32 - headerSizeBits32)) + 1;

    for (i = 0; i < numRecords; i++) {
        /*
         * Update serial number even if the buffer is full or disabled.
         * We do this because a reader (decoder) of the buffer needs to
         * know if events have been missed, and the buffer might become
         * un-FULL at some later time.
         */
        ti_uia_sysbios_LoggerStreamer_eventRecSequence++;

        if ((headerSizeBits32 + lenAdjustedBits32) > ti_uia_sysbios_LoggerStreamer_Module__state__V.maxEventSizeInBits32) {
            dataSizeBits32 = ti_uia_sysbios_LoggerStreamer_Module__state__V.maxEventSizeInBits32 - headerSizeBits32;
            lenAdjustedBits32 -= dataSizeBits32;
        }
        else {
            dataSizeBits32 = lenAdjustedBits32;
        }
        eventSizeBits32 = dataSizeBits32 + headerSizeBits32;

        key = ti_sysbios_hal_Hwi_disable();
        if ((writePtr + eventSizeBits32) >= ti_uia_sysbios_LoggerStreamer_Module__state__V.end) {
            ti_uia_sysbios_LoggerStreamer_flush();
            writePtr = ti_uia_sysbios_LoggerStreamer_Module__state__V.write;
        }
        if ((writePtr == NULL ) || ((writePtr + eventSizeBits32) >= ti_uia_sysbios_LoggerStreamer_Module__state__V.end)) {

            ti_uia_sysbios_LoggerStreamer_Module__state__V.droppedEvents++;
            ti_sysbios_hal_Hwi_restore(key);
        }
        else {
            writePtr = ti_uia_sysbios_LoggerStreamer_fillInEventHdrSnapshot((Bits32 *)ti_uia_sysbios_LoggerStreamer_Module__state__V.write,
                    `bits32ToBits8("eventSizeBits32")`, ti_uia_sysbios_LoggerStreamer_eventRecSequence);
            *(writePtr++) = ((evt) & 0xffff0000) | mid;
            *(writePtr++) = fileName;
            *(writePtr++) = lineNum;
            *(writePtr++) = snapshotId;
            *(writePtr++) = (Bits32)pAdrs;
            *(writePtr++) = (((`bits32ToMau("dataSizeBits32")` & 0x0FFFF)<<16) | (lengthInMAUs & 0x0FFFF));
            *(writePtr++) = fmt;

            memcpy(writePtr, (Bits32 *)pAdrs, `bits32ToMau("dataSizeBits32")`);
            writePtr = (Ptr)((Bits32)writePtr + `bits32ToMau("dataSizeBits32")`);
            ti_uia_sysbios_LoggerStreamer_Module__state__V.write = writePtr;
            pAdrs = (Ptr)((Bits32)pAdrs + `bits32ToMau("dataSizeBits32")`);  // TODO: Check this.
            ti_sysbios_hal_Hwi_restore(key);
        }
    }
    ti_uia_sysbios_LoggerStreamer_Module__state__V.write = writePtr;
}
%if (LoggerStreamer.isBadPacketDetectionEnabled) {
static Char ti_uia_sysbios_LoggerStreamer_badPacketReason[128] = "";
static UInt32 ti_uia_sysbios_LoggerStreamer_numPacketsChecked = 0;
static UInt32 ti_uia_sysbios_LoggerStreamer_numBadPacketsFound = 0;
#ifndef UIAPacket_HdrType
#define UIAPacket_HdrType ti_uia_runtime_UIAPacket_HdrType
#endif
#ifndef EventHdr_HdrType
#define EventHdr_HdrType ti_uia_runtime_EventHdr_HdrType
#endif
%}

Char* ti_uia_sysbios_LoggerStreamer_validatePacket(UInt32* pPacketBuffer, UInt32 numBytesInPacket) {
%if (LoggerStreamer.isBadPacketDetectionEnabled) {
    Bool result = TRUE;
    UInt32 packetLength = 0;
    UInt32 eventLength = 0;
    UInt32 invalidLength = 0;
    UInt32 destAdrs = 0;
    UInt32 senderAdrs = 0;
    UInt32* pEvent = 0;
    UInt32 eventWord1 = 0;

    ti_uia_sysbios_LoggerStreamer_numPacketsChecked++;
    if (numBytesInPacket != ti_uia_sysbios_LoggerStreamer_bufSize__C) {
        result = FALSE;
        sprintf(ti_uia_sysbios_LoggerStreamer_badPacketReason, "LoggerStreamer_bufSize(%d) != numBytesInPacket(%d)",
                ti_uia_sysbios_LoggerStreamer_bufSize__C,numBytesInPacket);
    }
    if (result) {
        ti_uia_runtime_UIAPacket_Hdr* hdr = (ti_uia_runtime_UIAPacket_Hdr*)pPacketBuffer;
        /* 1. Check packet header */
        if (ti_uia_runtime_UIAPacket_getHdrType(hdr) == ti_uia_runtime_UIAPacket_HdrType_EventPkt) {
            destAdrs = ti_uia_runtime_UIAPacket_getDestAdrs(hdr);
            senderAdrs = ti_uia_runtime_UIAPacket_getSenderAdrs(hdr);

            packetLength = ti_uia_runtime_UIAPacket_getEventLength(hdr);
            if (packetLength < numBytesInPacket) {

                /* Verify that the rest of the packet is represented by an invalid packet of the correct length */
                hdr = (ti_uia_runtime_UIAPacket_Hdr*)((UInt32)pPacketBuffer + (UInt32)packetLength);
                if (ti_uia_runtime_UIAPacket_getHdrType(hdr) == ti_uia_runtime_UIAPacket_HdrType_InvalidData) {
                    invalidLength = ti_uia_runtime_UIAPacket_getEventLength(hdr);
                    if (invalidLength != numBytesInPacket - packetLength) {
                        result = FALSE;
                        sprintf(ti_uia_sysbios_LoggerStreamer_badPacketReason, "invalid length: numBytesInPacket=%d,packetLength=%d",
                                numBytesInPacket,packetLength);
                    }
                }
            } else if (packetLength > numBytesInPacket) {
                result = FALSE;
                sprintf(ti_uia_sysbios_LoggerStreamer_badPacketReason, "packetLength(%d) > numBytesInPacket(%d)",
                        packetLength,numBytesInPacket);
            }
            if (result) {
                /* packet header is ok - check the event headers */
                pEvent = (UInt32* )((UInt32)pPacketBuffer + sizeof(ti_uia_runtime_UIAPacket_Hdr));
                packetLength -= sizeof(ti_uia_runtime_UIAPacket_Hdr);
                while ((result == TRUE) && (packetLength > 0)) {
                    eventWord1 = *pEvent;
                    if (ti_uia_runtime_EventHdr_getHdrType(eventWord1) == ti_uia_runtime_EventHdr_HdrType_EventWithTimestamp) {
                        eventLength = ti_uia_runtime_EventHdr_getLength(eventWord1);
                        if (eventLength > (`write8EventSize` * `bytesInWord`)) {
                            result = FALSE;
                            sprintf(ti_uia_sysbios_LoggerStreamer_badPacketReason, "eventLength(%d) > WRITE8_SIZE_IN_BYTES(%d)", eventLength,
                                    `write8EventSize` * `bytesInWord`);
                        } else {
                            packetLength -= eventLength;
                        }
                    } else {
                        if (ti_uia_runtime_EventHdr_getHdrType(eventWord1) == ti_uia_runtime_EventHdr_HdrType_EventWithSnapshotIdAndTimestamp) {
                            eventLength = ti_uia_runtime_EventHdr_getLength(eventWord1);

                            if (eventLength > ti_uia_sysbios_LoggerStreamer_maxEventSize__C) {
                                result = FALSE;
                                sprintf(ti_uia_sysbios_LoggerStreamer_badPacketReason,
                                        "eventLength(%d) > LoggerStreamer_maxEventSize(%d).  eventWord1=0x%x",
                                        eventLength,ti_uia_sysbios_LoggerStreamer_maxEventSize__C,eventWord1);
                            } else {
                                packetLength -= eventLength;
                            }
                        } else {
                            result = FALSE;
                            sprintf(ti_uia_sysbios_LoggerStreamer_badPacketReason, "bad event hdr type(%d)",
                                    ti_uia_runtime_EventHdr_getHdrType(eventWord1));
                        }
                    }
                    if (result) {
                        pEvent = (UInt32*)((UInt32)pEvent + eventLength);
                    }
                }
            }
        }
    }
    if (!result) {
        printf("Bad packet detected: %s\n", ti_uia_sysbios_LoggerStreamer_badPacketReason);
        ti_uia_sysbios_LoggerStreamer_numBadPacketsFound++;
    }
    if ((ti_uia_sysbios_LoggerStreamer_numPacketsChecked & 0xfff) == 0) {
        printf("Core %d: Num packets checked = %d. Num bad = %d\n", senderAdrs,
                ti_uia_sysbios_LoggerStreamer_numPacketsChecked, ti_uia_sysbios_LoggerStreamer_numBadPacketsFound);
    }

    if (result) {
        return(NULL);
    }

    /* set a breakpoint here to catch failures */
    return (ti_uia_sysbios_LoggerStreamer_badPacketReason);
%}
%else {
    return (NULL);
%}
}
