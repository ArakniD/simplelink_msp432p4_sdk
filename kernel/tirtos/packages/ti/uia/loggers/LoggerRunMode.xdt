%%{
/*
 * Copyright (c) 2013-2018, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

    var LoggerRunMode = xdc.module("ti.uia.loggers.LoggerRunMode");

    var bytesInPtr = Program.build.target.stdTypes.t_Ptr.size;

    // Number of UArg's in UIAPacket header
    var hdrOffsetInWords = 16 / bytesInPtr;

    var isJTAG = (LoggerRunMode.transportType == LoggerRunMode.TransportType_JTAG) ? true : false;

    var eventType = "ti_uia_runtime_";
    var snapshotEventType = "ti_uia_runtime_";

    if (isJTAG) {
        /* JTAG run mode  */
        eventType = (LoggerRunMode.isTimestampEnabled) ?
                eventType + "EventHdr_HdrType_EventWithPrevLenWith64bTimestamp" :
                eventType + "EventHdr_HdrType_EventWithPrevLenWithNoTimestamp";

        snapshotEventType = (LoggerRunMode.isTimestampEnabled) ?
            snapshotEventType + "EventHdr_HdrType_SnapshotEventWithPrevLenAnd64bTimestamp" :
            snapshotEventType + "EventHdr_HdrType_SnapshotEventWithPrevLen";
    }
    else {
        /* Non-JTAG, eg, Ethernet transport */
        eventType = (LoggerRunMode.isTimestampEnabled) ?
                eventType + "EventHdr_HdrType_EventWithTimestamp" :
                eventType + "EventHdr_HdrType_Event";

        snapshotEventType = (LoggerRunMode.isTimestampEnabled) ?
                snapshotEventType + "EventHdr_HdrType_EventWithSnapshotIdAndTimestamp" :
                snapshotEventType + "EventHdr_HdrType_EventWithSnapshotId";
    }

    var bytesInEventWord;
    var eventHdrUArgs;

    if (bytesInPtr == 8) {
        /* 64-bit target */
        bytesInEventWord = 8;
        eventHdrUArgs = (LoggerRunMode.isTimestampEnabled) ? 2 : 1;
    }
    else {
        /* 32-bit target */
        bytesInEventWord = 4;
        eventHdrUArgs = (LoggerRunMode.isTimestampEnabled) ? 4 : 2;
    }

    // Size in words
    var write0EventSize = eventHdrUArgs;
    var write1EventSize = write0EventSize + 1;
    var write2EventSize = write0EventSize + 2;
    var write4EventSize = write0EventSize + 4;
    var write8EventSize = write0EventSize + 8;

    var write0EventSizeInBytes = write0EventSize * bytesInPtr;
    var write1EventSizeInBytes = write1EventSize * bytesInPtr;
    var write2EventSizeInBytes = write2EventSize * bytesInPtr;
    var write4EventSizeInBytes = write4EventSize * bytesInPtr;
    var write8EventSizeInBytes = write8EventSize * bytesInPtr;

    //  The event header for a snapshot event contains 4 32-bit words
    //  (timestamp enabled) or 2 32-bit words (timestamp not enabled), plus
    //  6 UArgs.
    //  plus a timestamp (if enabled):
    //     word0 - Mask containing event type and length (32-bit)
    //     word1 - Timestamp low                         (32-bit)
    //     word2 - Timestamp high                        (32-bit)
    //     word3 - Mask of Event ID and Module ID        (32-bit)
    //     word4 - Filename pointer                      (UArg)
    //     word5 - line number                           (UArg)
    //     word6 - snapshot Id                           (UArg)
    //     word7 - data address                          (UArg)
    //     word8 - data length                           (UArg)
    //     word9 - format pointer                        (UArg)
    //
    // For a 64-bit target, word0 - word3 are treated as 32-bit words.
    var headerSizeUArgs = eventHdrUArgs + 6;

    var LoggerRunMode_module = "ti_uia_loggers_LoggerRunMode_Module__state__V";
%%}
%/*
% *  ======== LoggerRunMode.xdt ========
% */

#include <xdc/std.h>

#include <xdc/runtime/Log.h>
#include <xdc/runtime/Types.h>
#include <xdc/runtime/Timestamp.h>
#include <xdc/runtime/Startup.h>
#include <xdc/runtime/System.h>
#include <xdc/runtime/Assert.h>
#include <xdc/runtime/Error.h>
#include <ti/sysbios/hal/Hwi.h>
#include <ti/uia/runtime/EventHdr.h>
#include <ti/uia/runtime/UIAPacket.h>
#include <ti/uia/runtime/QueueDescriptor.h>
#include <ti/uia/loggers/LoggerRunMode.h>

#include <string.h>  /* For memcpy */

#ifdef xdc_target__isaCompatible_64P
#include <c6x.h>
#endif


/*
 *  ======== ti_uia_loggers_LoggerRunMode_fillInTimestamp =========
 */
%if (LoggerRunMode.isTimestampEnabled) {
static inline UInt32 *ti_uia_loggers_LoggerRunMode_fillInTimestamp(UInt32 *writePtr)
{
#ifndef xdc_target__isaCompatible_64P
    xdc_runtime_Types_Timestamp64 tstamp;
    xdc_runtime_Timestamp_get64(&tstamp);
    *(writePtr++) = tstamp.lo;
    *(writePtr++) = tstamp.hi;
#else
    *(writePtr++) = TSCL;
    *(writePtr++) = TSCH;
#endif
    return (writePtr);
}
%}

/*
 *  ======== ti_uia_loggers_LoggerRunMode_filterOutEvent ========
 *  Returns TRUE if the event should be filtered out.
 */
Bool ti_uia_loggers_LoggerRunMode_filterOutEvent__I(xdc_runtime_Diags_Mask mask)
{
%if (LoggerRunMode.filterByLevel == true) {
    /*
     * If filtering for the event's diags category is currently
     * set to level1...
     */
    if (`LoggerRunMode_module`.level1 & mask) {
        /* If the event is lower than level1, filter it out. */
        return (xdc_runtime_Diags_compareLevels(xdc_runtime_Diags_getLevel(mask), xdc_runtime_Diags_LEVEL1));
    }
    /*
     * If filtering for the event's diags category is currently
     * set to level2...
     */
    else if (`LoggerRunMode_module`.level2 & mask) {
        /* If the event is lower than level2, filter it out. */
        return (xdc_runtime_Diags_compareLevels(xdc_runtime_Diags_getLevel(mask), xdc_runtime_Diags_LEVEL2));
    }
    /*
     * If filtering for the event's diags category is currently
     * set to level3...
     */
    else if (`LoggerRunMode_module`.level3 & mask) {
        /* If the event is lower than level3, filter it out. */
        return (xdc_runtime_Diags_compareLevels(xdc_runtime_Diags_getLevel(mask),
                xdc_runtime_Diags_LEVEL3));
    }
    /*
     * Otherwise, the filter level must be level4, which means that events of
     * all levels should be logged.
     */
    else {
        return (FALSE);
    }

%}
%else {
    return (FALSE);
%}
}

/*
 *  ======== LoggerRunMode_writeStart ========
 */
inline UArg *ti_uia_loggers_LoggerRunMode_writeStart__I(
        ti_uia_loggers_LoggerRunMode_Object *obj,
        xdc_runtime_Log_Event evt, xdc_runtime_Types_ModuleId mid, UInt16 numBytes)
{
    UInt32 *writePtr = (UInt32 *)obj->write;

% if (LoggerRunMode.supportLoggerDisable == true) {
    if (!obj->enabled) {
        return (NULL);
    }
%}

% if (LoggerRunMode.filterByLevel == true) {
    if (ti_uia_loggers_LoggerRunMode_filterOutEvent__I(xdc_runtime_Log_getMask(evt))) {
        return (NULL);
    }
%}

% if (isJTAG) {
    /*
     *  Use events with previous event length in header to allow events
     *  to be read from partially written packets
     */
    *writePtr++ = ti_uia_runtime_EventHdr_genEventWithPrevLenHdrWord1(
            numBytes,
            obj->numBytesInPrevEvent,
            obj->eventSequenceNum,
            `eventType`);
% }
% else {
    *writePtr++ = ti_uia_runtime_EventHdr_genEventHdrWord1(
            numBytes,
            obj->eventSequenceNum,
            `eventType`);
% }
    obj->numBytesInPrevEvent = numBytes;

% if (LoggerRunMode.isTimestampEnabled) {
    writePtr = ti_uia_loggers_LoggerRunMode_fillInTimestamp(writePtr);
%}
    *writePtr++ = xdc_runtime_Types_makeEvent(xdc_runtime_Log_getEventId(evt), mid);

    return ((UArg *)writePtr);
}

/*
 *  ======== LoggerRunMode_writeFinish ========
 */
static inline Void ti_uia_loggers_LoggerRunMode_writeFinish(
        ti_uia_loggers_LoggerRunMode_Object *obj, UArg *writePtr)
{
    if (writePtr >= obj->end) {
        /* Set UIA packet length and sequence number */
        ti_uia_runtime_UIAPacket_setEventLengthFast(
                (ti_uia_runtime_UIAPacket_Hdr *)obj->buffer,
                (writePtr - obj->buffer) * `bytesInPtr`);

        /* Send filled buffer to exchange function */
        obj->buffer = (UArg *)ti_uia_loggers_LoggerRunMode_exchange(obj,
                (Ptr)obj->buffer, (Ptr)writePtr);

        /* Update ptrs to new buffer */
        obj->write = obj->buffer + `hdrOffsetInWords`;
        obj->end = obj->buffer + (obj->packetSize / sizeof(UArg)) - `write8EventSize`;
        obj->pktSequenceNum++;
        ti_uia_runtime_UIAPacket_setSequenceCounts(
                (ti_uia_runtime_UIAPacket_Hdr *)obj->buffer,
                obj->pktSequenceNum,
                obj->eventSequenceNum);
    }
    else {
        obj->write = writePtr;
    }

    ((ti_uia_runtime_QueueDescriptor_Header *)obj->hdr)->partialPacketWritePtr =
        (xdc_Bits32 *)obj->write;
}

/*
 *  ======== ti_uia_loggers_LoggerRunMode_write0__E =========
 */
Void ti_uia_loggers_LoggerRunMode_write0__E(
                                    ti_uia_loggers_LoggerRunMode_Object *obj,
                                    xdc_runtime_Log_Event evt,
                                    xdc_runtime_Types_ModuleId mid)
{
    UInt key = ti_sysbios_hal_Hwi_disable();
    UArg *writePtr;

    writePtr = ti_uia_loggers_LoggerRunMode_writeStart__I(obj, evt, mid,
            `write0EventSizeInBytes`);

% if (LoggerRunMode.supportLoggerDisable || LoggerRunMode.filterByLevel) {
    if (writePtr == NULL) {
        ti_sysbios_hal_Hwi_restore(key);
        return;
    }
%}

    obj->eventSequenceNum++;
% if (isJTAG) {
    *writePtr = ti_uia_runtime_EventHdr_genEventWithPrevLenHdrWord1(
            0,
            `write0EventSizeInBytes`,
            obj->eventSequenceNum,
            ti_uia_runtime_EventHdr_HdrType_EventWithPrevLenWithNoTimestamp);
%}
    ti_uia_loggers_LoggerRunMode_writeFinish(obj, writePtr);

    ti_sysbios_hal_Hwi_restore(key);
}

/*
 *  ======== ti_uia_loggers_LoggerRunMode_write1__E =========
 */
Void ti_uia_loggers_LoggerRunMode_write1__E(
                                    ti_uia_loggers_LoggerRunMode_Object *obj,
                                    xdc_runtime_Log_Event evt,
                                    xdc_runtime_Types_ModuleId mid, IArg a1)
{
    UInt key = ti_sysbios_hal_Hwi_disable();
    UArg *writePtr;

    writePtr = ti_uia_loggers_LoggerRunMode_writeStart__I(obj, evt, mid,
            `write1EventSizeInBytes`);

% if (LoggerRunMode.supportLoggerDisable || LoggerRunMode.filterByLevel) {
    if (writePtr == NULL) {
        ti_sysbios_hal_Hwi_restore(key);
        return;
    }
%}

    *writePtr++ = (UArg)a1;

    obj->eventSequenceNum++;
% if (isJTAG) {
    *writePtr = ti_uia_runtime_EventHdr_genEventWithPrevLenHdrWord1(
            0,
            `write1EventSizeInBytes`,
            obj->eventSequenceNum,
            ti_uia_runtime_EventHdr_HdrType_EventWithPrevLenWithNoTimestamp);
%}
    ti_uia_loggers_LoggerRunMode_writeFinish(obj, writePtr);

    ti_sysbios_hal_Hwi_restore(key);
}

/*
 *  ======== ti_uia_loggers_LoggerRunMode_write2__E =========
 */
Void ti_uia_loggers_LoggerRunMode_write2__E(
                                    ti_uia_loggers_LoggerRunMode_Object *obj,
                                    xdc_runtime_Log_Event evt,
                                    xdc_runtime_Types_ModuleId mid,
                                    IArg a1, IArg a2)
{
    UInt key = ti_sysbios_hal_Hwi_disable();
    UArg *writePtr;

    writePtr = ti_uia_loggers_LoggerRunMode_writeStart__I(obj, evt, mid,
            `write2EventSizeInBytes`);

% if (LoggerRunMode.supportLoggerDisable || LoggerRunMode.filterByLevel) {
    if (writePtr == NULL) {
        ti_sysbios_hal_Hwi_restore(key);
        return;
    }
%}

    *writePtr++ = (UArg)a1;
    *writePtr++ = (UArg)a2;

    obj->eventSequenceNum++;
% if (isJTAG) {
    *writePtr = ti_uia_runtime_EventHdr_genEventWithPrevLenHdrWord1(
            0,
            `write2EventSizeInBytes`,
            obj->eventSequenceNum,
            ti_uia_runtime_EventHdr_HdrType_EventWithPrevLenWithNoTimestamp);
%}
    ti_uia_loggers_LoggerRunMode_writeFinish(obj, writePtr);

    ti_sysbios_hal_Hwi_restore(key);
}

/*
 *  ======== ti_uia_loggers_LoggerRunMode_write4__E =========
 */
Void ti_uia_loggers_LoggerRunMode_write4__E(
                                    ti_uia_loggers_LoggerRunMode_Object *obj,
                                    xdc_runtime_Log_Event evt,
                                    xdc_runtime_Types_ModuleId mid,
                                    IArg a1, IArg a2, IArg a3, IArg a4)
{
    UInt key = ti_sysbios_hal_Hwi_disable();
    UArg *writePtr;

    writePtr = ti_uia_loggers_LoggerRunMode_writeStart__I(obj, evt, mid, `write4EventSizeInBytes`);

% if (LoggerRunMode.supportLoggerDisable || LoggerRunMode.filterByLevel) {
    if (writePtr == NULL) {
        ti_sysbios_hal_Hwi_restore(key);
        return;
    }
%}

    *writePtr++ = (UArg)a1;
    *writePtr++ = (UArg)a2;
    *writePtr++ = (UArg)a3;
    *writePtr++ = (UArg)a4;

    obj->eventSequenceNum++;
% if (isJTAG) {
    *writePtr = ti_uia_runtime_EventHdr_genEventWithPrevLenHdrWord1(
            0,
            `write4EventSizeInBytes`,
            obj->eventSequenceNum,
            ti_uia_runtime_EventHdr_HdrType_EventWithPrevLenWithNoTimestamp);
%}
    ti_uia_loggers_LoggerRunMode_writeFinish(obj, writePtr);

    ti_sysbios_hal_Hwi_restore(key);
}

/*
 *  ======== ti_uia_loggers_LoggerRunMode_write8__E =========
 */
Void ti_uia_loggers_LoggerRunMode_write8__E(
        ti_uia_loggers_LoggerRunMode_Object *obj,
        xdc_runtime_Log_Event evt,
        xdc_runtime_Types_ModuleId mid,
        IArg a1, IArg a2, IArg a3, IArg a4,
        IArg a5, IArg a6, IArg a7, IArg a8)
{
    UInt key = ti_sysbios_hal_Hwi_disable();
    UArg *writePtr;

    writePtr = ti_uia_loggers_LoggerRunMode_writeStart__I(obj, evt, mid, `write8EventSizeInBytes`);

% if (LoggerRunMode.supportLoggerDisable || LoggerRunMode.filterByLevel) {
    if (writePtr == NULL) {
        ti_sysbios_hal_Hwi_restore(key);
        return;
    }
%}

    *writePtr++ = (UArg)a1;
    *writePtr++ = (UArg)a2;
    *writePtr++ = (UArg)a3;
    *writePtr++ = (UArg)a4;
    *writePtr++ = (UArg)a5;
    *writePtr++ = (UArg)a6;
    *writePtr++ = (UArg)a7;
    *writePtr++ = (UArg)a8;

    obj->eventSequenceNum++;
% if (isJTAG) {
    *writePtr = ti_uia_runtime_EventHdr_genEventWithPrevLenHdrWord1(
            0,
            `write8EventSizeInBytes`,
            obj->eventSequenceNum,
            ti_uia_runtime_EventHdr_HdrType_EventWithPrevLenWithNoTimestamp);
%}
    ti_uia_loggers_LoggerRunMode_writeFinish(obj, writePtr);

    ti_sysbios_hal_Hwi_restore(key);
}

/*
 *  ======== ti_uia_loggers_LoggerRunMode_setFilterLevel__E ========
 *  Sets the filter level for the given diags level.
 *
 *  LoggerRunMode maintains a separate filter level for every diags category.
 *  This is accomplished by maintaining three masks, one for each of the levels
 *  1 - 3, wich store the diags categories which are currently at that level.
 *  There is no mask for level4; if the diags category is not found in levels
 *  1-3, it is  assumed that the filtering level is level4.
 *
 *  This API is an instance function per the IFilterLogger interface, but
 *  LoggerRunMode only maintains module-wide filter levels.
 */
Void ti_uia_loggers_LoggerRunMode_setFilterLevel__E(ti_uia_loggers_LoggerRunMode_Object *obj,
                xdc_runtime_Diags_Mask mask,
                xdc_runtime_Diags_EventLevel filterLevel)
{
%if (LoggerRunMode.filterByLevel == true) {

    /*
     * First, remove the bits in 'mask' from all of the current 'level' masks.
     * Use level = (~(mask & level) & level) to remove 'mask' bits from all
     * 'level's.
     *    1. AND mask and level to get set of bits that appear in both
     *    2. Take the inverse of this set and AND it with 'level' to disable
     *       any bits which appear in 'mask'.
     */
    `LoggerRunMode_module`.level1 = ~(`LoggerRunMode_module`.level1 & mask) &
            `LoggerRunMode_module`.level1;
    `LoggerRunMode_module`.level2 = ~(`LoggerRunMode_module`.level2 & mask) &
            `LoggerRunMode_module`.level2;
    `LoggerRunMode_module`.level3 = ~(`LoggerRunMode_module`.level3 & mask) &
            `LoggerRunMode_module`.level3;

    /* Enable the bits specified in 'mask' in the appropriate level. */
    switch (filterLevel) {
        case xdc_runtime_Diags_LEVEL1:
            `LoggerRunMode_module`.level1 |= mask;
            break;
        case xdc_runtime_Diags_LEVEL2:
            `LoggerRunMode_module`.level2 |= mask;
            break;
        case xdc_runtime_Diags_LEVEL3:
            `LoggerRunMode_module`.level3 |= mask;
            break;
        case xdc_runtime_Diags_LEVEL4:
                break;
        default: {
            /* Raise an error that a bad filter level was received. */
            xdc_runtime_Error_Block eb;
            xdc_runtime_Error_init(&eb);
            xdc_runtime_Error_raise(&eb, ti_uia_loggers_LoggerRunMode_E_badLevel, filterLevel, 0);
            break;
        }
    }
%}
}

/*
 *  ======== ti_uia_loggers_LoggerRunMode_getFilterLevel__E ========
 *  Returns the mask of diags categories which are set to the specified filter
 *  level.
 *
 *  This API is an instance function per the IFilterLogger interface, but
 *  LoggerRunMode only maintains module-wide filter levels.
 */
xdc_runtime_Diags_Mask ti_uia_loggers_LoggerRunMode_getFilterLevel__E (ti_uia_loggers_LoggerRunMode_Object *obj,
                xdc_runtime_Diags_EventLevel level)
{
%if (LoggerRunMode.filterByLevel == true) {

    /* Return the mask of diags categories associated with 'level'. */
    switch (level) {
        case xdc_runtime_Diags_LEVEL1:
            return (`LoggerRunMode_module`.level1);
        case xdc_runtime_Diags_LEVEL2:
            return (`LoggerRunMode_module`.level2);
        case xdc_runtime_Diags_LEVEL3:
            return (`LoggerRunMode_module`.level3);
        case xdc_runtime_Diags_LEVEL4:
            /*
             * Return the inverse of all the bits set in levels 1 - 3,
             * and only return those bits which belong to the set of
             * logging categories (excludes asserts and the two level bits).
             */
            return (~(`LoggerRunMode_module`.level1 |
                    `LoggerRunMode_module`.level2 |
                    `LoggerRunMode_module`.level3) &
                    xdc_runtime_Diags_ALL_LOGGING);
        default: {
            /* Raise an error to report the bad filter level. */
            xdc_runtime_Error_Block eb;
            xdc_runtime_Error_init(&eb);
            xdc_runtime_Error_raise(&eb, ti_uia_loggers_LoggerRunMode_E_badLevel, level, 0);
            return (0);
        }
    }
%}
%else {
    return (0);
%}
}

/*  ======== writeMemoryRange =========
 *  logs a range of consecutive memory values.
 *
 *  Breaks up large blocks into a series of smaller blocks in order to limit the
 *  maximum amount of time that interrupts are disabled.
 */
Void ti_uia_loggers_LoggerRunMode_writeMemoryRange__E(ti_uia_loggers_LoggerRunMode_Object *obj,
                xdc_runtime_Log_Event evt,
                xdc_runtime_Types_ModuleId mid, UInt32 snapshotId,
                IArg fileName, IArg lineNum, IArg fmt,
                IArg startAdrs, UInt32 lengthInMAUs)
{
    Int i;
    SizeT eventSizeUArgs;
    SizeT dataSizeUArgs;
    Ptr pAdrs = iargToPtr(startAdrs);
    SizeT headerSizeUArgs;
    SizeT lenAdjustedUArgs;
    Int numRecords;
    UInt key;
    UArg *writePtr = obj->write;
    UInt32 *evtHdr = (UInt32 *)obj->write;

% if (LoggerRunMode.supportLoggerDisable == true) {
    if (!obj->enabled) {
        return;
    }
%}
% if (LoggerRunMode.filterByLevel == true) {
    if (ti_uia_loggers_LoggerRunMode_filterOutEvent__I(xdc_runtime_Log_getMask(evt))) {
        return;
    }
%}
    if (obj->maxEventSizeUArgs == 0) {
        return;
    }

    /* Size of header in UArgs */
    headerSizeUArgs = `headerSizeUArgs`;

    /* Round up to word (UArg) boundary */
    lenAdjustedUArgs = (lengthInMAUs + sizeof(UArg) - 1) / sizeof(UArg);

    numRecords = (lenAdjustedUArgs / (obj->maxEventSizeUArgs - headerSizeUArgs)) + 1;

    for (i = 0; i < numRecords; i++) {
        if ((headerSizeUArgs + lenAdjustedUArgs) > obj->maxEventSizeUArgs) {
            dataSizeUArgs = obj->maxEventSizeUArgs - headerSizeUArgs;
            lenAdjustedUArgs -= dataSizeUArgs;
        }
        else {
            dataSizeUArgs = lenAdjustedUArgs;
        }
        eventSizeUArgs = dataSizeUArgs + headerSizeUArgs;

        key = ti_sysbios_hal_Hwi_disable();

        if ((writePtr + eventSizeUArgs) >= obj->end) {
            ti_uia_loggers_LoggerRunMode_flush(obj);
            writePtr = obj->write;
            xdc_runtime_Assert_isTrue(writePtr != NULL, NULL);
        }

        /* Fill In Snapshot Event Hdr */
% if (isJTAG) {
        *(evtHdr++) = ti_uia_runtime_EventHdr_genEventWithPrevLenHdrWord1(
                eventSizeUArgs * `bytesInPtr`,
                obj->numBytesInPrevEvent,
                obj->eventSequenceNum,
                `snapshotEventType`);
% } else {
        *(evtHdr++) = ti_uia_runtime_EventHdr_genEventHdrWord1(
                eventSizeUArgs * `bytesInPtr`,
                obj->eventSequenceNum,
                `snapshotEventType`);
%}

% if (LoggerRunMode.isTimestampEnabled == true) {
        evtHdr = ti_uia_loggers_LoggerRunMode_fillInTimestamp(evtHdr);
% }


        *(evtHdr++) = ((evt) & 0xffff0000) | mid;
        writePtr = (UArg *)evtHdr;
        *(writePtr++) = fileName;
        *(writePtr++) = lineNum;
        *(writePtr++) = snapshotId;
        *(writePtr++) = (UArg)pAdrs;
        *(writePtr++) = ((((dataSizeUArgs * sizeof(UArg)) & 0x0FFFF)<<16) | (lengthInMAUs & 0x0FFFF));
        *(writePtr++) = fmt;

        memcpy((Ptr)writePtr, pAdrs, dataSizeUArgs * sizeof(UArg));
        writePtr = writePtr + dataSizeUArgs;

        /*
         *  Update serial number even if the buffer is full or disabled.
         *  We do this because a reader (decoder) of the buffer needs to
         *  know if events have been missed, and the buffer might become
         *  un-FULL at some later time.
         */
        obj->eventSequenceNum++;

% if (isJTAG) {
        obj->numBytesInPrevEvent = eventSizeUArgs * `bytesInPtr`;
        *writePtr = ti_uia_runtime_EventHdr_genEventWithPrevLenHdrWord1(
                0,
                obj->numBytesInPrevEvent,
                obj->eventSequenceNum,
                ti_uia_runtime_EventHdr_HdrType_EventWithPrevLenWithNoTimestamp);
% }
        obj->write = writePtr;

        ((ti_uia_runtime_QueueDescriptor_Header *)obj->hdr)->partialPacketWritePtr =
                (xdc_Bits32 *)writePtr;
        pAdrs = (Ptr)((UArg *)pAdrs + dataSizeUArgs);
        ti_sysbios_hal_Hwi_restore(key);
    }
    obj->write = writePtr;
}
