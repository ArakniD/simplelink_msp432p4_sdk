%%{
/*
 * Copyright (c) 2017 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
%%}
%%{
/*
 *  ======== ReentSupport.xdt ========
 */
%%}
#include <ti/sysbios/rts/ti/package/internal/ReentSupport.xdc.h>

/*
 *  ======== ReentSupport_getTlsAddr ========
 */
Int *ti_sysbios_rts_ti_ReentSupport_getTlsAddr__I()
{
    ti_sysbios_knl_Task_Handle task;
    Int *buf;

    task = ti_sysbios_knl_Task_self();
% if (this.$private.ROM) {
    /*  All ROM builds of SYS/BIOS have SMP mode disabled. This leaves
     *  two unused words in the task object: curCoreId and affinity.
     *  Use one of these (curCoreId) as the memory storage for the TLS
     *  errno symbol. NB: Internal access to the task object is enabled
     *  in template code.
     */
    buf = (Int *)(&(task->curCoreId));
% } else {
    /*  Use the location of the hook pointer as the memory storage
     *  for the TLS errno symbol. Internal access was enabled above
     *  to allow visibility into the task object structure.
     */
    buf = (Int *)(&(task->hookEnv[ReentSupport_module->taskHId]));
% }

    return (buf);
}
