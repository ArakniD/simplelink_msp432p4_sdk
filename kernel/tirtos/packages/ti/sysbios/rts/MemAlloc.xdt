%%{
/*
 * Copyright (c) 2015-2018, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/
%%}
%/*
% *  ======== MemAlloc.xdt ========
% */

%var BIOS = xdc.module('ti.sysbios.BIOS');
%var MemAlloc = xdc.module('ti.sysbios.rts.MemAlloc');
%var HeapStd = xdc.module('xdc.runtime.HeapStd');
%var nogenFunctions = (MemAlloc.generateFunctions == false) || 
%                     ((BIOS.heapSize != 0) && 
%                      (HeapStd.$used));
%var genStubFunctions = (BIOS.heapSize == 0);
%if (nogenFunctions == false) {
%/*
% * This code is only generated if HeapStd is not used.  If HeapStd is used
% * we'll get recursion malloc->HeapStd->malloc->HeapStd->overflow.
% *
% * This code should be in a separate .c file, but there are some link
% * order issues we need to work out.  printf() internally calls malloc() so
% * this can cause the rts malloc() to be linked instead of the BIOS one.
% * In BIOS 5.x, we used --priority to force the reference to malloc(), etc.
% * to come from BIOS library instead of the rts library.  This will work for
% * TI compiler, but not sure what to do for GCC and IAR.
% */

#if defined(__ti__)

#pragma FUNC_EXT_CALLED(malloc);
#pragma FUNC_EXT_CALLED(memalign);
#pragma FUNC_EXT_CALLED(free);
#pragma FUNC_EXT_CALLED(calloc);
#pragma FUNC_EXT_CALLED(realloc);
#pragma FUNC_EXT_CALLED(aligned_alloc);

#define ATTRIBUTE

#elif defined(__IAR_SYSTEMS_ICC__)

#define ATTRIBUTE

#else

#define ATTRIBUTE __attribute__ ((used))

#endif


#include <xdc/std.h>

#include <xdc/runtime/Memory.h>
#include <xdc/runtime/Error.h>

#include <string.h>

#if defined(__GNUC__) && !defined(__ti__)

#include <reent.h>

#endif

%if (BIOS.mpeEnabled) {
#include <ti/sysbios/hal/SysCall.h>
%}

/*
 * Header is a union to make sure that the size is a power of 2.
 */
typedef union Header {
    struct {
        Ptr   actualBuf;
        SizeT size;
    } header;
    UArg pad[2];	/* 4 words on 28L, 8 bytes on most others */
} Header;

%if (genStubFunctions == false) {

%    if (BIOS.mpeEnabled) {

Void *ti_sysbios_rts_MemAlloc_malloc(SizeT size);
Void *ti_sysbios_rts_MemAlloc_memalign(SizeT alignment, SizeT size);
Void *ti_sysbios_rts_MemAlloc_calloc(SizeT nmemb, SizeT size);
Void ti_sysbios_rts_MemAlloc_free(Void *ptr);
Void *ti_sysbios_rts_MemAlloc_realloc(Void *ptr, SizeT size);
Void *ti_sysbios_rts_MemAlloc_aligned_alloc(SizeT alignment, SizeT size);

/*
 *  ======== malloc ========
 */
Void ATTRIBUTE *malloc(SizeT size)
{
    Void *ret;

    ti_sysbios_hal_SysCall_enterPrivMode();
    ret = ti_sysbios_rts_MemAlloc_malloc(size);
    ti_sysbios_hal_SysCall_restorePrivMode();

    return (ret);
}

/*
 *  ======== memalign ========
 */
Void ATTRIBUTE *memalign(SizeT alignment, SizeT size)
{
    Void *ret;

    ti_sysbios_hal_SysCall_enterPrivMode();
    ret = ti_sysbios_rts_MemAlloc_memalign(alignment, size);
    ti_sysbios_hal_SysCall_restorePrivMode();

    return (ret);
}

/*
 *  ======== calloc ========
 */
Void ATTRIBUTE *calloc(SizeT nmemb, SizeT size)
{
    Void *ret;

    ti_sysbios_hal_SysCall_enterPrivMode();
    ret = ti_sysbios_rts_MemAlloc_calloc(nmemb, size);
    ti_sysbios_hal_SysCall_restorePrivMode();

    return (ret);
}

/*
 *  ======== free ========
 */
Void ATTRIBUTE free(Void *ptr)
{
    ti_sysbios_hal_SysCall_enterPrivMode();
    ti_sysbios_rts_MemAlloc_free(ptr);
    ti_sysbios_hal_SysCall_restorePrivMode();
}

/*
 *  ======== realloc ========
 */
Void ATTRIBUTE *realloc(Void *ptr, SizeT size)
{
    Void *ret;

    ti_sysbios_hal_SysCall_enterPrivMode();
    ret = ti_sysbios_rts_MemAlloc_realloc(ptr, size);
    ti_sysbios_hal_SysCall_restorePrivMode();

    return (ret);
}

/*
 *  ======== aligned_alloc ========
 */
Void ATTRIBUTE *aligned_alloc(SizeT alignment, SizeT size)
{
    Void *ret;

    ti_sysbios_hal_SysCall_enterPrivMode();
    ret = ti_sysbios_rts_MemAlloc_memalign(alignment, size);
    ti_sysbios_hal_SysCall_restorePrivMode();

    return (ret);
}

#define memalign        ti_sysbios_rts_MemAlloc_memalign
#define malloc          ti_sysbios_rts_MemAlloc_malloc
#define calloc          ti_sysbios_rts_MemAlloc_calloc
#define free            ti_sysbios_rts_MemAlloc_free
#define realloc        	ti_sysbios_rts_MemAlloc_realloc
#define aligned_alloc   ti_sysbios_rts_MemAlloc_aligned_alloc

%    }

/*
 *  ======== ti_sysbios_rts_MemAlloc_alloc ========
 */
static Void *ti_sysbios_rts_MemAlloc_alloc(SizeT size)
{
    Header *packet;
    xdc_runtime_Error_Block eb;

    if (size == 0) {
        return (NULL);
    }

    xdc_runtime_Error_init(&eb);

    packet = (Header *)xdc_runtime_Memory_alloc(NULL,
        (SizeT)(size + sizeof(Header)), 0, &eb);

    if (packet == NULL) {
        return (NULL);
    }

    packet->header.actualBuf = (Ptr)packet;
    packet->header.size = size + sizeof(Header);

    return (packet + 1);
}

/*
 *  ======== malloc ========
 */
Void ATTRIBUTE *malloc(SizeT size)
{
    return (ti_sysbios_rts_MemAlloc_alloc(size));
}

/*
 *  ======== memalign ========
 *  mirrors the memalign() function from the TI run-time library
 */
Void ATTRIBUTE *memalign(SizeT alignment, SizeT size)
{
    Header                      *packet;
    Void                        *tmp;
    xdc_runtime_Error_Block     eb;

    /* return NULL if size is 0, or alignment is not a power-of-2 */
    if (size == 0 || (alignment & (alignment - 1))) {
        return (NULL);
    }

    if (alignment < sizeof(Header)) {
        alignment = sizeof(Header);
    }

    xdc_runtime_Error_init(&eb);

    /*
     * Allocate 'align + size' so that we have room for the 'packet'
     * and can return an aligned buffer.
     */
    tmp = xdc_runtime_Memory_alloc(NULL, alignment + size, alignment, &eb);

    if (tmp == NULL) {
        return (NULL);
    }

    packet = (Header *)((char *)tmp + alignment - sizeof(Header));

    packet->header.actualBuf = tmp;
    packet->header.size = size + sizeof(Header);

    return (packet + 1);
}

/*
 *  ======== calloc ========
 */
Void ATTRIBUTE *calloc(SizeT nmemb, SizeT size)
{
    SizeT       nbytes;
    Ptr         retval;

    nbytes = nmemb * size;

    /* return NULL if there's an overflow */
    if (nmemb && size != (nbytes / nmemb)) {
        return (NULL);
    }

    retval = ti_sysbios_rts_MemAlloc_alloc(nbytes);
    if (retval != NULL) {
        (Void)memset(retval, (Int)'\0', nbytes);
    }

    return (retval);
}

/*
 *  ======== free ========
 */
Void ATTRIBUTE free(Void *ptr)
{
    Header      *packet;

    if (ptr != NULL) {
        packet = ((Header *)ptr) - 1;

        xdc_runtime_Memory_free(NULL, (Ptr)packet->header.actualBuf,
            (packet->header.size +
            ((char*)packet - (char*)packet->header.actualBuf)));
    }
}

/*
 *  ======== realloc ========
 */
Void ATTRIBUTE *realloc(Void *ptr, SizeT size)
{
    Ptr         retval;
    Header      *packet;
    SizeT       oldSize;

    if (ptr == NULL) {
        retval = malloc(size);
    }
    else if (size == 0) {
        free(ptr);
        retval = NULL;
    }
    else {
        packet = (Header *)ptr - 1;
        retval = malloc(size);
        if (retval != NULL) {
            oldSize = packet->header.size - sizeof(Header);
            (Void)memcpy(retval, ptr, (size < oldSize) ? size : oldSize);
            free(ptr);
        }
    }

    return (retval);
}

/*
 *  ======== aligned_alloc ========
 */
Void ATTRIBUTE *aligned_alloc(SizeT alignment, SizeT size)
{
    Void *retval;

    retval = memalign(alignment, size);

    return (retval);
}

%}
%else {  /* BIOS.heapSize = 0, NULL implementations since there is no heap */
/*
 *  ======== malloc ========
 */
Void ATTRIBUTE *malloc(SizeT size)
{
    return (NULL);
}

/*
 *  ======== memalign ========
 *  mirrors the memalign() function from the TI run-time library
 */
Void ATTRIBUTE *memalign(SizeT alignment, SizeT size)
{
    return (NULL);
}

/*
 *  ======== calloc ========
 */
Void ATTRIBUTE *calloc(SizeT nmemb, SizeT size)
{
    return (NULL);
}

/*
 *  ======== free ========
 */
Void ATTRIBUTE free(Void *ptr)
{
}

/*
 *  ======== realloc ========
 */
Void ATTRIBUTE *realloc(Void *ptr, SizeT size)
{
    return (NULL);
}

/*
 *  ======== aligned_alloc ========
 */
Void ATTRIBUTE *aligned_alloc(SizeT alignment, SizeT size)
{
    return (NULL);
}
%}
#if defined(__GNUC__) && !defined(__ti__)

/*
 *  ======== _malloc_r ========
 */
Void ATTRIBUTE *_malloc_r(struct _reent *rptr, SizeT size)
{
    return malloc(size);
}

/*
 *  ======== _calloc_r ========
 */
Void ATTRIBUTE *_calloc_r(struct _reent *rptr, SizeT nmemb, SizeT size)
{
    return calloc(nmemb, size);
}

/*
 *  ======== _free_r ========
 */
Void ATTRIBUTE _free_r(struct _reent *rptr, Void *ptr)
{
    free(ptr);
}

/*
 *  ======== _realloc_r ========
 */
Void ATTRIBUTE *_realloc_r(struct _reent *rptr, Void *ptr, SizeT size)
{
    return realloc(ptr, size);
}

#endif

%} // if (xdc.om['xdc.runtime'].HeapStd.$used == 0)
