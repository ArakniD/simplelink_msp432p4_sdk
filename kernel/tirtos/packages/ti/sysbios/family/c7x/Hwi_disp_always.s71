;
;  Copyright (c) 2017-2018, Texas Instruments Incorporated
;  All rights reserved.
;
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions
;  are met:
;
;  *  Redistributions of source code must retain the above copyright
;     notice, this list of conditions and the following disclaimer.
;
;  *  Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
;
;  *  Neither the name of Texas Instruments Incorporated nor the names of
;     its contributors may be used to endorse or promote products derived
;     from this software without specific prior written permission.
;
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
;  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
;  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
;  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
;  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
;  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;
;
;  ======== Hwi_disp_always.s71 ========
;
;

        .cdecls C,NOLIST,"package/internal/Hwi.xdc.h"

	.global Hwi_testAsm
Hwi_testAsm:
	.asmfunc

	mvc.s1 rp, a8
||	std.d1 a8, *d15(8)
	addd.d1 d15, -8, d15

        addkpc.d1 $PCR_OFFSET(calla_fxn), a3
        calla.s1     a3

	mvc.s1 a8, rp
	ldd.d1 *d15(0x10), a8
	addd.d1 d15, 0x8, d15
||	ret.b1

calla_fxn:
	ret.b1

	.endasmfunc

;
; The following are double word offsets (offset must be < 32 for A-reg access)
;
Hwi_SFA0      .set    1
Hwi_SFA1      .set    2
Hwi_SFA2      .set    3
Hwi_SFA3      .set    4
Hwi_SFA4      .set    5
Hwi_SFA5      .set    6
Hwi_SFA6      .set    7
Hwi_SFA7      .set    8
Hwi_SFAL0     .set    9
Hwi_SFAL1     .set    10
Hwi_SFAL2     .set    11
Hwi_SFAL3     .set    12
Hwi_SFAL4     .set    13
Hwi_SFAL5     .set    14
Hwi_SFAL6     .set    15
Hwi_SFAL7     .set    16
Hwi_SFAM0     .set    17
Hwi_SFAM1     .set    18
Hwi_SFAM2     .set    19
Hwi_SFAM3     .set    20
Hwi_SFAM4     .set    21
Hwi_SFAM5     .set    22
Hwi_SFAM6     .set    23
Hwi_SFAM7     .set    24
Hwi_SFD0      .set    25
Hwi_SFD1      .set    26
Hwi_SFD2      .set    27
Hwi_SFD3      .set    28
Hwi_SFD4      .set    29
Hwi_SFD5      .set    30
Hwi_SFD6      .set    31
Hwi_SFD7      .set    32
Hwi_SFD8      .set    33
Hwi_SFD9      .set    34
Hwi_SFD10     .set    35
Hwi_SFD11     .set    36
Hwi_SFD12     .set    37
Hwi_SFD13     .set    38
Hwi_SFD14     .set    39

;;Hwi_SFERP      .set    40
Hwi_SFRP      .set    40
Hwi_SFEER     .set    41
Hwi_SFTSR     .set    42
Hwi_SFETSR    .set    43
Hwi_SFBPCR    .set    44
Hwi_SFFPCR    .set    45
Hwi_SFFSR     .set    46


; 512 bit (64 byte) offsets
Hwi_SFVB0     .set    47
Hwi_SFVB1     .set    Hwi_SFVB0 + (8*1)
Hwi_SFVB2     .set    Hwi_SFVB0 + (8*2)
Hwi_SFVB3     .set    Hwi_SFVB0 + (8*3)
Hwi_SFVB4     .set    Hwi_SFVB0 + (8*4)
Hwi_SFVB5     .set    Hwi_SFVB0 + (8*5)
Hwi_SFVB6     .set    Hwi_SFVB0 + (8*6)
Hwi_SFVB7     .set    Hwi_SFVB0 + (8*7)
Hwi_SFVB8     .set    Hwi_SFVB0 + (8*8)
Hwi_SFVB9     .set    Hwi_SFVB0 + (8*9)
Hwi_SFVB10    .set    Hwi_SFVB0 + (8*10)
Hwi_SFVB11    .set    Hwi_SFVB0 + (8*11)
Hwi_SFVB12    .set    Hwi_SFVB0 + (8*12)
Hwi_SFVB13    .set    Hwi_SFVB0 + (8*13)
Hwi_SFVB14    .set    Hwi_SFVB0 + (8*14)
Hwi_SFVB15    .set    Hwi_SFVB0 + (8*15)
Hwi_SFVBL0    .set    Hwi_SFVB0 + (8*16)
Hwi_SFVBL1    .set    Hwi_SFVB0 + (8*17)
Hwi_SFVBL2    .set    Hwi_SFVB0 + (8*18)
Hwi_SFVBL3    .set    Hwi_SFVB0 + (8*19)
Hwi_SFVBL4    .set    Hwi_SFVB0 + (8*20)
Hwi_SFVBL5    .set    Hwi_SFVB0 + (8*21)
Hwi_SFVBL6    .set    Hwi_SFVB0 + (8*22)
Hwi_SFVBL7    .set    Hwi_SFVB0 + (8*23)
Hwi_SFVBM0    .set    Hwi_SFVB0 + (8*24)
Hwi_SFVBM1    .set    Hwi_SFVB0 + (8*25)
Hwi_SFVBM2    .set    Hwi_SFVB0 + (8*26)
Hwi_SFVBM3    .set    Hwi_SFVB0 + (8*27)
Hwi_SFVBM4    .set    Hwi_SFVB0 + (8*28)
Hwi_SFVBM5    .set    Hwi_SFVB0 + (8*29)
Hwi_SFVBM6    .set    Hwi_SFVB0 + (8*30)
Hwi_SFVBM7    .set    Hwi_SFVB0 + (8*31)

Hwi_STACKFRAMESIZE      .set    Hwi_SFVBM7 + 8      ; DW (8 byte) size


SP              .set    d15

    .if $isdefed("__TI_ELFABI__")
    .if __TI_ELFABI__
        .asg ti_sysbios_family_c7x_Hwi_dispatchC__I, _ti_sysbios_family_c7x_Hwi_dispatchC__I
        .asg ti_sysbios_family_c7x_Hwi_dispatchAlways, _ti_sysbios_family_c7x_Hwi_dispatchAlways
        .asg ti_sysbios_family_c7x_Hwi_Module__state__V, _ti_sysbios_family_c7x_Hwi_Module__state__V
    .endif
    .endif

        .global ti_sysbios_family_c7x_Hwi_dispatchC__I
        .global ti_sysbios_family_c7x_Hwi_dispatchAlways

ti_sysbios_family_c7x_Hwi_Module__state__V .tag ti_sysbios_family_c7x_Hwi_Module_State

        .sect .vecs

        .global soft_reset

soft_reset:
	b.b1      $PCR_OFFSET(soft_reset)

        .align 0x200
int_exc:
	b.b1      $PCR_OFFSET(int_exc)

        .align 0x200
page_fault:
	b.b1      $PCR_OFFSET(page_fault)

        .align 0x200
nme:
	b.b1      $PCR_OFFSET(nme)

        .align 0x200
evt:
        b.b1      $PCR_OFFSET(ti_sysbios_family_c7x_Hwi_dispatchAlways)

        .sect ".text:ti_sysbios_family_c7x_Hwi_dispatchAlways"

        .clink

ti_sysbios_family_c7x_Hwi_dispatchAlways:
        .asmfunc

	.if 0

        std.d1    a0, *ECSP[0x200]
||      std.d2x   a1, *ECSP[0x201]
        ldd.d1    *ECSP[0], a0
||      ldd.d2    *ECSP[1], a1
        rete.s1   a0, a1
||      ldd.d1    *ECSP[0x200], a0
||      ldd.d2    *ECSP[0x201], a1

	.else

        std.d1    a0, *ECSP[0x200]
||      std.d2x   a1, *ECSP[0x201]

        addd.d1   SP, -Hwi_STACKFRAMESIZE*8, SP     ; alloc stack frame

;;        std.d1    a0, *SP[Hwi_SFA0]
;;||      std.d2x   a1, *SP[Hwi_SFA1]
        std.d1    a2, *SP[Hwi_SFA2]
||      std.d2x   a3, *SP[Hwi_SFA3]
        std.d1    a4, *SP[Hwi_SFA4]
||      std.d2x   a5, *SP[Hwi_SFA5]
        std.d1    a6, *SP[Hwi_SFA6]
||      std.d2x   a7, *SP[Hwi_SFA7]
||      mv.l1     al0, a0
||      mv.s1     al1, a1
        std.d1    a0, *SP[Hwi_SFAL0]
||      std.d2x   a1, *SP[Hwi_SFAL1]
||      mv.l1     al2, a0
||      mv.s1     al3, a1
        std.d1    a0, *SP[Hwi_SFAL2]
||      std.d2x   a1, *SP[Hwi_SFAL3]
||      mv.l1     al4, a0
||      mv.s1     al5, a1
        std.d1    a0, *SP[Hwi_SFAL4]
||      std.d2x   a1, *SP[Hwi_SFAL5]
||      mv.l1     al6, a0
||      mv.s1     al7, a1
        std.d1    a0, *SP[Hwi_SFAL6]
||      std.d2x   a1, *SP[Hwi_SFAL7]
||      mv.m1     am0, a0
        std.d1    a0, *SP[Hwi_SFAM0]
||      mv.m1     am1, a0
        std.d1    a0, *SP[Hwi_SFAM1]
||      mv.m1     am2, a0
        std.d1    a0, *SP[Hwi_SFAM2]
||      mv.m1     am3, a0
        std.d1    a0, *SP[Hwi_SFAM3]
||      mv.m1     am4, a0
        std.d1    a0, *SP[Hwi_SFAM4]
||      mv.m1     am5, a0
        std.d1    a0, *SP[Hwi_SFAM5]
||      mv.m1     am6, a0
        std.d1    a0, *SP[Hwi_SFAM6]
||      mv.m1     am7, a0
        std.d1    a0, *SP[Hwi_SFAM7]
        std.d1    d0, *SP[Hwi_SFD0]
        std.d1    d1, *SP[Hwi_SFD1]
        std.d1    d2, *SP[Hwi_SFD2]
        std.d1    d3, *SP[Hwi_SFD3]
        std.d1    d4, *SP[Hwi_SFD4]
        std.d1    d5, *SP[Hwi_SFD5]
        std.d1    d6, *SP[Hwi_SFD6]
        std.d1    d7, *SP[Hwi_SFD7]
        std.d1    d8, *SP[Hwi_SFD8]
        std.d1    d9, *SP[Hwi_SFD9]
        std.d1    d10, *SP[Hwi_SFD10]
        std.d1    d11, *SP[Hwi_SFD11]
        std.d1    d12, *SP[Hwi_SFD12]
        std.d1    d13, *SP[Hwi_SFD13]
        std.d1    d14, *SP[Hwi_SFD14]

        vst8d.d2  vb0, *SP[Hwi_SFVB0]
        vst8d.d2  vb1, *SP[Hwi_SFVB1]
        vst8d.d2  vb2, *SP[Hwi_SFVB2]
        vst8d.d2  vb3, *SP[Hwi_SFVB3]
        vst8d.d2  vb4, *SP[Hwi_SFVB4]
        vst8d.d2  vb5, *SP[Hwi_SFVB5]
        vst8d.d2  vb6, *SP[Hwi_SFVB6]
        vst8d.d2  vb7, *SP[Hwi_SFVB7]
        vst8d.d2  vb8, *SP[Hwi_SFVB8]
        vst8d.d2  vb9, *SP[Hwi_SFVB9]
        vst8d.d2  vb10, *SP[Hwi_SFVB10]
        vst8d.d2  vb11, *SP[Hwi_SFVB11]
        vst8d.d2  vb12, *SP[Hwi_SFVB12]
        vst8d.d2  vb13, *SP[Hwi_SFVB13]
        vst8d.d2  vb14, *SP[Hwi_SFVB14]
        vst8d.d2  vb15, *SP[Hwi_SFVB15]
||      vmv.s2    vbl0, vb0
        vst8d.d2  vb0, *SP[Hwi_SFVBL0]
||      vmv.s2    vbl1, vb0
        vst8d.d2  vb0, *SP[Hwi_SFVBL1]
||      vmv.s2    vbl2, vb0
        vst8d.d2  vb0, *SP[Hwi_SFVBL2]
||      vmv.s2    vbl3, vb0
        vst8d.d2  vb0, *SP[Hwi_SFVBL3]
||      vmv.s2    vbl4, vb0
        vst8d.d2  vb0, *SP[Hwi_SFVBL4]
||      vmv.s2    vbl5, vb0
        vst8d.d2  vb0, *SP[Hwi_SFVBL5]
||      vmv.s2    vbl6, vb0
        vst8d.d2  vb0, *SP[Hwi_SFVBL6]
||      vmv.s2    vbl7, vb0
        vst8d.d2  vb0, *SP[Hwi_SFVBL7]
||      vmv.m2    vbm0, vb0
        vst8d.d2  vb0, *SP[Hwi_SFVBM0]
||      vmv.m2    vbm1, vb0
        vst8d.d2  vb0, *SP[Hwi_SFVBM1]
||      vmv.m2    vbm2, vb0
        vst8d.d2  vb0, *SP[Hwi_SFVBM2]
||      vmv.m2    vbm3, vb0
        vst8d.d2  vb0, *SP[Hwi_SFVBM3]
||      vmv.m2    vbm4, vb0
        vst8d.d2  vb0, *SP[Hwi_SFVBM4]
||      vmv.m2    vbm5, vb0
        vst8d.d2  vb0, *SP[Hwi_SFVBM5]
||      vmv.m2    vbm6, vb0
        vst8d.d2  vb0, *SP[Hwi_SFVBM6]
||      vmv.m2    vbm7, vb0
        vst8d.d2  vb0, *SP[Hwi_SFVBM7]

||      mvc.s1    rp, a0
        std.d1    a0, *SP[Hwi_SFRP]
;;||      mvc.s1    eer, a0
;;        std.d1    a0, *SP[Hwi_SFEER]
;;||      mvc.s1    bpcr, a0
;;        std.d1    a0, *SP[Hwi_SFBPCR]
;;||      mvc.s1    fpcr, a0
;;        std.d1    a0, *SP[Hwi_SFFPCR]
;;||      mvc.s1    fsr, a0
;;        std.d1    a0, *SP[Hwi_SFFSR]

        mvc.s1    AHPEE, a4
        addkpc.d1 $PCR_OFFSET(ti_sysbios_family_c7x_Hwi_dispatchC__I), a3
        calla.s1     a3

        ldd.d1    *SP[Hwi_SFRP], a0
        mvc.s1    a0, rp
;;||      ldd.d1    *SP[Hwi_SFEER], a0
;;        mvc.s1    a0, eer
;;||      ldd.d1    *SP[Hwi_SFBPCR], a0
;;        mvc.s1    a0, bpcr
;;||      ldd.d1    *SP[Hwi_SFFPCR], a0
;;        mvc.s1    a0, fpcr
;;||      ldd.d1    *SP[Hwi_SFFSR], a0
;;        mvc.s1    a0, fsr

        vld8d.d1  *SP[Hwi_SFVBM7], vb0
        vmv.m2    vb0, vbm7
||      vld8d.d1  *SP[Hwi_SFVBM6], vb0
        vmv.m2    vb0, vbm6
||      vld8d.d1  *SP[Hwi_SFVBM5], vb0
        vmv.m2    vb0, vbm5
||      vld8d.d1  *SP[Hwi_SFVBM4], vb0
        vmv.m2    vb0, vbm4
||      vld8d.d1  *SP[Hwi_SFVBM3], vb0
        vmv.m2    vb0, vbm3
||      vld8d.d1  *SP[Hwi_SFVBM2], vb0
        vmv.m2    vb0, vbm2
||      vld8d.d1  *SP[Hwi_SFVBM1], vb0
        vmv.m2    vb0, vbm1
||      vld8d.d1  *SP[Hwi_SFVBM0], vb0
        vmv.m2    vb0, vbm0
||      vld8d.d1  *SP[Hwi_SFVBL7], vb0
        vmv.m2    vb0, vbl7
||      vld8d.d1  *SP[Hwi_SFVBL6], vb0
        vmv.m2    vb0, vbl6
||      vld8d.d1  *SP[Hwi_SFVBL5], vb0
        vmv.m2    vb0, vbl5
||      vld8d.d1  *SP[Hwi_SFVBL4], vb0
        vmv.m2    vb0, vbl4
||      vld8d.d1  *SP[Hwi_SFVBL3], vb0
        vmv.m2    vb0, vbl3
||      vld8d.d1  *SP[Hwi_SFVBL2], vb0
        vmv.m2    vb0, vbl2
||      vld8d.d1  *SP[Hwi_SFVBL1], vb0
        vmv.m2    vb0, vbl1
||      vld8d.d1  *SP[Hwi_SFVBL0], vb0
        vmv.m2    vb0, vbl0
||      vld8d.d1  *SP[Hwi_SFVB15], vb15
        vld8d.d1  *SP[Hwi_SFVB14], vb14
        vld8d.d1  *SP[Hwi_SFVB13], vb13
        vld8d.d1  *SP[Hwi_SFVB12], vb12
        vld8d.d1  *SP[Hwi_SFVB11], vb11
        vld8d.d1  *SP[Hwi_SFVB10], vb10
        vld8d.d1  *SP[Hwi_SFVB9], vb9
        vld8d.d1  *SP[Hwi_SFVB8], vb8
        vld8d.d1  *SP[Hwi_SFVB7], vb7
        vld8d.d1  *SP[Hwi_SFVB6], vb6
        vld8d.d1  *SP[Hwi_SFVB5], vb5
        vld8d.d1  *SP[Hwi_SFVB4], vb4
        vld8d.d1  *SP[Hwi_SFVB3], vb3
        vld8d.d1  *SP[Hwi_SFVB2], vb2
        vld8d.d1  *SP[Hwi_SFVB1], vb1
        vld8d.d1  *SP[Hwi_SFVB0], vb0

        ldd.d1    *SP[Hwi_SFD14], d14
        ldd.d1    *SP[Hwi_SFD13], d13
        ldd.d1    *SP[Hwi_SFD12], d12
        ldd.d1    *SP[Hwi_SFD11], d11
        ldd.d1    *SP[Hwi_SFD10], d10
        ldd.d1    *SP[Hwi_SFD9], d9
        ldd.d1    *SP[Hwi_SFD8], d8
        ldd.d1    *SP[Hwi_SFD7], d7
        ldd.d1    *SP[Hwi_SFD6], d6
        ldd.d1    *SP[Hwi_SFD5], d5
        ldd.d1    *SP[Hwi_SFD4], d4
        ldd.d1    *SP[Hwi_SFD3], d3
        ldd.d1    *SP[Hwi_SFD2], d2
        ldd.d1    *SP[Hwi_SFD1], d1
        ldd.d1    *SP[Hwi_SFD0], d0
        ldd.d1    *SP[Hwi_SFAM7], a0
        mv.m1     a0, am7
||      ldd.d1    *SP[Hwi_SFAM6], a0
        mv.m1     a0, am6
||      ldd.d1    *SP[Hwi_SFAM5], a0
        mv.m1     a0, am5
||      ldd.d1    *SP[Hwi_SFAM4], a0
        mv.m1     a0, am4
||      ldd.d1    *SP[Hwi_SFAM3], a0
        mv.m1     a0, am3
||      ldd.d1    *SP[Hwi_SFAM2], a0
        mv.m1     a0, am2
||      ldd.d1    *SP[Hwi_SFAM1], a0
        mv.m1     a0, am1
||      ldd.d1    *SP[Hwi_SFAM0], a0
        mv.m1     a0, am0
||      ldd.d1    *SP[Hwi_SFAL7], a0
        mv.m1     a0, al7
||      ldd.d1    *SP[Hwi_SFAL6], a0
        mv.m1     a0, al6
||      ldd.d1    *SP[Hwi_SFAL5], a0
        mv.m1     a0, al5
||      ldd.d1    *SP[Hwi_SFAL4], a0
        mv.m1     a0, al4
||      ldd.d1    *SP[Hwi_SFAL3], a0
        mv.m1     a0, al3
||      ldd.d1    *SP[Hwi_SFAL2], a0
        mv.m1     a0, al2
||      ldd.d1    *SP[Hwi_SFAL1], a0
        mv.m1     a0, al1
||      ldd.d1    *SP[Hwi_SFAL0], a0
        mv.m1     a0, al0
        ldd.d1    *SP[Hwi_SFA7], a7
        ldd.d1    *SP[Hwi_SFA6], a6
        ldd.d1    *SP[Hwi_SFA5], a5
        ldd.d1    *SP[Hwi_SFA4], a4
        ldd.d1    *SP[Hwi_SFA3], a3
        ldd.d1    *SP[Hwi_SFA2], a2
;;        ldd.d1    *SP[Hwi_SFA1], a1
;;        ldd.d1    *SP[Hwi_SFA0], a0

        addd.d1   SP, Hwi_STACKFRAMESIZE*8, SP     ; free stack frame

        ldd.d1    *ECSP[0], a0
||      ldd.d2    *ECSP[1], a1
        rete.s1   a0, a1
||      ldd.d1    *ECSP[0x200], a0
||      ldd.d2    *ECSP[0x201], a1

	.endif

        .endasmfunc
