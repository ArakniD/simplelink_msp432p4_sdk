;
; ======== Hwi_asm.s71 ========
;
;

        .global ti_sysbios_family_c7x_Hwi_disable__E

        .sect ".text:ti_sysbios_family_c7x_Hwi_disable__E"
        .clink
ti_sysbios_family_c7x_Hwi_disable__E:
        .asmfunc

        devt.s1  a4    ; returns old TSR.GEE >> 25
||      ret.b1

	.endasmfunc

        .global ti_sysbios_family_c7x_Hwi_enable__E

        .sect ".text:ti_sysbios_family_c7x_Hwi_enable__E"
        .clink
ti_sysbios_family_c7x_Hwi_enable__E:
        .asmfunc

        mvc.s1   TSR, a5
||      mvk32.l1 1, a4
        revt.s1  a4
||      shruw.l1 a5, 25, a6
        andw.m1  a6, 1, a4    ; return old TSR.GEE >> 25
||      ret.b1

	.endasmfunc

        .global ti_sysbios_family_c7x_Hwi_restore__E

        .sect ".text:ti_sysbios_family_c7x_Hwi_restore__E"
        .clink
ti_sysbios_family_c7x_Hwi_restore__E:
        .asmfunc

        revt.s1 a4
||      ret.b1

	.endasmfunc

        .global ti_sysbios_family_c7x_Hwi_setCOP__E

        .sect ".text:ti_sysbios_family_c7x_Hwi_setCOP__E"
        .clink
ti_sysbios_family_c7x_Hwi_setCOP__E:
        .asmfunc

        shlw.l1    a4, 5, a4
        setcop.s1  a4
||      ret.b1

	.endasmfunc
;
; ======== Hwi_plug ========
;! Plug an interrupt vector with an ISR address.
;!       a4 <- intNum
;!       b4 <- isr
;
        .sect ".text:ti_sysbios_family_c7x_Hwi_plug__E"
        .clink
ti_sysbios_family_c7x_Hwi_plug__E:
        .asmfunc
  .if 1
        ret.b1
  .else
        stw     b3, *b15--[2]
        mvk     1, a2

        mvc     ier, b8         ; disable the interrupt currently being
        shl     a2, a4, a2      ; plugged but leave global interrupts enabled.

        xor     -1, a2, b5
||      stw     b8, *b15[1]
        and     b8, b5, b5
        mvc     b5, ier

        ; FORM DESTINATION ADDRESS OF ACTUAL FETCH PACKET
        .if ($isdefed("ti_sysbios_BIOS_useSK__D"))

        ;
        ; if useSK is defined then do not read ISTP,
        ; use the label for Hwi_int0 instead.
        ;
        .global ti_sysbios_family_c7x_Hwi_int0
        mvkl    ti_sysbios_family_c7x_Hwi_int0, b5
        mvkh    ti_sysbios_family_c7x_Hwi_int0, b5

        .else
        mvc     istp, b5        ; interrupt vector table pointer

        .endif

        mvkl    ISTPMASK, b0
        mvkh    ISTPMASK, b0
        and     b0, b5, b5      ; mask to get ISTP
        shl     a4, 5, b7       ; intNum << 5 (table increments of 0x20)
        add     b5, b7, b5      ; b5 = interrupt fetch packet start address
        mv      b5, a2          ; use ISTP as direct destination

        ; replace existing "mvkl isr, b0" instruction
        clr     b4, 16, 31, b1      ; keep 16 lsb
        shl     b1, 7, b1
        mvkl    MVK_OP, b0
        mvkh    MVK_OP, b0
        or      b0, b1, b0
        stw     b0,*a2[3]

        ; replace existing "mvkh isr, b0" instruction
        clr     b4, 0, 15, b1       ; keep 16 msb
        shru    b1, 9, b1
        mvkl    MVKH_OP, b0
        mvkh    MVKH_OP, b0
        or      b0, b1, b0
        stw     b0,*a2[4]

        flushCache b5     ; flush L1D cache, invalidate L1P, wait for completion

        ldw     *b15[1], b8
        ldw     *++b15[2], b3
        mvc     ier, b0
        nop     2
        or      b0, b8, b8      ; restore original mask OR'd with current ier.
        mvc     b8, ier

        b b3                    ; return to caller
        nop 5

  .endif
        .endasmfunc
