;
;  Copyright (c) 2015, Texas Instruments Incorporated
;  All rights reserved.
;
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions
;  are met:
;
;  *  Redistributions of source code must retain the above copyright
;     notice, this list of conditions and the following disclaimer.
;
;  *  Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
;
;  *  Neither the name of Texas Instruments Incorporated nor the names of
;     its contributors may be used to endorse or promote products derived
;     from this software without specific prior written permission.
;
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
;  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
;  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
;  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
;  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
;  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;
;
; ======== MPU_asm.asm ========
;

        .cdecls C,NOLIST,"package/internal/MPU.xdc.h"

        .global ti_sysbios_family_arm_MPU_disableAsm__I
        .global ti_sysbios_family_arm_MPU_disableBRAsm__I
        .global ti_sysbios_family_arm_MPU_enableAsm__I
        .global ti_sysbios_family_arm_MPU_enableBRAsm__I
        .global ti_sysbios_family_arm_MPU_isEnabledAsm__I
        .global ti_sysbios_family_arm_MPU_setRegionAsm__I

        .state32
        .align  4

;
; ======== MPU_disableAsm ========
; Disable MPU.
;
        .sect ".text:ti_sysbios_family_arm_MPU_disableAsm"
        .clink
        .armfunc ti_sysbios_family_arm_MPU_disableAsm__I

ti_sysbios_family_arm_MPU_disableAsm__I
        .asmfunc
        mrc     p15, #0, r0, c1, c0, #0  ; read SCTLR register
        bic     r0, r0, #0x1             ; clear bit 1 in r0
        dsb
        mcr     p15, #0, r0, c1, c0, #0  ; MPU disabled (bit 1 = 0)
        isb                              ; flush instruction pipeline

        bx      r14
        .endasmfunc

;
; ======== MPU_disableBRAsm ========
; Disable background region.
;
        .sect ".text:ti_sysbios_family_arm_MPU_disableBRAsm"
        .clink
        .armfunc ti_sysbios_family_arm_MPU_disableBRAsm__I

ti_sysbios_family_arm_MPU_disableBRAsm__I
        .asmfunc
        mrc     p15, #0, r0, c1, c0, #0  ; read SCTLR register
        bic     r0, r0, #0x20000         ; clear bit 17 in r0
        mcr     p15, #0, r0, c1, c0, #0  ; disable background region
        bx      r14
        .endasmfunc

;
; ======== MPU_enableAsm ========
; Enable MPU.
;
        .sect ".text:ti_sysbios_family_arm_MPU_enableAsm"
        .clink
        .armfunc ti_sysbios_family_arm_MPU_enableAsm__I

ti_sysbios_family_arm_MPU_enableAsm__I
        .asmfunc
        mrc     p15, #0, r0, c1, c0, #0  ; read SCTLR register
        orr     r0, r0, #0x1             ; set bit 1 in r0
        dsb
        mcr     p15, #0, r0, c1, c0, #0  ; MPU enabled (bit 1 = 1)
        isb                              ; flush instruction pipeline
        bx      r14
        .endasmfunc

;
; ======== MPU_enableBRAsm ========
; Enable background region.
;
        .sect ".text:ti_sysbios_family_arm_MPU_enableBRAsm"
        .clink
        .armfunc ti_sysbios_family_arm_MPU_enableBRAsm__I

ti_sysbios_family_arm_MPU_enableBRAsm__I
        .asmfunc
        mrc     p15, #0, r0, c1, c0, #0  ; read SCTLR register
        orr     r0, r0, #0x20000         ; set bit 1 in r0
        mcr     p15, #0, r0, c1, c0, #0  ; background region enabled
        bx      r14
        .endasmfunc

;
; ======== MPU_isEnabledAsm ========
; Determines if MPU is enabled. Returns TRUE if enabled otherwise FALSE.
;
        .sect ".text:ti_sysbios_family_arm_MPU_isEnabledAsm"
        .clink
        .armfunc ti_sysbios_family_arm_MPU_isEnabledAsm__I

ti_sysbios_family_arm_MPU_isEnabledAsm__I
        .asmfunc
        mov     r0, #0
        mrc     p15, #0, r1, c1, c0, #0  ; read SCTLR register to r1
        tst     r1, #0x1                 ; test bit 1
        movne   r0, #1                   ; if not 0, MPU is enabled
        bx      r14
        .endasmfunc

;
; ======== MPU_setRegionAsm ========
; r0 = regionId
; r1 = regionBaseAddr
; r2 = sizeAndEnable
; r3 = regionAttrs
;
        .sect ".text:ti_sysbios_family_arm_MPU_setRegionAsm"
        .clink
        .armfunc ti_sysbios_family_arm_MPU_setRegionAsm__I

ti_sysbios_family_arm_MPU_setRegionAsm__I:
        .asmfunc
        mcr     p15, #0, r0, c6, c2, #0  ; select MPU region
        mcr     p15, #0, r1, c6, c1, #0  ; set region base address
        mcr     p15, #0, r2, c6, c1, #2  ; set region size and enable it
        mcr     p15, #0, r3, c6, c1, #4  ; set protection attributes
        bx      r14
        .endasmfunc
