%%{
/*
 * Copyright (c) 2015-2017 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
%%}
%%{
    var Utils = xdc.module('xdc.bld.Utils');
    var File = xdc.module("xdc.services.io.File");
    var BIOS = xdc.module("ti.sysbios.BIOS");
    var Build = xdc.module("ti.sysbios.Build");

    var TARGET = $args[0];
    var targetIncs = Utils.expandString(TARGET.includeOpts, TARGET);

    var XDCROOT = String(environment['xdc.rootDir'] + '/packages/').replace(/\\/g, "/");

    /* collect xdc include paths */
    var xdcpath =  String(environment['xdc.path'] + '/packages/').replace(/\\/g, "/");
    var xdcincs = xdcpath.split(';');
    var XDC_PATH_INCS = "";
    for each (var inc in xdcincs) {
        XDC_PATH_INCS += "-I\"" + inc + "/\" ";
    }

    var annexIncs = "";
    for (var a = 0; a < Build.annex.length; a++) {
        for (var p = 0; p < Build.annex[a].incs.length; p++) {
            annexIncs += " -I" + Build.annex[a].incs[p];
        }
    }

    var XOPTS = '-I"' + XDCROOT + '"'
        + " -Dxdc_target_types__=" + File.getDOSPath(TARGET.$package.packageRepository) + TARGET.stdInclude
        + " -Dxdc_target_name__=" + TARGET.name;

    function baseName(path) {
        return (path.substr(path.lastIndexOf('/') + 1).replace(/\.[^\.]+$/, ""));
    }

    function packageName(path) {
        var dirpath = path.substring(0, path.lastIndexOf('/'));
        return (dirpath.substr(dirpath.lastIndexOf('/') + 1));
    }
    var OBJS = [];
%%}
#  This is a generated file.
#
#  Do not edit this file. Any modifications to this file
#  will be overwritten whenever makefiles are re-generated.
#
#  template: `this.$package.$name`/makefile_gccArmLto.xdt
#  target: `TARGET.$name`

vpath % `File.getDOSPath(this.$package.packageRepository) + "ti/sysbios/"`
vpath %.c `XDCROOT`
%for (var i = 0; i < Build.annex.length; i++) {
vpath %.c `Build.annex[i].repo`
%}

XOPTS = `XOPTS`

BIOS_DEFS = `Build.getDefs()`

CCOPTS = `BIOS.getCCOpts(TARGET.name)`

BIOS_INC = -I"`File.getDOSPath(this.$package.packageRepository)`"
ANNEX_INCS = `annexIncs`
INCS = $(BIOS_INC) $(ANNEX_INCS) `XDC_PATH_INCS` `targetIncs`

CC = `Utils.expandString(TARGET.cc.cmd, TARGET)` $(CCOPTS)
ASM = `Utils.expandString(TARGET.asm.cmd, TARGET)` $(CCOPTS)
AR = `Utils.expandString(TARGET.ar.cmd, TARGET)` `TARGET.ar.opts`

%if (environment["os.name"].match(/Windows.*/i)) {
%if (BIOS.buildingAppLib == false) {
%    Build.$private.libDir = Build.$private.libDir.replace(/\//g,'\\');
%}
DEL = `XDCROOT`../bin/rm -f
CP = `XDCROOT`../bin/cp -f
%}
%else {
DEL = rm -f
CP = cp -f
%}

define RM
	$(if $(wildcard $1),$(DEL) $1,:)
endef

define ASSEMBLE
	@echo asm`TARGET.suffix` $< ...
	@$(ASM) $(BIOS_DEFS) $(XOPTS) $(INCS) $<
endef

define COMPILE
	@echo cl`TARGET.suffix` $< ...
	@$(CC) $(BIOS_DEFS) $(XOPTS) $(INCS) $<
endef

%var LIB = "sysbios.a" + TARGET.suffix;

%if (BIOS.buildingAppLib == false) {
all: `Build.$private.libDir``LIB`
%}
%else {
all: `LIB`
%}

%var sources = Build.getAsmFiles(TARGET.$name);
%for each (var s in sources) {
%    var obj = packageName(s) + "_" + baseName(s) + ".o";
%    OBJS.push(obj)
`obj`: `s` makefile
	@-$(call RM, $@)
	$(ASSEMBLE) -o `obj`

%}

%var sources = Build.getCFiles(TARGET.$name).split(' ');
%for each (var s in sources) {
%    var obj = packageName(s) + "_" + baseName(s) + ".o";
%    OBJS.push(obj)
`obj`: `s` makefile
	@-$(call RM, `obj`)
	$(COMPILE) -o `obj`
%}

`LIB`: `OBJS.join(" ")`
	@-$(call RM, $@)
	@echo ar`TARGET.suffix` $^ ...
	@$(AR) $@ $^

%if (BIOS.buildingAppLib == false) {
`Build.$private.libDir``LIB`: `LIB`
	@echo cp `LIB`
	@-$(call RM, "`Build.$private.libDir``LIB`")
	@$(CP) `LIB` "`Build.$private.libDir``LIB`"
%}

clean:
%if (environment["os.name"].match(/Windows.*/i)) {
	@$(DEL) ..\makefile.libs
%}
%else {
	@$(DEL) ../makefile.libs
%}
%if (BIOS.buildingAppLib == false) {
	@-$(call RM, "`Build.$private.libDir``LIB`")
%}
	@-$(call RM, *)
