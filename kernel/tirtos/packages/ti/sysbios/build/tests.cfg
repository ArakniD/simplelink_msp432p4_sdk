/*
 * Copyright (c) 2013-2018, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
//Program.importRomAsm('romdev.biosrom.romimage');

BIOS = xdc.useModule('ti.sysbios.BIOS');
System = xdc.useModule('xdc.runtime.System');
SysMin = xdc.useModule('xdc.runtime.SysMin')
System.SupportProxy = SysMin;

var isa = Program.build.target.isa;

var Memory = xdc.useModule('xdc.runtime.Memory');

if (Program.build.target.$name.match(/gnu/)) {
    if (Program.build.target.$name.match(/A8F/) ||
        Program.build.target.$name.match(/A9F/) ||
        Program.build.target.$name.match(/A15F/)) {
        var SemiHost = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');
    }
}

var targName = Program.build.target.$name;
if (targName.indexOf("C28") != -1) {
    BIOS.heapSize = 0x800;
}
else {
    BIOS.heapSize = 0x2000;
}

Memory.defaultHeapSize = BIOS.heapSize;

var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
Defaults.common$.diags_INTERNAL = Diags.ALWAYS_ON;

var GateMutex = xdc.module('ti.sysbios.gates.GateMutex');
/* this will turn off the threadtype check assert in GateMutext_enter */ 
//GateMutex.common$.diags_ASSERT = Diags.ALWAYS_OFF;

//xdc.useModule('ti.sysbios.hal.Cache');

BIOS.libType = BIOS.LibType_Custom;
//BIOS.libType = BIOS.LibType_Instrumented;
//BIOS.libType = BIOS.LibType_NonInstrumented;
//BIOS.libType = BIOS.LibType_Debug;

if (Program.build.target.platform.indexOf("evmLM3S8962:testInst") != -1) {
    xdc.module('ti.sysbios.family.arm.m3.Hwi').resetVectorAddress = 0x20000000;
}
