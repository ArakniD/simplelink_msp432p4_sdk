%%{
/*
 * Copyright (c) 2017, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  Linker templates are passed the following arguments:
 *      $out        - an open file stream for the generated linker
 *                    command file
 *      $args[]     - array of zero or more libraries that should be linked
 *                    with (in the order they appear in the argument list)
 *
 *  We can't add "'s around names; otherwise the GNU linker looks for names
 *  with "'s.
 *
 */
%%}
/*
 * This file was generated by linkcmd_gnu.xdt from the ti.platforms.cortexM
 * package.
 */

%if (prog.stack != 0) {
__STACK_SIZE = `utils.toHex(prog.stack)`;
%}
%else {
__STACK_SIZE = STACKSIZE;
%}

__TI_STACK_SIZE = __STACK_SIZE;

%if ($args.length > 0) {
INPUT(
    %for (var i = 0; i < $args.length; i++) {
    `$args[i]`
    %}
)
%}

/*
 * symbolic aliases for static instance objects
 */
%for (var sym in prog.symbol) {
    %var inst = prog.symbol[sym];
    %if (typeof(inst) == 'number') {
`sym` = `inst`;
    %}
    %else {
        %var objTab = inst.$module.$name.replace(/\./g, '_') + '_Object__table__V';
        %var off = prog.$capsule.instSize(inst) * inst.$index;
`sym` = `objTab` + `off`;
    %}
%}

%if (prog.platform.$orig.includeLinkCmdFile) {
%var linkFile = prog.platform.$package.packageBase + '/include_gnu/'
%    + prog.cpu.deviceName.toUpperCase() + '.lds';
INCLUDE "`linkFile`"
%}

SECTIONS {

%    var _utils = xdc.loadCapsule("gnu/targets/linkUtils.xs");
    `_utils.genSections(prog)`

    /*
     * Linker command file contributions from all loaded packages:
     */
    `_utils.genContributions($args)`

    __TI_STACK_BASE = __stack;
}

ENTRY(_c_int00)

/* function aliases */
%    for (var keys = this.$$aliases.keys(); keys.hasMoreElements(); ) {
%        var key = keys.nextElement();
`key` = `this.$$aliases.get(key)`;
%    }
