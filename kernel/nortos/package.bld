/*
 * Copyright (c) 2017-2018, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 *  ======== package.bld ========
 */

var dplFiles = [
    "dpl/posix_sleep.c",
    "dpl/DebugP_nortos.c",
    "dpl/MutexP_nortos.c",
    "./NoRTOS.c",
    "dpl/QueueP_nortos.c",
    "dpl/SemaphoreP_nortos.c",
    "dpl/SwiP_nortos.c",
    "dpl/SystemP_nortos.c",
];

var cc26xxSrcList = [
    "dpl/ClockPTimer_nortos.c",
    "dpl/TimerPCC26XX_nortos.c",
    "dpl/HwiPCC26XX_nortos.c",
    "dpl/PowerCC26XX_nortos.c"
];

var cc26x2SrcList = [
    "dpl/ClockPTimer_nortos.c",
    "dpl/TimerPCC26XX_nortos.c",
    "dpl/HwiPCC26XX_nortos.c",
    "dpl/PowerCC26X2_nortos.c"
];

var cc32xxSrcList = [
    "dpl/ClockPSysTick_nortos.c",
    "dpl/HwiPCC32XX_nortos.c",
    "dpl/PowerCC32XX_nortos.c"
];

var msp432p4SrcList = [
    "dpl/PowerMSP432_nortos.c",
    "dpl/ClockPTimer_nortos.c",
    "dpl/TimerPMSP432_nortos.c",
    "dpl/HwiPMSP432_nortos.c"
];

var msp432e4SrcList = [
    "dpl/ClockPSysTick_nortos.c",
    "dpl/HwiPMSP432E4_nortos.c",
    "dpl/PowerMSP432E4_nortos.c",
];

var tiFiles = [
    "startup/startup_cc13xx_cc26xx_ccs.c"
];

var gccFiles = [
    "startup/startup_cc13xx_cc26xx_gcc.c"
];

var iarFiles = [
    "startup/startup_cc13xx_cc26xx_iar.c"
];

var tiFilesCC32xx = [
    "startup/startup_cc32xx_ccs.c"
];

var gccFilesCC32xx = [
    "startup/startup_cc32xx_gcc.c"
];

var iarFilesCC32xx = [
    "startup/startup_cc32xx_iar.c"
];

var tiFilesMSP432 = [
    "startup/startup_msp432_ccs.c"
];

var gccFilesMSP432 = [
    "startup/startup_msp432_gcc.c"
];

var iarFilesMSP432 = [
    "startup/startup_msp432_iar.c"
];

var tiFilesMSP432E4 = [
    "startup/startup_msp432e4_ccs.c"
];

var gccFilesMSP432E4 = [
    "startup/startup_msp432e4_gcc.c"
];

var iarFilesMSP432E4 = [
    "startup/startup_msp432e4_iar.c"
];

/* Get deviceWare directories from XDCARGS */
var xdcArgs = java.lang.System.getenv("XDCARGS");
var deviceWareOpts =
    xdc.loadCapsule("ti/drivers/xdcArgParser.xs").getDeviceWareOpts(xdcArgs);
var libBuilder = xdc.loadCapsule("ti/drivers/libBuilder.xs");

/* List of files (besides *.c files) which need to be packaged with drivers */
var packageFiles = [
    "package.bld",
    "./dpl",
    "./startup",
    "./posix",
    "./NoRTOS.h"
];

/* Generate libraries for products which have been defined */
if (deviceWareOpts.cc26xxware) {
    /* optimize IAR object files for size (not speed) */
    var iarM3 = xdc.module('iar.targets.arm.M3');
    iarM3.profiles["release"].compileOpts.copts =
        iarM3.profiles["release"].compileOpts.copts.replace("Ohs", "Ohz");

    var iarM4F = xdc.module('iar.targets.arm.M4F');
    var iarM4FCopts = iarM4F.profiles["release"].compileOpts.copts; /* must restore after use */
    iarM4F.profiles["release"].compileOpts.copts =
        iarM4F.profiles["release"].compileOpts.copts.replace("Ohs", "Ohz");

    /* optimize TI object files for size (not speed) & set -O3 */
    var tiM3 = xdc.module('ti.targets.arm.elf.M3');
    tiM3.profiles["release"].compileOpts.copts =
        tiM3.profiles["release"].compileOpts.copts.replace("-O2", "-O3");

    if ((tiM3.profiles["release"].compileOpts.copts).indexOf(" --opt_for_speed=0") < 0) {
        tiM3.profiles["release"].compileOpts.copts += " --opt_for_speed=0";
    }

    var tiM4F = xdc.module('ti.targets.arm.elf.M4F');
    var tiM4FCopts = tiM4F.profiles["release"].compileOpts.copts; /* must restore after use */
    tiM4F.profiles["release"].compileOpts.copts =
        tiM4F.profiles["release"].compileOpts.copts.replace("-O2", "-O3");

    if ((tiM4F.profiles["release"].compileOpts.copts).indexOf(" --opt_for_speed=0") < 0) {
        tiM4F.profiles["release"].compileOpts.copts += " --opt_for_speed=0";
    }

    var targets;
    var sources;

    targets = libBuilder.m3Targets.concat(libBuilder.m4fTargets);
    cc26xxSources = dplFiles.concat(cc26xxSrcList);
    cc26x2Sources = dplFiles.concat(cc26x2SrcList);

    /* loop through each target and add right target src file list */
    for each (var target in targets) {
        var srcs;

        if (target.match(/ti/)) {
            srcs = tiFiles;
        }
        else if (target.match(/gnu/)) {
            srcs = gccFiles;
        }
        else if (target.match(/iar/)) {
            srcs = iarFiles;
        }
        else {
            throw ("target not recognized: " + target);
        }

        if (target.match(/M3/)) {

            libBuilder.makeLibs("lib/nortos_cc13x0", [target],
                cc26xxSources.concat(srcs), " -DDeviceFamily_CC13X0");

            libBuilder.makeLibs("lib/nortos_cc26x0", [target],
                cc26xxSources.concat(srcs), " -DDeviceFamily_CC26X0");

            libBuilder.makeLibs("lib/nortos_cc26x0r2", [target],
                cc26xxSources.concat(srcs), " -DDeviceFamily_CC26X0R2");
        }

        if (target.match(/M4/)) {
            libBuilder.makeLibs("lib/nortos_cc13x2", [target],
                cc26x2Sources.concat(srcs), " -DDeviceFamily_CC13X2");

            libBuilder.makeLibs("lib/nortos_cc26x2", [target],
                cc26x2Sources.concat(srcs), " -DDeviceFamily_CC26X2");
        }
    }

    /* restore M4F profile options for subsequent users */
    iarM4F.profiles["release"].compileOpts.copts = iarM4FCopts;
    tiM4F.profiles["release"].compileOpts.copts = tiM4FCopts;
}

if (deviceWareOpts.cc32xxware) {
    var copts = " -DUSE_CC3220_ROM_DRV_API -DDeviceFamily_CC3220";

    var targets;
    var sources;

    targets = libBuilder.m4Targets;
    sources = dplFiles.concat(cc32xxSrcList);

    /* loop through each target and add right target src file list */
    for each (var target in targets) {
        var srcs = sources;

        if (target.match(/ti/)) {
            srcs = srcs.concat(tiFilesCC32xx);
        }
        else if (target.match(/gnu/)) {
            srcs = srcs.concat(gccFilesCC32xx);
        }
        else if (target.match(/iar/)) {
            srcs = srcs.concat(iarFilesCC32xx);
        }
        else {
            throw ("target not recognized: " + target);
        }

        libBuilder.makeLibs("lib/nortos_cc32xx", [target], srcs, copts);
    }
}

if (deviceWareOpts.msp432DriverLib) {
    var targets;
    var sources;

    targets = libBuilder.m4fTargets;
    sources = dplFiles.concat(msp432p4SrcList);

    /* loop through each target and add right target src file list */
    for each (var target in targets) {
        var srcs = sources;

        if (target.match(/ti/)) {
            srcs = srcs.concat(tiFilesMSP432);
        }
        else if (target.match(/gnu/)) {
            srcs = srcs.concat(gccFilesMSP432);
        }
        else if (target.match(/iar/)) {
            srcs = srcs.concat(iarFilesMSP432);
        }
        else {
            throw ("target not recognized: " + target);
        }

        libBuilder.makeLibs("lib/nortos_msp432p401x", [target], srcs,
            " -DDeviceFamily_MSP432P401x");
        libBuilder.makeLibs("lib/nortos_msp432p4x1xi", [target], srcs,
            " -DDeviceFamily_MSP432P4x1xI");
        libBuilder.makeLibs("lib/nortos_msp432p4x1xt", [target], srcs,
            " -DDeviceFamily_MSP432P4x1xT");
    }
}

if (deviceWareOpts.msp432e4DriverLib) {
    var targets;
    var sources;

    targets = libBuilder.m4fTargets;
    sources = dplFiles.concat(msp432e4SrcList);

    /* loop through each target and add right target src file list */
    for each (var target in targets) {
        var srcs = sources;

        if (target.match(/ti/)) {
            srcs = srcs.concat(tiFilesMSP432E4);
        }
        else if (target.match(/gnu/)) {
            srcs = srcs.concat(gccFilesMSP432E4);
        }
        else if (target.match(/iar/)) {
            srcs = srcs.concat(iarFilesMSP432E4);
        }
        else {
            throw ("target not recognized: " + target);
        }

	/* build one library for the super-set part */
        libBuilder.makeLibs("lib/nortos_msp432e4", [target], srcs,
            " -DDeviceFamily_MSP432E411Y");
    }
}

/* Include source files in the release package */
Pkg.otherFiles = packageFiles;
Pkg.attrs.exportSrc = true;
Pkg.releasePrefix = ("." + Pkg.name).replace(/[^\.]+/g, "./") + "../exports/";
