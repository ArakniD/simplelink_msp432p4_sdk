<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_s_p_i_f_f_s_n_v_s_8h" kind="file" language="C++">
    <compoundname>SPIFFSNVS.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="yes">spiffs_config.h</includes>
    <includes refid="spiffs_8h" local="yes">spiffs.h</includes>
    <includes refid="_n_v_s_8h" local="no">ti/drivers/NVS.h</includes>
    <includes local="no">ti/drivers/dpl/MutexP.h</includes>
    <incdepgraph>
      <node id="266">
        <label>stdbool.h</label>
      </node>
      <node id="262">
        <label>stdint.h</label>
      </node>
      <node id="265">
        <label>ti/drivers/NVS.h</label>
        <link refid="_n_v_s_8h"/>
        <childnode refid="266" relation="include">
        </childnode>
        <childnode refid="267" relation="include">
        </childnode>
        <childnode refid="262" relation="include">
        </childnode>
      </node>
      <node id="267">
        <label>stddef.h</label>
      </node>
      <node id="263">
        <label>spiffs_config.h</label>
      </node>
      <node id="261">
        <label>SPIFFSNVS.h</label>
        <link refid="_s_p_i_f_f_s_n_v_s_8h"/>
        <childnode refid="262" relation="include">
        </childnode>
        <childnode refid="263" relation="include">
        </childnode>
        <childnode refid="264" relation="include">
        </childnode>
        <childnode refid="265" relation="include">
        </childnode>
        <childnode refid="268" relation="include">
        </childnode>
      </node>
      <node id="268">
        <label>ti/drivers/dpl/MutexP.h</label>
      </node>
      <node id="264">
        <label>spiffs.h</label>
        <link refid="spiffs_8h"/>
        <childnode refid="263" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_s_p_i_f_f_s_n_v_s___lock__" prot="public">SPIFFSNVS_Lock_</innerclass>
    <innerclass refid="struct_s_p_i_f_f_s_n_v_s___data__" prot="public">SPIFFSNVS_Data_</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___s_p_i_f_f_s_n_v_s___s_t_a_t_u_s_1ga44e1652f2eb8528bf93adc77e3e013d6" prot="public" static="no">
        <name>SPIFFSNVS_STATUS_SUCCESS</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>Successful status code returned by: <ref refid="_s_p_i_f_f_s_n_v_s_8h_1ad200c9f25659779041c17893b0155a48" kindref="member">SPIFFSNVS_config()</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Returned if the API was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/third_party/spiffs/SPIFFSNVS.h" line="189" column="9" bodyfile="exports/tidrivers_msp432/source/third_party/spiffs/SPIFFSNVS.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_i_f_f_s_n_v_s___s_t_a_t_u_s_1ga24d6594e8daac912958ef381ffd60763" prot="public" static="no">
        <name>SPIFFSNVS_STATUS_ERROR</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>Generic error status code returned by: <ref refid="_s_p_i_f_f_s_n_v_s_8h_1ad200c9f25659779041c17893b0155a48" kindref="member">SPIFFSNVS_config()</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Returned if the API was not executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/third_party/spiffs/SPIFFSNVS.h" line="197" column="9" bodyfile="exports/tidrivers_msp432/source/third_party/spiffs/SPIFFSNVS.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_i_f_f_s_n_v_s___s_t_a_t_u_s_1gaaed3fec880853b3df3ddc6f2bd171f86" prot="public" static="no">
        <name>SPIFFSNVS_STATUS_INV_NVS_IDX</name>
        <initializer>(-2)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_s_p_i_f_f_s_n_v_s_8h_1ad200c9f25659779041c17893b0155a48" kindref="member">SPIFFSNVS_config()</ref> </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_s_p_i_f_f_s_n_v_s_8h_1ad200c9f25659779041c17893b0155a48" kindref="member">SPIFFSNVS_config()</ref> will return this value if the NVS index is invalid. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/third_party/spiffs/SPIFFSNVS.h" line="204" column="9" bodyfile="exports/tidrivers_msp432/source/third_party/spiffs/SPIFFSNVS.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_i_f_f_s_n_v_s___s_t_a_t_u_s_1ga7961506209d7c5a1dc791159d6c52a51" prot="public" static="no">
        <name>SPIFFSNVS_STATUS_INV_BLOCK_SIZE</name>
        <initializer>(-3)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_s_p_i_f_f_s_n_v_s_8h_1ad200c9f25659779041c17893b0155a48" kindref="member">SPIFFSNVS_config()</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Error status code returned if the logicalBlockSize argument is not an integer multiple of the physical block size. (e.g., logicalBlockSize = n * physicalBlockSize; where n is a positive integer) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/third_party/spiffs/SPIFFSNVS.h" line="214" column="9" bodyfile="exports/tidrivers_msp432/source/third_party/spiffs/SPIFFSNVS.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_i_f_f_s_n_v_s___s_t_a_t_u_s_1ga21872212b529e6a1157b6f3f4e579dbe" prot="public" static="no">
        <name>SPIFFSNVS_STATUS_INV_PAGE_SIZE</name>
        <initializer>(-4)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_s_p_i_f_f_s_n_v_s_8h_1ad200c9f25659779041c17893b0155a48" kindref="member">SPIFFSNVS_config()</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Error status code returned if the logicalBlockSize argument is not an integer multiple of the logicalPageSize argument. (e.g., logicalBlockSize = n * logicalPageSize; where n is a positive integer) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/third_party/spiffs/SPIFFSNVS.h" line="224" column="9" bodyfile="exports/tidrivers_msp432/source/third_party/spiffs/SPIFFSNVS.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_s_p_i_f_f_s_n_v_s_8h_1a7cf3f1a05b93a1ab7433d42bb2bafc4f" prot="public" static="no">
        <type>struct <ref refid="struct_s_p_i_f_f_s_n_v_s___lock__" kindref="compound">SPIFFSNVS_Lock_</ref></type>
        <definition>typedef struct SPIFFSNVS_Lock_  SPIFFSNVS_Lock</definition>
        <argsstring></argsstring>
        <name>SPIFFSNVS_Lock</name>
        <briefdescription>
<para>SPIFFSNVS Lock. </para>        </briefdescription>
        <detaileddescription>
<para>Lock mechanism to ensure thread safety. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/third_party/spiffs/SPIFFSNVS.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_s_p_i_f_f_s_n_v_s_8h_1a4c955949f2948a593abf50454c1dada9" prot="public" static="no">
        <type>struct <ref refid="struct_s_p_i_f_f_s_n_v_s___data__" kindref="compound">SPIFFSNVS_Data_</ref></type>
        <definition>typedef struct SPIFFSNVS_Data_  SPIFFSNVS_Data</definition>
        <argsstring></argsstring>
        <name>SPIFFSNVS_Data</name>
        <briefdescription>
<para>SPIFFSNVS data object. </para>        </briefdescription>
        <detaileddescription>
<para>Memory required to store the NVS handle used to read/write memory and the locking mechanism used to provide thread safety to SPIFFS. Each SPIFFS file system must have it&apos;s own SPIFFSNVS_Data object and it must be persistent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/third_party/spiffs/SPIFFSNVS.h" line="250" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_s_p_i_f_f_s_n_v_s_8h_1ad200c9f25659779041c17893b0155a48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>s32_t</type>
        <definition>s32_t SPIFFSNVS_config</definition>
        <argsstring>(SPIFFSNVS_Data *spiffsnvsData, u32_t nvsIndex, spiffs *fs, spiffs_config *fsConfig, u32_t logicalBlockSize, u32_t logicalPageSize)</argsstring>
        <name>SPIFFSNVS_config</name>
        <param>
          <type><ref refid="_s_p_i_f_f_s_n_v_s_8h_1a4c955949f2948a593abf50454c1dada9" kindref="member">SPIFFSNVS_Data</ref> *</type>
          <declname>spiffsnvsData</declname>
        </param>
        <param>
          <type>u32_t</type>
          <declname>nvsIndex</declname>
        </param>
        <param>
          <type><ref refid="spiffs_8h_1ad770b2e1589c193b8e39b6335e48e32e" kindref="member">spiffs</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type><ref refid="structspiffs__config" kindref="compound">spiffs_config</ref> *</type>
          <declname>fsConfig</declname>
        </param>
        <param>
          <type>u32_t</type>
          <declname>logicalBlockSize</declname>
        </param>
        <param>
          <type>u32_t</type>
          <declname>logicalPageSize</declname>
        </param>
        <briefdescription>
<para>Initializes <ref refid="spiffs_8h_1ad770b2e1589c193b8e39b6335e48e32e" kindref="member">spiffs</ref>, <ref refid="structspiffs__config" kindref="compound">spiffs_config</ref> and <ref refid="_s_p_i_f_f_s_n_v_s_8h_1a4c955949f2948a593abf50454c1dada9" kindref="member">SPIFFSNVS_Data</ref> structures for SPIFFS to interface with the NVS driver. </para>        </briefdescription>
        <detaileddescription>
<para>This function initializes fields in the <ref refid="spiffs_8h_1ad770b2e1589c193b8e39b6335e48e32e" kindref="member">spiffs</ref>, <ref refid="structspiffs__config" kindref="compound">spiffs_config</ref> and <ref refid="_s_p_i_f_f_s_n_v_s_8h_1a4c955949f2948a593abf50454c1dada9" kindref="member">SPIFFSNVS_Data</ref> structures to enable SPIFFS to interface with a NVS driver instance. This function performs the following actions:<orderedlist>
<listitem><para>Opens the TI NVS driver instance</para></listitem><listitem><para>Verifies valid logical block and logical page sizes are used</para></listitem><listitem><para>Creates a lock used by SPIFFS for thread-safety</para></listitem><listitem><para>Sets fields in <ref refid="spiffs_8h_1ad770b2e1589c193b8e39b6335e48e32e" kindref="member">spiffs</ref>, <ref refid="structspiffs__config" kindref="compound">spiffs_config</ref> and <ref refid="_s_p_i_f_f_s_n_v_s_8h_1a4c955949f2948a593abf50454c1dada9" kindref="member">SPIFFSNVS_Data</ref> structures to enable SPIFFS to use the TI NVS as the interface to flash memory.</para></listitem></orderedlist>
</para><para>The <ref refid="spiffs_8h_1ad770b2e1589c193b8e39b6335e48e32e" kindref="member">spiffs</ref> and <ref refid="structspiffs__config" kindref="compound">spiffs_config</ref> structures are used to mount the file system. This function must be called only once for each SPIFFS instance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spiffsnvsData</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <ref refid="_s_p_i_f_f_s_n_v_s_8h_1a4c955949f2948a593abf50454c1dada9" kindref="member">SPIFFSNVS_Data</ref> structure</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvsIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the NVS driver to be used to read/write flash memory.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fs</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <ref refid="spiffs_8h_1ad770b2e1589c193b8e39b6335e48e32e" kindref="member">spiffs</ref> file system object</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fsConfig</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <ref refid="structspiffs__config" kindref="compound">spiffs_config</ref> structure</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>logicalBlockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical block size in bytes</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>logicalPageSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical page size in bytes</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___s_p_i_f_f_s_n_v_s___s_t_a_t_u_s_1ga44e1652f2eb8528bf93adc77e3e013d6" kindref="member">SPIFFSNVS_STATUS_SUCCESS</ref> if structures were configured correctly. </para></simplesect>
<simplesect kind="return"><para><ref refid="group___s_p_i_f_f_s_n_v_s___s_t_a_t_u_s_1gaaed3fec880853b3df3ddc6f2bd171f86" kindref="member">SPIFFSNVS_STATUS_INV_NVS_IDX</ref> if an invalid index is used. </para></simplesect>
<simplesect kind="return"><para><ref refid="group___s_p_i_f_f_s_n_v_s___s_t_a_t_u_s_1ga7961506209d7c5a1dc791159d6c52a51" kindref="member">SPIFFSNVS_STATUS_INV_BLOCK_SIZE</ref> if an invalid logical block size is used. </para></simplesect>
<simplesect kind="return"><para><ref refid="group___s_p_i_f_f_s_n_v_s___s_t_a_t_u_s_1ga21872212b529e6a1157b6f3f4e579dbe" kindref="member">SPIFFSNVS_STATUS_INV_PAGE_SIZE</ref> if an invalid logical page size is used. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/third_party/spiffs/SPIFFSNVS.h" line="289" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Module to enable the SPI Flash File System (SPIFFS) on the TI NVS driver. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para>The SPIFFSNVS header file should be included in an application as follows: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;third_party/spiffs/SPIFFSNVS.h&gt;</highlight></codeline>
</programlisting></para><para>SPIFFSNVS is designed to provide interface functions required by the SPIFFS to read/write/erase NOR flash memory. These functions are implemented using the TI NVS driver. By leveraging the NVS driver, application code using SPIFFS is not tied to a physical memory type (like SPI flash). The NVS driver abstracts the physical memory interface so SPIFFS application code can run on any NVS driver instance. Changing between internal flash or external SPI flash can be done by having SPIFFS use a different NVS driver instance. SPIFFS will operate within the memory region which has been allocated for the NVS driver instance.</para><para>It is highly recommended that you read SPIFFS design and usage documentation before using SPIFFS. Documentation available here: <ulink url="https://github.com/pellepl/spiffs">https://github.com/pellepl/spiffs</ulink></para><para><heading level="2">Using SPIFFS and SPIFFSNVS</heading>
</para><para>To mount a SPIFFS file system some configuration parameters and RAM must be provided at runtime (all sizes in bytes):<itemizedlist>
<listitem><para>physical block size (also known as sector size)</para></listitem><listitem><para>amount of memory allocated for SPIFFS</para></listitem><listitem><para>logical block size</para></listitem><listitem><para>logical page size</para></listitem><listitem><para>A RAM work buffer</para></listitem><listitem><para>A RAM file descriptor cache</para></listitem><listitem><para>A RAM read/write cache</para></listitem></itemizedlist>
</para><para>NVS drivers are aware of the physical block size and the amount of memory allocated (values are set in driver configuration; see board files). The logical block size must be an integer multiple of the physical block size (a.k.a. sector size): logicalBlockSize = n * physicalBlockSize</para><para><simplesect kind="note"><para>It is recommended to set logical block size equal to the physical block size when starting with SPIFFS. This can be changed later when optimizing the file system for your application.</para></simplesect>
The logical block size must also be an integer multiple of the logical page size: logicalBlockSize = i * logicalPageSize</para><para>A statically allocated RAM work buffer must be provided. This buffer must be (2 * logicalPageSize) in length. A statically allocated RAM file descriptor cache must also be provided. File descriptors are 44 bytes for the default SPIFFS configuration. The cache must be large enough to store as many file descriptors as desired. Start with 4 file descriptors and modify when optimizing for your application. Finally, SPIFFS requires a read/write cache be provided. Start with a (2 * logicalPageSize) size cache; this can be increased or reduced later.</para><para>As an example assume that we want to use SPIFFS with a NVS driver instance that has 128k of memory and the the physical block size is 4096 bytes. In this case the logical block size can be set to 8192 bytes (16 logical blocks). Now we can set the logical page size to 256 bytes (32 logical pages per logical block).</para><para><simplesect kind="note"><para>SPIFFS always keeps 2 logical blocks free; in the example above there would only be 14 logical blocks available for storage (16k is unusable). The logical block size can be reduced to have more space for data. The logical block size and logical page size should be changed to optimize the file system for your application.</para></simplesect>
Knowing the logical block and logical page sizes desired; <ref refid="_s_p_i_f_f_s_n_v_s_8h_1ad200c9f25659779041c17893b0155a48" kindref="member">SPIFFSNVS_config()</ref> must be used to initialize the <ref refid="structspiffs__config" kindref="compound">spiffs_config</ref> <ref refid="spiffs_8h_1ad770b2e1589c193b8e39b6335e48e32e" kindref="member">spiffs</ref> structures. <ref refid="_s_p_i_f_f_s_n_v_s_8h_1ad200c9f25659779041c17893b0155a48" kindref="member">SPIFFSNVS_config()</ref> requires a <ref refid="_s_p_i_f_f_s_n_v_s_8h_1a4c955949f2948a593abf50454c1dada9" kindref="member">SPIFFSNVS_Data</ref> object be provided. This object is used by SPIFFSNVS when reading/writing to flash memory. It also stores references to OS objects used for thread safety. Each SPIFFS file system instance must have it&apos;s own <ref refid="_s_p_i_f_f_s_n_v_s_8h_1a4c955949f2948a593abf50454c1dada9" kindref="member">SPIFFSNVS_Data</ref> object and these objects must reside in persistent memory (not on a task stack or memory lost during low power modes). The <ref refid="structspiffs__t_1a00dfd42d670514d50b7a906b75e45a44" kindref="member">spiffs.user_data</ref> field is used to store a pointer to its respective <ref refid="_s_p_i_f_f_s_n_v_s_8h_1a4c955949f2948a593abf50454c1dada9" kindref="member">SPIFFSNVS_Data</ref> object. Users must not change <ref refid="structspiffs__config" kindref="compound">spiffs_config</ref> and <ref refid="spiffs_8h_1ad770b2e1589c193b8e39b6335e48e32e" kindref="member">spiffs</ref> structures after <ref refid="_s_p_i_f_f_s_n_v_s_8h_1ad200c9f25659779041c17893b0155a48" kindref="member">SPIFFSNVS_config()</ref> has been called.</para><para><programlisting><codeline><highlight class="normal">#define<sp/>SPIFFS_LOGICAL_BLOCK_SIZE<sp/><sp/><sp/><sp/>(4096)</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>SPIFFS_LOGICAL_PAGE_SIZE<sp/><sp/><sp/><sp/><sp/>(128)</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>SPIFFS_FILE_DESCRIPTOR_SIZE<sp/><sp/>(44)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>uint8_t<sp/>spiffsWorkBuffer[SPIFFS_LOGICAL_PAGE_SIZE<sp/>*<sp/>2];</highlight></codeline>
<codeline><highlight class="normal">static<sp/>uint8_t<sp/>spiffsFileDescriptorCache[SPIFFS_FILE_DESCRIPTOR_SIZE<sp/>*<sp/>4];</highlight></codeline>
<codeline><highlight class="normal">static<sp/>uint8_t<sp/>spiffsReadWriteCache[SPIFFS_LOGICAL_PAGE_SIZE<sp/>*<sp/>2];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">spiffs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fs;</highlight></codeline>
<codeline><highlight class="normal">spiffs_config<sp/><sp/><sp/><sp/>fsConfig;</highlight></codeline>
<codeline><highlight class="normal">SPIFFSNVS_Object<sp/>spiffsnvs;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>=<sp/>SPIFFSNVS_config(&amp;spiffsnvs,<sp/>Board_NVSINTERNAL,<sp/>&amp;fs,<sp/>&amp;fsConfig,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SPIFFS_LOGICAL_BLOCK_SIZE,<sp/>SPIFFS_LOGICAL_PAGE_SIZE);</highlight></codeline>
<codeline><highlight class="normal"><sp/>if<sp/>(status<sp/>!=<sp/>SPIFFSNVS_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error<sp/>condition...</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>=<sp/>SPIFFS_mount(&amp;fs,<sp/>&amp;fsConfig,<sp/>spiffsWorkBuffer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spiffsFileDescriptorCache,<sp/>sizeof(spiffsFileDescriptorCache),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spiffsReadWriteCache,<sp/>sizeof(spiffsReadWriteCache),<sp/>NULL);</highlight></codeline>
</programlisting></para><para><heading level="2">Logical block and page size restrictions on CC13XX and CC26XX devices</heading>
</para><para>Flash memory on CC13XX and CC26XX devices is divided into rows of 128 or 256 bytes (refer to datasheet for exact size). These rows can support up to 83 write operations before suffering effects of row disturb in which data can be corrupted. Setting the logical page size very small or setting the logical block size too large can lead to many logical pages in a logical block. Normal use and updates to pages can cause more than 83 write operations on a logical block&apos;s index page (first page in the logical block). The following conditions must be followed to prevent exceeding the 83 write limit:</para><para><itemizedlist>
<listitem><para>Select a logical page size that is equal to or an integer multiple of the device&apos;s physical row size (i.e. 128 or 256). Next select a logical block size to ensure the amount of logical pages in a logical block does not exceed 32: (logicalBlockSize / logicalPageSize &lt;= 32).</para></listitem></itemizedlist>
</para><para>It is the user&apos;s responsibility to make sure the logical page size is equal to or an integer multiple of the physical row size. SPIFFSNVS_init() will verify and return <ref refid="group___s_p_i_f_f_s_n_v_s___s_t_a_t_u_s_1ga21872212b529e6a1157b6f3f4e579dbe" kindref="member">SPIFFSNVS_STATUS_INV_PAGE_SIZE</ref> if the amount of logical pages in a logical block is &gt; 32. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*!*****************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIFFSNVS.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>Module<sp/>to<sp/>enable<sp/>the<sp/>SPI<sp/>Flash<sp/>File<sp/>System<sp/>(SPIFFS)<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TI<sp/>NVS<sp/>driver</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>SPIFFSNVS<sp/>header<sp/>file<sp/>should<sp/>be<sp/>included<sp/>in<sp/>an<sp/>application<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;third_party/spiffs/SPIFFSNVS.h&gt;</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/>SPIFFSNVS<sp/>is<sp/>designed<sp/>to<sp/>provide<sp/>interface<sp/>functions<sp/>required<sp/>by<sp/>the<sp/>SPIFFS</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/>to<sp/>read/write/erase<sp/>NOR<sp/>flash<sp/>memory.<sp/><sp/>These<sp/>functions<sp/>are<sp/>implemented<sp/>using</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>TI<sp/>NVS<sp/>driver.<sp/><sp/>By<sp/>leveraging<sp/>the<sp/>NVS<sp/>driver,<sp/>application<sp/>code<sp/>using</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/>SPIFFS<sp/>is<sp/>not<sp/>tied<sp/>to<sp/>a<sp/>physical<sp/>memory<sp/>type<sp/>(like<sp/>SPI<sp/>flash).<sp/><sp/>The<sp/>NVS</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/>driver<sp/>abstracts<sp/>the<sp/>physical<sp/>memory<sp/>interface<sp/>so<sp/>SPIFFS<sp/>application<sp/>code</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/>can<sp/>run<sp/>on<sp/>any<sp/>NVS<sp/>driver<sp/>instance.<sp/><sp/>Changing<sp/>between<sp/>internal<sp/>flash<sp/>or</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/>external<sp/>SPI<sp/>flash<sp/>can<sp/>be<sp/>done<sp/>by<sp/>having<sp/>SPIFFS<sp/>use<sp/>a<sp/>different<sp/>NVS<sp/>driver</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/>instance.<sp/><sp/>SPIFFS<sp/>will<sp/>operate<sp/>within<sp/>the<sp/>memory<sp/>region<sp/>which<sp/>has<sp/>been</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/>allocated<sp/>for<sp/>the<sp/>NVS<sp/>driver<sp/>instance.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/>It<sp/>is<sp/>highly<sp/>recommended<sp/>that<sp/>you<sp/>read<sp/>SPIFFS<sp/>design<sp/>and<sp/>usage<sp/>documentation</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/>before<sp/>using<sp/>SPIFFS.<sp/><sp/>Documentation<sp/>available<sp/>here:</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>https://github.com/pellepl/spiffs</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Using<sp/>SPIFFS<sp/>and<sp/>SPIFFSNVS<sp/>#</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/>To<sp/>mount<sp/>a<sp/>SPIFFS<sp/>file<sp/>system<sp/>some<sp/>configuration<sp/>parameters<sp/>and<sp/>RAM<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/>provided<sp/>at<sp/>runtime<sp/>(all<sp/>sizes<sp/>in<sp/>bytes):</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>physical<sp/>block<sp/>size<sp/>(also<sp/>known<sp/>as<sp/>sector<sp/>size)</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>amount<sp/>of<sp/>memory<sp/>allocated<sp/>for<sp/>SPIFFS</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>logical<sp/>block<sp/>size</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>logical<sp/>page<sp/>size</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>A<sp/>RAM<sp/>work<sp/>buffer</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>A<sp/>RAM<sp/>file<sp/>descriptor<sp/>cache</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>A<sp/>RAM<sp/>read/write<sp/>cache</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/>NVS<sp/>drivers<sp/>are<sp/>aware<sp/>of<sp/>the<sp/>physical<sp/>block<sp/>size<sp/>and<sp/>the<sp/>amount<sp/>of<sp/>memory</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/>allocated<sp/>(values<sp/>are<sp/>set<sp/>in<sp/>driver<sp/>configuration;<sp/>see<sp/>board<sp/>files).<sp/><sp/>The</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/>logical<sp/>block<sp/>size<sp/>must<sp/>be<sp/>an<sp/>integer<sp/>multiple<sp/>of<sp/>the<sp/>physical<sp/>block<sp/>size</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/>(a.k.a.<sp/>sector<sp/>size):</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logicalBlockSize<sp/>=<sp/>n<sp/>*<sp/>physicalBlockSize</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>It<sp/>is<sp/>recommended<sp/>to<sp/>set<sp/>logical<sp/>block<sp/>size<sp/>equal<sp/>to<sp/>the<sp/>physical</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/>block<sp/>size<sp/>when<sp/>starting<sp/>with<sp/>SPIFFS.<sp/><sp/>This<sp/>can<sp/>be<sp/>changed<sp/>later<sp/>when</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/><sp/>optimizing<sp/>the<sp/>file<sp/>system<sp/>for<sp/>your<sp/>application.</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>logical<sp/>block<sp/>size<sp/>must<sp/>also<sp/>be<sp/>an<sp/>integer<sp/>multiple<sp/>of<sp/>the<sp/>logical<sp/>page</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/>size:<sp/><sp/>logicalBlockSize<sp/>=<sp/>i<sp/>*<sp/>logicalPageSize</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/>A<sp/>statically<sp/>allocated<sp/>RAM<sp/>work<sp/>buffer<sp/>must<sp/>be<sp/>provided.<sp/><sp/>This<sp/>buffer</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/>must<sp/>be<sp/>(2<sp/>*<sp/>logicalPageSize)<sp/>in<sp/>length.<sp/><sp/>A<sp/>statically<sp/>allocated<sp/>RAM</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/>file<sp/>descriptor<sp/>cache<sp/>must<sp/>also<sp/>be<sp/>provided.<sp/>File<sp/>descriptors<sp/>are<sp/>44<sp/>bytes</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/>for<sp/>the<sp/>default<sp/>SPIFFS<sp/>configuration.<sp/><sp/>The<sp/>cache<sp/>must<sp/>be<sp/>large<sp/>enough<sp/>to</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/>store<sp/>as<sp/>many<sp/>file<sp/>descriptors<sp/>as<sp/>desired.<sp/><sp/>Start<sp/>with<sp/>4<sp/>file<sp/>descriptors</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>modify<sp/>when<sp/>optimizing<sp/>for<sp/>your<sp/>application.<sp/><sp/>Finally,<sp/>SPIFFS<sp/>requires</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/>a<sp/>read/write<sp/>cache<sp/>be<sp/>provided.<sp/><sp/>Start<sp/>with<sp/>a<sp/>(2<sp/>*<sp/>logicalPageSize)<sp/>size</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/>cache;<sp/>this<sp/>can<sp/>be<sp/>increased<sp/>or<sp/>reduced<sp/>later.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/>As<sp/>an<sp/>example<sp/>assume<sp/>that<sp/>we<sp/>want<sp/>to<sp/>use<sp/>SPIFFS<sp/>with<sp/>a<sp/>NVS<sp/>driver<sp/>instance</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/>that<sp/>has<sp/>128k<sp/>of<sp/>memory<sp/>and<sp/>the<sp/>the<sp/>physical<sp/>block<sp/>size<sp/>is<sp/>4096<sp/>bytes.<sp/>In</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/>this<sp/>case<sp/>the<sp/>logical<sp/>block<sp/>size<sp/>can<sp/>be<sp/>set<sp/>to<sp/>8192<sp/>bytes<sp/>(16<sp/>logical</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/>blocks).<sp/>Now<sp/>we<sp/>can<sp/>set<sp/>the<sp/>logical<sp/>page<sp/>size<sp/>to<sp/>256<sp/>bytes<sp/>(32<sp/>logical<sp/>pages</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/>per<sp/>logical<sp/>block).</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>SPIFFS<sp/>always<sp/>keeps<sp/>2<sp/>logical<sp/>blocks<sp/>free;<sp/>in<sp/>the<sp/>example<sp/>above<sp/>there</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/>would<sp/>only<sp/>be<sp/>14<sp/>logical<sp/>blocks<sp/>available<sp/>for<sp/>storage<sp/>(16k<sp/>is<sp/>unusable).<sp/>The</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/>logical<sp/>block<sp/>size<sp/>can<sp/>be<sp/>reduced<sp/>to<sp/>have<sp/>more<sp/>space<sp/>for<sp/>data.<sp/>The<sp/>logical</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/>block<sp/>size<sp/>and<sp/>logical<sp/>page<sp/>size<sp/>should<sp/>be<sp/>changed<sp/>to<sp/>optimize<sp/>the<sp/>file</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/>system<sp/>for<sp/>your<sp/>application.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/><sp/>Knowing<sp/>the<sp/>logical<sp/>block<sp/>and<sp/>logical<sp/>page<sp/>sizes<sp/>desired;<sp/>SPIFFSNVS_config()</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/>must<sp/>be<sp/>used<sp/>to<sp/>initialize<sp/>the<sp/>#spiffs_config<sp/>#spiffs<sp/>structures.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/>SPIFFSNVS_config()<sp/>requires<sp/>a<sp/>#SPIFFSNVS_Data<sp/>object<sp/>be<sp/>provided.<sp/><sp/>This</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/>object<sp/>is<sp/>used<sp/>by<sp/>SPIFFSNVS<sp/>when<sp/>reading/writing<sp/>to<sp/>flash<sp/>memory.<sp/><sp/>It<sp/>also</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/>stores<sp/>references<sp/>to<sp/>OS<sp/>objects<sp/>used<sp/>for<sp/>thread<sp/>safety.<sp/><sp/>Each<sp/>SPIFFS<sp/>file</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/>system<sp/>instance<sp/>must<sp/>have<sp/>it&apos;s<sp/>own<sp/>#SPIFFSNVS_Data<sp/>object<sp/>and<sp/>these<sp/>objects</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/><sp/>must<sp/>reside<sp/>in<sp/>persistent<sp/>memory<sp/>(not<sp/>on<sp/>a<sp/>task<sp/>stack<sp/>or<sp/>memory<sp/>lost<sp/>during</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/>low<sp/>power<sp/>modes).<sp/><sp/>The<sp/>#spiffs.user_data<sp/>field<sp/>is<sp/>used<sp/>to<sp/>store<sp/>a<sp/>pointer<sp/>to</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/>its<sp/>respective<sp/>#SPIFFSNVS_Data<sp/>object.<sp/><sp/>Users<sp/>must<sp/>not<sp/>change<sp/>#spiffs_config</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>#spiffs<sp/>structures<sp/>after<sp/>SPIFFSNVS_config()<sp/>has<sp/>been<sp/>called.</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/><sp/>#define<sp/>SPIFFS_LOGICAL_BLOCK_SIZE<sp/><sp/><sp/><sp/>(4096)</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/><sp/>#define<sp/>SPIFFS_LOGICAL_PAGE_SIZE<sp/><sp/><sp/><sp/><sp/>(128)</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/><sp/>#define<sp/>SPIFFS_FILE_DESCRIPTOR_SIZE<sp/><sp/>(44)</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>uint8_t<sp/>spiffsWorkBuffer[SPIFFS_LOGICAL_PAGE_SIZE<sp/>*<sp/>2];</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>uint8_t<sp/>spiffsFileDescriptorCache[SPIFFS_FILE_DESCRIPTOR_SIZE<sp/>*<sp/>4];</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>uint8_t<sp/>spiffsReadWriteCache[SPIFFS_LOGICAL_PAGE_SIZE<sp/>*<sp/>2];</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/>spiffs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fs;</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/>spiffs_config<sp/><sp/><sp/><sp/>fsConfig;</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/><sp/>SPIFFSNVS_Object<sp/>spiffsnvs;</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/><sp/>status<sp/>=<sp/>SPIFFSNVS_config(&amp;spiffsnvs,<sp/>Board_NVSINTERNAL,<sp/>&amp;fs,<sp/>&amp;fsConfig,</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>SPIFFS_LOGICAL_BLOCK_SIZE,<sp/>SPIFFS_LOGICAL_PAGE_SIZE);</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/><sp/><sp/>if<sp/>(status<sp/>!=<sp/>SPIFFSNVS_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error<sp/>condition...</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/><sp/>status<sp/>=<sp/>SPIFFS_mount(&amp;fs,<sp/>&amp;fsConfig,<sp/>spiffsWorkBuffer,</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>spiffsFileDescriptorCache,<sp/>sizeof(spiffsFileDescriptorCache),</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>spiffsReadWriteCache,<sp/>sizeof(spiffsReadWriteCache),<sp/>NULL);</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Logical<sp/>block<sp/>and<sp/>page<sp/>size<sp/>restrictions<sp/>on<sp/>CC13XX<sp/>and<sp/>CC26XX<sp/>devices<sp/>#</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>Flash<sp/>memory<sp/>on<sp/>CC13XX<sp/>and<sp/>CC26XX<sp/>devices<sp/>is<sp/>divided<sp/>into<sp/>rows<sp/>of<sp/>128<sp/>or</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>256<sp/>bytes<sp/>(refer<sp/>to<sp/>datasheet<sp/>for<sp/>exact<sp/>size).<sp/><sp/>These<sp/>rows<sp/>can<sp/>support<sp/>up<sp/>to</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>83<sp/>write<sp/>operations<sp/>before<sp/>suffering<sp/>effects<sp/>of<sp/>row<sp/>disturb<sp/>in<sp/>which<sp/>data</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>can<sp/>be<sp/>corrupted.<sp/><sp/>Setting<sp/>the<sp/>logical<sp/>page<sp/>size<sp/>very<sp/>small<sp/>or<sp/>setting</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>the<sp/>logical<sp/>block<sp/>size<sp/>too<sp/>large<sp/>can<sp/>lead<sp/>to<sp/>many<sp/>logical<sp/>pages<sp/>in<sp/>a<sp/>logical</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/>block.<sp/><sp/>Normal<sp/>use<sp/>and<sp/>updates<sp/>to<sp/>pages<sp/>can<sp/>cause<sp/>more<sp/>than<sp/>83<sp/>write</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/>operations<sp/>on<sp/>a<sp/>logical<sp/>block&apos;s<sp/>index<sp/>page<sp/>(first<sp/>page<sp/>in<sp/>the<sp/>logical<sp/>block).</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/>The<sp/>following<sp/>conditions<sp/>must<sp/>be<sp/>followed<sp/>to<sp/>prevent<sp/>exceeding<sp/>the<sp/>83<sp/>write</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/>limit:</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>Select<sp/>a<sp/>logical<sp/>page<sp/>size<sp/>that<sp/>is<sp/>equal<sp/>to<sp/>or<sp/>an<sp/>integer<sp/>multiple<sp/>of</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>the<sp/>device&apos;s<sp/>physical<sp/>row<sp/>size<sp/>(i.e.<sp/>128<sp/>or<sp/>256).<sp/><sp/>Next<sp/>select<sp/>a<sp/>logical</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>block<sp/>size<sp/>to<sp/>ensure<sp/>the<sp/>amount<sp/>of<sp/>logical<sp/>pages<sp/>in<sp/>a<sp/>logical<sp/>block</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>does<sp/>not<sp/>exceed<sp/>32:</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(logicalBlockSize<sp/>/<sp/>logicalPageSize<sp/>&lt;=<sp/>32).</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/>It<sp/>is<sp/>the<sp/>user&apos;s<sp/>responsibility<sp/>to<sp/>make<sp/>sure<sp/>the<sp/>logical<sp/>page<sp/>size<sp/>is<sp/>equal</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/>to<sp/>or<sp/>an<sp/>integer<sp/>multiple<sp/>of<sp/>the<sp/>physical<sp/>row<sp/>size.<sp/><sp/>SPIFFSNVS_init()<sp/>will</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>verify<sp/>and<sp/>return<sp/>#SPIFFSNVS_STATUS_INV_PAGE_SIZE<sp/>if<sp/>the<sp/>amount<sp/>of<sp/>logical</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>pages<sp/>in<sp/>a<sp/>logical<sp/>block<sp/>is<sp/>&gt;<sp/>32.</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*******************************************************************************</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>THIRD_PARTY_SPIFFS_SPIFFSNVS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>THIRD_PARTY_SPIFFS_SPIFFSNVS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;spiffs_config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="spiffs_8h" kindref="compound">spiffs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_n_v_s_8h" kindref="compound">ti/drivers/NVS.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ti/drivers/dpl/MutexP.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="group___s_p_i_f_f_s_n_v_s___s_t_a_t_u_s_1ga44e1652f2eb8528bf93adc77e3e013d6" refkind="member"><highlight class="preprocessor">#define<sp/>SPIFFSNVS_STATUS_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="group___s_p_i_f_f_s_n_v_s___s_t_a_t_u_s_1ga24d6594e8daac912958ef381ffd60763" refkind="member"><highlight class="preprocessor">#define<sp/>SPIFFSNVS_STATUS_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="group___s_p_i_f_f_s_n_v_s___s_t_a_t_u_s_1gaaed3fec880853b3df3ddc6f2bd171f86" refkind="member"><highlight class="preprocessor">#define<sp/>SPIFFSNVS_STATUS_INV_NVS_IDX<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="group___s_p_i_f_f_s_n_v_s___s_t_a_t_u_s_1ga7961506209d7c5a1dc791159d6c52a51" refkind="member"><highlight class="preprocessor">#define<sp/>SPIFFSNVS_STATUS_INV_BLOCK_SIZE<sp/><sp/><sp/><sp/>(-3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="group___s_p_i_f_f_s_n_v_s___s_t_a_t_u_s_1ga21872212b529e6a1157b6f3f4e579dbe" refkind="member"><highlight class="preprocessor">#define<sp/>SPIFFSNVS_STATUS_INV_PAGE_SIZE<sp/><sp/><sp/><sp/><sp/>(-4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="struct_s_p_i_f_f_s_n_v_s___lock__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_p_i_f_f_s_n_v_s___lock__" kindref="compound">SPIFFSNVS_Lock_</ref><sp/>{</highlight></codeline>
<codeline lineno="234" refid="struct_s_p_i_f_f_s_n_v_s___lock___1a80a8ba22db4613ab647b69a86dacf384" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>MutexP_Handle<sp/><sp/><ref refid="struct_s_p_i_f_f_s_n_v_s___lock___1a80a8ba22db4613ab647b69a86dacf384" kindref="member">mutex</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="235" refid="struct_s_p_i_f_f_s_n_v_s___lock___1a5e104ec48b7039a3ab0e1d501068d375" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_p_i_f_f_s_n_v_s___lock___1a5e104ec48b7039a3ab0e1d501068d375" kindref="member">keys</ref>[2];<sp/><sp/></highlight></codeline>
<codeline lineno="236" refid="struct_s_p_i_f_f_s_n_v_s___lock___1a289bb44a011b127b056b774cfe041c6e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>u32_t<sp/><ref refid="struct_s_p_i_f_f_s_n_v_s___lock___1a289bb44a011b127b056b774cfe041c6e" kindref="member">count</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="237"><highlight class="normal">}<sp/><ref refid="_s_p_i_f_f_s_n_v_s_8h_1a7cf3f1a05b93a1ab7433d42bb2bafc4f" kindref="member">SPIFFSNVS_Lock</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="struct_s_p_i_f_f_s_n_v_s___data__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_p_i_f_f_s_n_v_s___data__" kindref="compound">SPIFFSNVS_Data_</ref><sp/>{</highlight></codeline>
<codeline lineno="248" refid="struct_s_p_i_f_f_s_n_v_s___data___1ace8ae79c7417bbb05f93cd4aad152aac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_n_v_s___config__" kindref="compound">NVS_Handle</ref><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_p_i_f_f_s_n_v_s___data___1ace8ae79c7417bbb05f93cd4aad152aac" kindref="member">nvsHandle</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="249" refid="struct_s_p_i_f_f_s_n_v_s___data___1ac00631ca202002964fdaef5d00d899cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_p_i_f_f_s_n_v_s___lock__" kindref="compound">SPIFFSNVS_Lock</ref><sp/><ref refid="struct_s_p_i_f_f_s_n_v_s___data___1ac00631ca202002964fdaef5d00d899cd" kindref="member">lock</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="250"><highlight class="normal">}<sp/><ref refid="_s_p_i_f_f_s_n_v_s_8h_1a4c955949f2948a593abf50454c1dada9" kindref="member">SPIFFSNVS_Data</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal">s32_t<sp/><ref refid="_s_p_i_f_f_s_n_v_s_8h_1ad200c9f25659779041c17893b0155a48" kindref="member">SPIFFSNVS_config</ref>(<ref refid="struct_s_p_i_f_f_s_n_v_s___data__" kindref="compound">SPIFFSNVS_Data</ref><sp/>*spiffsnvsData,</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>nvsIndex,<sp/><ref refid="structspiffs__t" kindref="compound">spiffs</ref><sp/>*fs,<sp/><ref refid="structspiffs__config" kindref="compound">spiffs_config</ref><sp/>*fsConfig,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>logicalBlockSize,<sp/>u32_t<sp/>logicalPageSize);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>THIRD_PARTY_SPIFFS_SPIFFSNVS_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_msp432/source/third_party/spiffs/SPIFFSNVS.h"/>
  </compounddef>
</doxygen>
