<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_struct_ring_buf_8h" kind="file" language="C++">
    <compoundname>StructRingBuf.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="301">
        <label>stdbool.h</label>
      </node>
      <node id="299">
        <label>stdint.h</label>
      </node>
      <node id="300">
        <label>stddef.h</label>
      </node>
      <node id="302">
        <label>string.h</label>
      </node>
      <node id="298">
        <label>StructRingBuf.h</label>
        <link refid="_struct_ring_buf_8h"/>
        <childnode refid="299" relation="include">
        </childnode>
        <childnode refid="300" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="302" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_struct_ring_buf___object" prot="public">StructRingBuf_Object</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_struct_ring_buf_8h_1ac490114d419bf92b434255510cf3a912" prot="public" static="no">
        <type>struct <ref refid="struct_struct_ring_buf___object" kindref="compound">StructRingBuf_Object</ref> *</type>
        <definition>typedef  struct StructRingBuf_Object * StructRingBuf_Handle</definition>
        <argsstring></argsstring>
        <name>StructRingBuf_Handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/utils/StructRingBuf.h" line="53" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_struct_ring_buf_8h_1ade9017b95cd31b001b0fe4d8bb24f9c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StructRingBuf_construct</definition>
        <argsstring>(StructRingBuf_Handle object, void *bufPtr, size_t bufSize, size_t structSize)</argsstring>
        <name>StructRingBuf_construct</name>
        <param>
          <type><ref refid="_struct_ring_buf_8h_1ac490114d419bf92b434255510cf3a912" kindref="member">StructRingBuf_Handle</ref></type>
          <declname>object</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>bufPtr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufSize</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>structSize</declname>
        </param>
        <briefdescription>
<para>Initialize circular buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a StructRingBuf Object that contains the member variables to operate a circular buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data buffer to be used for the circular buffer. The buffer is NOT stored in <ref refid="struct_struct_ring_buf___object" kindref="compound">StructRingBuf_Object</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of bufPtr in number of structures</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of a member structure in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/utils/StructRingBuf.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_struct_ring_buf_8h_1afa628881f67542c519f34cfaf6ee143a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int StructRingBuf_get</definition>
        <argsstring>(StructRingBuf_Handle object, void *data)</argsstring>
        <name>StructRingBuf_get</name>
        <param>
          <type><ref refid="_struct_ring_buf_8h_1ac490114d419bf92b434255510cf3a912" kindref="member">StructRingBuf_Handle</ref></type>
          <declname>object</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Get an unsigned char from the end of the circular buffer and remove it. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a StructRingBuf Object that contains the member variables to operate a circular buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an unsigned char to be filled with the data from the front of the circular buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unsigned chars on the buffer after taking it out of the circular buffer. If it returns -1, the circular buffer was already empty and data is invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/utils/StructRingBuf.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_struct_ring_buf_8h_1a653022bda871039e93904e6ba138d783" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int StructRingBuf_getCount</definition>
        <argsstring>(StructRingBuf_Handle object)</argsstring>
        <name>StructRingBuf_getCount</name>
        <param>
          <type><ref refid="_struct_ring_buf_8h_1ac490114d419bf92b434255510cf3a912" kindref="member">StructRingBuf_Handle</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Get the number of unsigned chars currently stored on the circular buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a StructRingBuf Object that contains the member variables to operate a circular buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unsigned chars on the circular buffer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/utils/StructRingBuf.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_struct_ring_buf_8h_1a67c3ee808816a1ef65eb50647b0fb1db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool StructRingBuf_isFull</definition>
        <argsstring>(StructRingBuf_Handle object)</argsstring>
        <name>StructRingBuf_isFull</name>
        <param>
          <type><ref refid="_struct_ring_buf_8h_1ac490114d419bf92b434255510cf3a912" kindref="member">StructRingBuf_Handle</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Function to determine if the circular buffer is full or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a StructRingBuf Object that contains the member variables to operate a circular buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if circular buffer is full, else false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/utils/StructRingBuf.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_struct_ring_buf_8h_1aca0676eb69149740fa3c2bd078dfe11e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int StructRingBuf_getMaxCount</definition>
        <argsstring>(StructRingBuf_Handle object)</argsstring>
        <name>StructRingBuf_getMaxCount</name>
        <param>
          <type><ref refid="_struct_ring_buf_8h_1ac490114d419bf92b434255510cf3a912" kindref="member">StructRingBuf_Handle</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>A high-water mark indicating the largest number of unsigned chars stored on the circular buffer since it was constructed. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Get the largest number of unsigned chars that were at one point in the circular buffer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/utils/StructRingBuf.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_struct_ring_buf_8h_1a48be75cc90d0c872eb69f393a92f8098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int StructRingBuf_peek</definition>
        <argsstring>(StructRingBuf_Handle object, void **data)</argsstring>
        <name>StructRingBuf_peek</name>
        <param>
          <type><ref refid="_struct_ring_buf_8h_1ac490114d419bf92b434255510cf3a912" kindref="member">StructRingBuf_Handle</ref></type>
          <declname>object</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Get an unsigned char from the end of the circular buffer without remove it. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a StructRingBuf Object that contains the member variables to operate a circular buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an unsigned char to be filled with the data from the front of the circular buffer. This function does not remove the data from the circular buffer. Do not evaluate data if the count returned is equal to 0.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unsigned chars on the circular buffer. If the number != 0, then data will contain the unsigned char at the end of the circular buffer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/utils/StructRingBuf.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_struct_ring_buf_8h_1a75382329a423c45fde1896cdff4e1bb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int StructRingBuf_put</definition>
        <argsstring>(StructRingBuf_Handle object, const void *data)</argsstring>
        <name>StructRingBuf_put</name>
        <param>
          <type><ref refid="_struct_ring_buf_8h_1ac490114d419bf92b434255510cf3a912" kindref="member">StructRingBuf_Handle</ref></type>
          <declname>object</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Put an unsigned char into the end of the circular buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a StructRingBuf Object that contains the member variables to operate a circular buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>unsigned char to be placed at the end of the circular buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unsigned chars on the buffer after it was added, or -1 if it&apos;s already full. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/utils/StructRingBuf.h" line="146" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018-2019,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_utils_StructRingBuf__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_utils_StructRingBuf__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="struct_struct_ring_buf___object" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="46" refid="struct_struct_ring_buf___object_1a1db83b2e7a88a53a2cb355d180beb0c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*<ref refid="struct_struct_ring_buf___object_1a1db83b2e7a88a53a2cb355d180beb0c5" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="47" refid="struct_struct_ring_buf___object_1abb5595bacd1bb52da76284f86aa0d116" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_struct_ring_buf___object_1abb5595bacd1bb52da76284f86aa0d116" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="48" refid="struct_struct_ring_buf___object_1a2b5d78695cdedba62893fc5b338e1cd4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_struct_ring_buf___object_1a2b5d78695cdedba62893fc5b338e1cd4" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="49" refid="struct_struct_ring_buf___object_1af6082ec6aa542584962e48e6640c572f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_struct_ring_buf___object_1af6082ec6aa542584962e48e6640c572f" kindref="member">head</ref>;</highlight></codeline>
<codeline lineno="50" refid="struct_struct_ring_buf___object_1ac3af0daaebc471b35756f5c76be7f39f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_struct_ring_buf___object_1ac3af0daaebc471b35756f5c76be7f39f" kindref="member">tail</ref>;</highlight></codeline>
<codeline lineno="51" refid="struct_struct_ring_buf___object_1ae17248391989a32060d09d79fd0326e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_struct_ring_buf___object_1ae17248391989a32060d09d79fd0326e6" kindref="member">maxCount</ref>;</highlight></codeline>
<codeline lineno="52" refid="struct_struct_ring_buf___object_1a10f1fe86461da8a8e84e64b3236a03d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_struct_ring_buf___object_1a10f1fe86461da8a8e84e64b3236a03d6" kindref="member">structSize</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}<sp/><ref refid="struct_struct_ring_buf___object" kindref="compound">StructRingBuf_Object</ref>,<sp/>*<ref refid="_struct_ring_buf_8h_1ac490114d419bf92b434255510cf3a912" kindref="member">StructRingBuf_Handle</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_struct_ring_buf_8h_1ade9017b95cd31b001b0fe4d8bb24f9c5" kindref="member">StructRingBuf_construct</ref>(StructRingBuf_Handle<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*bufPtr,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bufSize,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>structSize);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_struct_ring_buf_8h_1afa628881f67542c519f34cfaf6ee143a" kindref="member">StructRingBuf_get</ref>(StructRingBuf_Handle<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_struct_ring_buf_8h_1a653022bda871039e93904e6ba138d783" kindref="member">StructRingBuf_getCount</ref>(StructRingBuf_Handle<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_struct_ring_buf_8h_1a67c3ee808816a1ef65eb50647b0fb1db" kindref="member">StructRingBuf_isFull</ref>(StructRingBuf_Handle<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_struct_ring_buf_8h_1aca0676eb69149740fa3c2bd078dfe11e" kindref="member">StructRingBuf_getMaxCount</ref>(StructRingBuf_Handle<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_struct_ring_buf_8h_1a48be75cc90d0c872eb69f393a92f8098" kindref="member">StructRingBuf_peek</ref>(StructRingBuf_Handle<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**data);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_struct_ring_buf_8h_1a75382329a423c45fde1896cdff4e1bb7" kindref="member">StructRingBuf_put</ref>(StructRingBuf_Handle<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_utils_StructRingBuf__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_msp432/source/ti/drivers/utils/StructRingBuf.h"/>
  </compounddef>
</doxygen>
