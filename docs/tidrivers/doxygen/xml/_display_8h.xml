<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_display_8h" kind="file" language="C++">
    <compoundname>Display.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdarg.h</includes>
    <includedby refid="_display_ext_8h" local="no">DisplayExt.h</includedby>
    <includedby refid="_display_host_8h" local="no">DisplayHost.h</includedby>
    <includedby refid="_display_sharp_8h" local="no">DisplaySharp.h</includedby>
    <includedby refid="_display_uart_8h" local="no">DisplayUart.h</includedby>
    <incdepgraph>
      <node id="57">
        <label>stdarg.h</label>
      </node>
      <node id="56">
        <label>stdint.h</label>
      </node>
      <node id="55">
        <label>Display.h</label>
        <link refid="_display_8h"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="60">
        <label>DisplayHost.h</label>
        <link refid="_display_host_8h"/>
      </node>
      <node id="61">
        <label>DisplaySharp.h</label>
        <link refid="_display_sharp_8h"/>
      </node>
      <node id="62">
        <label>DisplayUart.h</label>
        <link refid="_display_uart_8h"/>
      </node>
      <node id="58">
        <label>Display.h</label>
        <link refid="_display_8h"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>DisplayExt.h</label>
        <link refid="_display_ext_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_display___params" prot="public">Display_Params</innerclass>
    <innerclass refid="struct_display___fxn_table" prot="public">Display_FxnTable</innerclass>
    <innerclass refid="struct_display___config" prot="public">Display_Config</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___d_i_s_p_l_a_y___t_y_p_e_s_1ga18e865923359fab7d26c09dc169caf37" prot="public" static="no">
        <name>Display_Type_ANY</name>
        <initializer>0xFFFFFFFF</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Display types that can be used when opening the display interface, to open only specific types of interfaces. Can be combined with bitwise-OR.All available displays </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="210" column="9" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_i_s_p_l_a_y___t_y_p_e_s_1ga09ec0c157c10708af6c2fec8e5b26805" prot="public" static="no">
        <name>Display_Type_INVALID</name>
        <initializer>0x00000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invalid type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="211" column="9" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_i_s_p_l_a_y___t_y_p_e_s_1ga9b8f62fe443d3a584f598392d233f38c" prot="public" static="no">
        <name>Display_Type_LCD</name>
        <initializer>0x80000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All LCD displays </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="212" column="9" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_i_s_p_l_a_y___t_y_p_e_s_1ga0257ac5b377a67eb525400e4c2a4f0d0" prot="public" static="no">
        <name>Display_Type_UART</name>
        <initializer>0x40000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All UART virtual displays </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="213" column="9" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_i_s_p_l_a_y___t_y_p_e_s_1gaaf8a10cc8b8de9d38f144d44f968b1fc" prot="public" static="no">
        <name>Display_Type_LOG</name>
        <initializer>0x20000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All xdc.runtime.Log displays </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="214" column="9" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_i_s_p_l_a_y___t_y_p_e_s_1gae19f6c6b10d4e3d491819fb02ae4c865" prot="public" static="no">
        <name>Display_Type_ITM</name>
        <initializer>0x10000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All ARM ITM displays </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="215" column="9" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_i_s_p_l_a_y___t_y_p_e_s_1ga159af3b59e8fa662fc153a0307fd1817" prot="public" static="no">
        <name>Display_Type_HOST</name>
        <initializer>0x08000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All displays using Host </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="216" column="9" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_i_s_p_l_a_y___t_y_p_e_s_1gabdee477121870fb7102a9a572c5cdc9d" prot="public" static="no">
        <name>Display_Type_ANSI</name>
        <initializer>0x04000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All displays accepting ANSI </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="217" column="9" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_i_s_p_l_a_y___t_y_p_e_s_1ga498ae390d2feea643ec3f23533859f35" prot="public" static="no">
        <name>Display_Type_GRLIB</name>
        <initializer>0x00100000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All displays using GrLib </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="218" column="9" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_display_8h_1a61eb3c7b2406cb61825a0924b066d1ec" prot="public" static="no">
        <name>Display_MAXINDEX</name>
        <initializer>15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Max allowed displays. Any index value above this is a meta-type index. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="222" column="9" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_i_s_p_l_a_y___c_o_n_t_r_o_l_1ga99c2401cd11ea3b49e5e3e4ffac5c886" prot="public" static="no">
        <name>DISPLAY_CMD_RESERVED</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common Display_control command code reservation offset. Display driver implementations should offset command codes with DISPLAY_CMD_RESERVED growing positively</para><para>Example implementation specific command codes: <programlisting><codeline><highlight class="normal">#define<sp/>DISPLAYXYZ_CMD_COMMAND0<sp/><sp/><sp/><sp/><sp/>DISPLAY_CMD_RESERVED<sp/>+<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>DISPLAYXYZ_CMD_COMMAND1<sp/><sp/><sp/><sp/><sp/>DISPLAY_CMD_RESERVED<sp/>+<sp/>1</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="241" column="9" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_i_s_p_l_a_y___c_o_n_t_r_o_l_1gacb7031dd18c19e3ecb86d97cb7b17abb" prot="public" static="no">
        <name>DISPLAY_STATUS_RESERVED</name>
        <initializer>-32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common Display_control status code reservation offset. Display driver implementations should offset status codes with DISPLAY_STATUS_RESERVED growing negatively.</para><para>Example implementation specific status codes: <programlisting><codeline><highlight class="normal">#define<sp/>DISPLAYXYZ_STATUS_ERROR0<sp/><sp/><sp/><sp/>DISPLAY_STATUS_RESERVED<sp/>-<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>DISPLAYXYZ_STATUS_ERROR1<sp/><sp/><sp/><sp/>DISPLAY_STATUS_RESERVED<sp/>-<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>DISPLAYXYZ_STATUS_ERROR2<sp/><sp/><sp/><sp/>DISPLAY_STATUS_RESERVED<sp/>-<sp/>2</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="255" column="9" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_i_s_p_l_a_y___s_t_a_t_u_s_1ga4f6a4a10f24cf55bc13d1750e38bb946" prot="public" static="no">
        <name>DISPLAY_STATUS_SUCCESS</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Successful status code returned by <ref refid="_display_8h_1ad623d21e3c6d821bf6f4bdcfa05ec21f" kindref="member">Display_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_display_8h_1ad623d21e3c6d821bf6f4bdcfa05ec21f" kindref="member">Display_control()</ref> returns DISPLAY_STATUS_SUCCESS if the control code was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="270" column="9" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_i_s_p_l_a_y___s_t_a_t_u_s_1gaf91798b06dd95fce8063b7328420fab3" prot="public" static="no">
        <name>DISPLAY_STATUS_ERROR</name>
        <initializer>-1</initializer>
        <briefdescription>
<para>Generic error status code returned by <ref refid="_display_8h_1ad623d21e3c6d821bf6f4bdcfa05ec21f" kindref="member">Display_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_display_8h_1ad623d21e3c6d821bf6f4bdcfa05ec21f" kindref="member">Display_control()</ref> returns DISPLAY_STATUS_ERROR if the control code was not executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="278" column="9" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_i_s_p_l_a_y___s_t_a_t_u_s_1ga3e506301dbdad496a95e12c3b17efc6b" prot="public" static="no">
        <name>DISPLAY_STATUS_UNDEFINEDCMD</name>
        <initializer>-2</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_display_8h_1ad623d21e3c6d821bf6f4bdcfa05ec21f" kindref="member">Display_control()</ref> for undefined command codes. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_display_8h_1ad623d21e3c6d821bf6f4bdcfa05ec21f" kindref="member">Display_control()</ref> returns DISPLAY_STATUS_UNDEFINEDCMD if the control code is not recognized by the driver implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="287" column="9" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_i_s_p_l_a_y___c_m_d_1ga5be24ea4a3ddfd94efbb513d649ac88b" prot="public" static="no">
        <name>DISPLAY_CMD_TRANSPORT_CLOSE</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Command used by <ref refid="_display_8h_1ad623d21e3c6d821bf6f4bdcfa05ec21f" kindref="member">Display_control()</ref> to release its transport layer. </para>        </briefdescription>
        <detaileddescription>
<para>This command will cause Display implementations that are using a potentially shared transport mechanism to close the open handle.</para><para>Methods requiring this transport will meanwhile be discarded.</para><para>With this command <bold>arg</bold> is <emphasis>don&apos;t</emphasis> <emphasis>care</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="308" column="9" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_i_s_p_l_a_y___c_m_d_1gae12206be356c6b2ce885b5ada9b1854d" prot="public" static="no">
        <name>DISPLAY_CMD_TRANSPORT_OPEN</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Command used by <ref refid="_display_8h_1ad623d21e3c6d821bf6f4bdcfa05ec21f" kindref="member">Display_control()</ref> to resume control of its transport. </para>        </briefdescription>
        <detaileddescription>
<para>This command will cause Display implementations that are using a potentially shared transport mechanism to (re-)open the closed handle.</para><para>With this command <bold>arg</bold> is <emphasis>don&apos;t</emphasis> <emphasis>care</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="318" column="9" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_display_8h_1a4dacdea7e09ccbb7fc6464bb9af6c2cd" prot="public" static="no">
        <name>Display_clearLine</name>
        <param><defname>handle</defname></param>
        <param><defname>n</defname></param>
        <initializer><ref refid="_display_8h_1abae2ae910c2c533dbf11d24c656609d1" kindref="member">Display_clearLines</ref>(handle, n, 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="327" column="9" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_display_8h_1a1c085d5459020e806cafd71632e3d8ed" prot="public" static="no">
        <name>Display_isIndex</name>
        <param><defname>i</defname></param>
        <initializer>(i &lt;= <ref refid="_display_8h_1a61eb3c7b2406cb61825a0924b066d1ec" kindref="member">Display_MAXINDEX</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="328" column="9" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_display_8h_1ac0fca232ed955fd16bdf1d7b1b560a9e" prot="public" static="no">
        <name>Display_isMetaType</name>
        <param><defname>i</defname></param>
        <initializer>(i &gt; <ref refid="_display_8h_1a61eb3c7b2406cb61825a0924b066d1ec" kindref="member">Display_MAXINDEX</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="329" column="9" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_display_8h_1a587814881d96c49960b4ae2b73199fe3" prot="public" static="no">
        <name>Display_init</name>
        <param></param>
        <initializer><ref refid="_display_8h_1a1b97c9b7855ceba5ddd5a5aaaa15c907" kindref="member">Display_doInit</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes the Display driver. <simplesect kind="see"><para><ref refid="_display_8h_1a1b97c9b7855ceba5ddd5a5aaaa15c907" kindref="member">Display_doInit()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="334" column="11" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_display_8h_1a3aa87973a354d4fd6a2969f764e8afe6" prot="public" static="no">
        <name>Display_open</name>
        <param><defname>id</defname></param>
        <param><defname>params</defname></param>
        <initializer><ref refid="_display_8h_1a3e9f4eee43bc9b70a4944e1a3961f7d2" kindref="member">Display_doOpen</ref>(id, params)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Open selected display id or the first display of type. <simplesect kind="see"><para><ref refid="_display_8h_1a3e9f4eee43bc9b70a4944e1a3961f7d2" kindref="member">Display_doOpen()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="338" column="11" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_display_8h_1a4fb2982f52995a80194fbb107883a183" prot="public" static="no">
        <name>Display_Params_init</name>
        <param><defname>params</defname></param>
        <initializer><ref refid="_display_8h_1aff22833ae1cdccbbde3a57e82f85896c" kindref="member">Display_doParamsInit</ref>(params)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize default parameters. <simplesect kind="see"><para><ref refid="_display_8h_1aff22833ae1cdccbbde3a57e82f85896c" kindref="member">Display_doParamsInit()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="342" column="11" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="342" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_display_8h_1ab5a031704e2a1a9525d2c1a92346f842" prot="public" static="no">
        <name>Display_clear</name>
        <param><defname>handle</defname></param>
        <initializer><ref refid="_display_8h_1a68955bb81b0db818bf2688695dca1e4a" kindref="member">Display_doClear</ref>(handle)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear display <simplesect kind="see"><para><ref refid="_display_8h_1a68955bb81b0db818bf2688695dca1e4a" kindref="member">Display_doClear()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="346" column="11" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_display_8h_1abae2ae910c2c533dbf11d24c656609d1" prot="public" static="no">
        <name>Display_clearLines</name>
        <param><defname>handle</defname></param>
        <param><defname>fromLine</defname></param>
        <param><defname>toLine</defname></param>
        <initializer><ref refid="_display_8h_1a443fc3167f9ce70bebf9e016443c6383" kindref="member">Display_doClearLines</ref>(handle, fromLine, toLine)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear lines in display <simplesect kind="see"><para><ref refid="_display_8h_1a443fc3167f9ce70bebf9e016443c6383" kindref="member">Display_doClearLines()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="350" column="11" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_display_8h_1a371873a0f96f2e895bf92af7e586b244" prot="public" static="no">
        <name>Display_printf</name>
        <initializer><ref refid="_display_8h_1a65c7953ed84513f8ebc8b57183056b6f" kindref="member">Display_doPrintf</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output string fmt with variable arguments to display <simplesect kind="see"><para><ref refid="_display_8h_1a65c7953ed84513f8ebc8b57183056b6f" kindref="member">Display_doPrintf()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="354" column="11" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_display_8h_1acd3685718132aa56f51827b28cab9717" prot="public" static="no">
        <name>Display_print0</name>
        <param><defname>handle</defname></param>
        <param><defname>line</defname></param>
        <param><defname>col</defname></param>
        <param><defname>fmt</defname></param>
        <initializer><ref refid="_display_8h_1a371873a0f96f2e895bf92af7e586b244" kindref="member">Display_printf</ref>(handle, line, col, fmt)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output string fmt with 0 arguments to display <simplesect kind="see"><para><ref refid="_display_8h_1a65c7953ed84513f8ebc8b57183056b6f" kindref="member">Display_doPrintf()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="357" column="11" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_display_8h_1a32faeb481b205f15a47fe8a57b15050c" prot="public" static="no">
        <name>Display_print1</name>
        <param><defname>handle</defname></param>
        <param><defname>line</defname></param>
        <param><defname>col</defname></param>
        <param><defname>fmt</defname></param>
        <param><defname>a0</defname></param>
        <initializer><ref refid="_display_8h_1a371873a0f96f2e895bf92af7e586b244" kindref="member">Display_printf</ref>(handle, line, col, fmt, a0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output string fmt with 1 argument to display <simplesect kind="see"><para><ref refid="_display_8h_1a65c7953ed84513f8ebc8b57183056b6f" kindref="member">Display_doPrintf()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="361" column="11" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_display_8h_1a38c04b221312d6810860cc798c5bd87a" prot="public" static="no">
        <name>Display_print2</name>
        <param><defname>handle</defname></param>
        <param><defname>line</defname></param>
        <param><defname>col</defname></param>
        <param><defname>fmt</defname></param>
        <param><defname>a0</defname></param>
        <param><defname>a1</defname></param>
        <initializer><ref refid="_display_8h_1a371873a0f96f2e895bf92af7e586b244" kindref="member">Display_printf</ref>(handle, line, col, fmt, a0, a1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output string fmt with 2 arguments to display <simplesect kind="see"><para><ref refid="_display_8h_1a65c7953ed84513f8ebc8b57183056b6f" kindref="member">Display_doPrintf()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="365" column="11" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_display_8h_1ac4666e03680fc5c36ba2d186fce9f8f1" prot="public" static="no">
        <name>Display_print3</name>
        <param><defname>handle</defname></param>
        <param><defname>line</defname></param>
        <param><defname>col</defname></param>
        <param><defname>fmt</defname></param>
        <param><defname>a0</defname></param>
        <param><defname>a1</defname></param>
        <param><defname>a2</defname></param>
        <initializer><ref refid="_display_8h_1a371873a0f96f2e895bf92af7e586b244" kindref="member">Display_printf</ref>(handle, line, col, fmt, a0, a1, a2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output string fmt with 3 arguments to display <simplesect kind="see"><para><ref refid="_display_8h_1a65c7953ed84513f8ebc8b57183056b6f" kindref="member">Display_doPrintf()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="369" column="11" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_display_8h_1a346f79ffd49fb4b049812cff58e1c55b" prot="public" static="no">
        <name>Display_print4</name>
        <param><defname>handle</defname></param>
        <param><defname>line</defname></param>
        <param><defname>col</defname></param>
        <param><defname>fmt</defname></param>
        <param><defname>a0</defname></param>
        <param><defname>a1</defname></param>
        <param><defname>a2</defname></param>
        <param><defname>a3</defname></param>
        <initializer><ref refid="_display_8h_1a371873a0f96f2e895bf92af7e586b244" kindref="member">Display_printf</ref>(handle, line, col, fmt, a0, a1, a2, a3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output string fmt with 4 arguments to display <simplesect kind="see"><para><ref refid="_display_8h_1a65c7953ed84513f8ebc8b57183056b6f" kindref="member">Display_doPrintf()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="373" column="11" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_display_8h_1a9c5ad419aa15ab0f127aec0e81a4706a" prot="public" static="no">
        <name>Display_print5</name>
        <param><defname>handle</defname></param>
        <param><defname>line</defname></param>
        <param><defname>col</defname></param>
        <param><defname>fmt</defname></param>
        <param><defname>a0</defname></param>
        <param><defname>a1</defname></param>
        <param><defname>a2</defname></param>
        <param><defname>a3</defname></param>
        <param><defname>a4</defname></param>
        <initializer><ref refid="_display_8h_1a371873a0f96f2e895bf92af7e586b244" kindref="member">Display_printf</ref>(handle, line, col, fmt, a0, a1, a2, a3, a4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output string fmt with 5 arguments to display <simplesect kind="see"><para><ref refid="_display_8h_1a65c7953ed84513f8ebc8b57183056b6f" kindref="member">Display_doPrintf()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="377" column="11" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_display_8h_1a16a3d662df61924feff0eb34e5439794" prot="public" static="no">
        <name>Display_getType</name>
        <param><defname>handle</defname></param>
        <initializer><ref refid="_display_8h_1a2746bc2b6ed341867e8434ed79dfd4b6" kindref="member">Display_doGetType</ref>(handle)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get type of display </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="381" column="11" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_display_8h_1ad623d21e3c6d821bf6f4bdcfa05ec21f" prot="public" static="no">
        <name>Display_control</name>
        <param><defname>handle</defname></param>
        <param><defname>cmd</defname></param>
        <param><defname>arg</defname></param>
        <initializer><ref refid="_display_8h_1a330f4fa1032c03e41d3efee191b9670b" kindref="member">Display_doControl</ref>(handle, cmd, arg)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Control a specific Display driver <simplesect kind="see"><para><ref refid="_display_8h_1a330f4fa1032c03e41d3efee191b9670b" kindref="member">Display_doControl()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="385" column="11" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_display_8h_1aea13e4e023f2b8020bed2e888cf98599" prot="public" static="no">
        <name>Display_close</name>
        <param><defname>handle</defname></param>
        <initializer><ref refid="_display_8h_1add67d9c5e921786ec12d8029fe6096d1" kindref="member">Display_doClose</ref>(handle)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Close display <simplesect kind="see"><para><ref refid="_display_8h_1add67d9c5e921786ec12d8029fe6096d1" kindref="member">Display_doClose()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="389" column="11" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="389" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_display_8h_1a3d9ab99875c344491227a76f1d47e377" prot="public" static="no">
        <name>Display_LineClearMode</name>
        <enumvalue id="_display_8h_1a3d9ab99875c344491227a76f1d47e377a8f60ab659badd77a0591a5357cfe5f54" prot="public">
          <name>DISPLAY_CLEAR_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Do not clear anything before writing </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_display_8h_1a3d9ab99875c344491227a76f1d47e377aabdeba4f8c5781eaff441a3778e6cc74" prot="public">
          <name>DISPLAY_CLEAR_LEFT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clear pixels to left of text on the line </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_display_8h_1a3d9ab99875c344491227a76f1d47e377affc02447ea45e2c3db516a7b211b3b91" prot="public">
          <name>DISPLAY_CLEAR_RIGHT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clear pixels to right of text on the line </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_display_8h_1a3d9ab99875c344491227a76f1d47e377a14588c1117513fc430c964428f62484e" prot="public">
          <name>DISPLAY_CLEAR_BOTH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clear pixels on both sides of text </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>How to treat existing elements on a line when writing text. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="428" column="1" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="427" bodyend="433"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_display_8h_1a045a26811755aabf1886d982c49e54ab" prot="public" static="no">
        <type>struct <ref refid="struct_display___config" kindref="compound">Display_Config</ref> *</type>
        <definition>typedef struct Display_Config* Display_Handle</definition>
        <argsstring></argsstring>
        <name>Display_Handle</name>
        <briefdescription>
<para>A handle for specific Display implementations. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="416" column="1" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_display_8h_1a119c5ae929dff42a62b7ca51a3cad7ef" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Display_initFxn) (Display_Handle handle)</definition>
        <argsstring>)(Display_Handle handle)</argsstring>
        <name>Display_initFxn</name>
        <briefdescription>
<para>A function pointer to a specific implementation of <ref refid="_display_8h_1a119c5ae929dff42a62b7ca51a3cad7ef" kindref="member">Display_initFxn()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="422" column="1" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_display_8h_1af2fe59ceb3d8c9276018f1ef46e4251c" prot="public" static="no">
        <type>enum <ref refid="_display_8h_1a3d9ab99875c344491227a76f1d47e377" kindref="member">Display_LineClearMode</ref></type>
        <definition>typedef enum Display_LineClearMode  Display_LineClearMode</definition>
        <argsstring></argsstring>
        <name>Display_LineClearMode</name>
        <briefdescription>
<para>How to treat existing elements on a line when writing text. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="433" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_display_8h_1a6b9502df6569d4ba369c01b50c7cdb9f" prot="public" static="no">
        <type>struct <ref refid="struct_display___params" kindref="compound">Display_Params</ref></type>
        <definition>typedef struct Display_Params  Display_Params</definition>
        <argsstring></argsstring>
        <name>Display_Params</name>
        <briefdescription>
<para>Display Parameters. </para>        </briefdescription>
        <detaileddescription>
<para>Display parameters are used with the <ref refid="_display_8h_1a3aa87973a354d4fd6a2969f764e8afe6" kindref="member">Display_open()</ref> call. Default values for these parameters are set using <ref refid="_display_8h_1a4fb2982f52995a80194fbb107883a183" kindref="member">Display_Params_init()</ref>.</para><para><simplesect kind="see"><para><ref refid="_display_8h_1a4fb2982f52995a80194fbb107883a183" kindref="member">Display_Params_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="446" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_display_8h_1a3119ce57fb115a68a37d7ec274cb0001" prot="public" static="no">
        <type><ref refid="_display_8h_1a045a26811755aabf1886d982c49e54ab" kindref="member">Display_Handle</ref>(*</type>
        <definition>typedef Display_Handle(* Display_openFxn) (Display_Handle handle, Display_Params *params)</definition>
        <argsstring>)(Display_Handle handle, Display_Params *params)</argsstring>
        <name>Display_openFxn</name>
        <briefdescription>
<para>A function pointer to a specific implementation of <ref refid="_display_8h_1a3aa87973a354d4fd6a2969f764e8afe6" kindref="member">Display_open()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="452" column="1" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_display_8h_1af09f13daab765e83adfac09551e3ee51" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Display_clearFxn) (Display_Handle handle)</definition>
        <argsstring>)(Display_Handle handle)</argsstring>
        <name>Display_clearFxn</name>
        <briefdescription>
<para>A function pointer to a specific implementation of <ref refid="_display_8h_1ab5a031704e2a1a9525d2c1a92346f842" kindref="member">Display_clear()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="458" column="1" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_display_8h_1a8350bd25609f51433e21b502ed50f63a" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Display_clearLinesFxn) (Display_Handle handle, uint8_t fromLine, uint8_t toLine)</definition>
        <argsstring>)(Display_Handle handle, uint8_t fromLine, uint8_t toLine)</argsstring>
        <name>Display_clearLinesFxn</name>
        <briefdescription>
<para>A function pointer to a specific implementation of <ref refid="_display_8h_1abae2ae910c2c533dbf11d24c656609d1" kindref="member">Display_clearLines()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="464" column="1" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_display_8h_1a88a2ad12bc551e22c61e8f1649baf1dd" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Display_vprintfFxn) (Display_Handle handle, uint8_t line, uint8_t column, char *fmt, va_list va)</definition>
        <argsstring>)(Display_Handle handle, uint8_t line, uint8_t column, char *fmt, va_list va)</argsstring>
        <name>Display_vprintfFxn</name>
        <briefdescription>
<para>A function pointer to a specific implementation of Display_vprintf(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="472" column="1" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="472" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_display_8h_1ade8c953094781efff0f10ee0696a984f" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Display_closeFxn) (Display_Handle)</definition>
        <argsstring>)(Display_Handle)</argsstring>
        <name>Display_closeFxn</name>
        <briefdescription>
<para>A function pointer to a specific implementation of <ref refid="_display_8h_1aea13e4e023f2b8020bed2e888cf98599" kindref="member">Display_close()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="482" column="1" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="482" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_display_8h_1a67b559ffeebd829633512c4381858cc1" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* Display_controlFxn) (Display_Handle handle, unsigned int cmd, void *arg)</definition>
        <argsstring>)(Display_Handle handle, unsigned int cmd, void *arg)</argsstring>
        <name>Display_controlFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_display_8h_1ad623d21e3c6d821bf6f4bdcfa05ec21f" kindref="member">Display_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="488" column="1" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="488" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_display_8h_1a2800d49b89aa7e3d9a2ec758d60358f1" prot="public" static="no">
        <type>unsigned int(*</type>
        <definition>typedef unsigned int(* Display_getTypeFxn) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>Display_getTypeFxn</name>
        <briefdescription>
<para>A function pointer to a specific implementation of <ref refid="_display_8h_1a16a3d662df61924feff0eb34e5439794" kindref="member">Display_getType()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="495" column="1" bodyfile="exports/tidrivers_msp432/source/ti/display/Display.h" bodystart="495" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_display_8h_1abdb33c07acce5b6e5affae6725331399" prot="public" static="no">
        <type>struct <ref refid="struct_display___fxn_table" kindref="compound">Display_FxnTable</ref></type>
        <definition>typedef struct Display_FxnTable  Display_FxnTable</definition>
        <argsstring></argsstring>
        <name>Display_FxnTable</name>
        <briefdescription>
<para>The definition of a Display function table that contains the required set of functions to control a specific Display driver implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="512" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_display_8h_1a154de9b84d3b0d30daa9d729d65a6d5c" prot="public" static="no">
        <type>struct <ref refid="struct_display___config" kindref="compound">Display_Config</ref></type>
        <definition>typedef struct Display_Config  Display_Config</definition>
        <argsstring></argsstring>
        <name>Display_Config</name>
        <briefdescription>
<para>Display Global configuration. </para>        </briefdescription>
        <detaileddescription>
<para>The <ref refid="struct_display___config" kindref="compound">Display_Config</ref> structure contains a set of pointers used to characterize the Display interface implementation.</para><para>This structure needs to be defined before calling <ref refid="_display_8h_1a3aa87973a354d4fd6a2969f764e8afe6" kindref="member">Display_open()</ref> and it must not be changed thereafter.</para><para><simplesect kind="see"><para><ref refid="_display_8h_1a587814881d96c49960b4ae2b73199fe3" kindref="member">Display_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="535" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_display_8h_1a3e9f4eee43bc9b70a4944e1a3961f7d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_display_8h_1a045a26811755aabf1886d982c49e54ab" kindref="member">Display_Handle</ref></type>
        <definition>Display_Handle Display_doOpen</definition>
        <argsstring>(uint32_t id, Display_Params *params)</argsstring>
        <name>Display_doOpen</name>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="struct_display___params" kindref="compound">Display_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Initialize all the selected Display implementations. </para>        </briefdescription>
        <detaileddescription>
<para>The index parameter can be an index in the global Display_config array, or a meta-type signifying which types of display to open.</para><para>The different allowed values in addition to actual index are:<itemizedlist>
<listitem><para>Display_Type_ANY open and use the first available display</para></listitem><listitem><para>Display_Type_HOST open and use HOST type displays</para></listitem><listitem><para>Display_Type_LCD open and use LCD type displays</para></listitem><listitem><para>Display_Type_UART open and use UART type displays</para></listitem><listitem><para>Display_Type_LOG open and use xdc.runtime.Log type displays</para></listitem><listitem><para>Display_ITM open and use ARM ITM output type displays</para></listitem><listitem><para>Display_Type_GRLIB open and use GrLib capable displays It is possible to combine types: Display_Type_UART | Display_Type_LCD</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>Only one display is opened. If the type matches more than one, only the first one found in the Display_config array is opened.</para></simplesect>
<simplesect kind="pre"><para><ref refid="_display_8h_1a587814881d96c49960b4ae2b73199fe3" kindref="member">Display_init()</ref> has been called</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>- Index of Display in Display_config array, or alternatively the type(s) of displays to open </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>- display parameters</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Display_Handle of opened Display or NULL.</para></simplesect>
<simplesect kind="see"><para><ref refid="_display_8h_1a1b97c9b7855ceba5ddd5a5aaaa15c907" kindref="member">Display_doInit()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_display_8h_1add67d9c5e921786ec12d8029fe6096d1" kindref="member">Display_doClose()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="572" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_display_8h_1aff22833ae1cdccbbde3a57e82f85896c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Display_doParamsInit</definition>
        <argsstring>(Display_Params *params)</argsstring>
        <name>Display_doParamsInit</name>
        <param>
          <type><ref refid="struct_display___params" kindref="compound">Display_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Initializes parameter structure with default parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="581" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_display_8h_1a68955bb81b0db818bf2688695dca1e4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Display_doClear</definition>
        <argsstring>(Display_Handle handle)</argsstring>
        <name>Display_doClear</name>
        <param>
          <type><ref refid="_display_8h_1a045a26811755aabf1886d982c49e54ab" kindref="member">Display_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Calls the clear fxn of all opened Display implementations. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>- handle of display</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="590" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_display_8h_1a443fc3167f9ce70bebf9e016443c6383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Display_doClearLines</definition>
        <argsstring>(Display_Handle handle, uint8_t fromLine, uint8_t toLine)</argsstring>
        <name>Display_doClearLines</name>
        <param>
          <type><ref refid="_display_8h_1a045a26811755aabf1886d982c49e54ab" kindref="member">Display_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>fromLine</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>toLine</declname>
        </param>
        <briefdescription>
<para>Calls the clearLines fxn of all opened Display implementations. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>- handle of display </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromLine</parametername>
</parameternamelist>
<parameterdescription>
<para>- line index (0 .. ) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>toLine</parametername>
</parameternamelist>
<parameterdescription>
<para>- line index (0 .. )</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="601" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_display_8h_1a65c7953ed84513f8ebc8b57183056b6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Display_doPrintf</definition>
        <argsstring>(Display_Handle handle, uint8_t line, uint8_t column, char *fmt,...)</argsstring>
        <name>Display_doPrintf</name>
        <param>
          <type><ref refid="_display_8h_1a045a26811755aabf1886d982c49e54ab" kindref="member">Display_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>column</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Calls the output function of all opened Display implementations. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>- handle of display </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>- line index (0..) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>- column index (0..) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>- format string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>- optional arguments</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="614" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_display_8h_1add67d9c5e921786ec12d8029fe6096d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Display_doClose</definition>
        <argsstring>(Display_Handle handle)</argsstring>
        <name>Display_doClose</name>
        <param>
          <type><ref refid="_display_8h_1a045a26811755aabf1886d982c49e54ab" kindref="member">Display_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Closes selected Display implementations. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="622" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_display_8h_1a2746bc2b6ed341867e8434ed79dfd4b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t Display_doGetType</definition>
        <argsstring>(Display_Handle handle)</argsstring>
        <name>Display_doGetType</name>
        <param>
          <type><ref refid="_display_8h_1a045a26811755aabf1886d982c49e54ab" kindref="member">Display_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Gets the type of display for the handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group___d_i_s_p_l_a_y___t_y_p_e_s" kindref="compound">Meta-types of display implementations</ref></para></simplesect>
<simplesect kind="return"><para>uint32_t representing Display_Type_Xxxx </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="630" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_display_8h_1a330f4fa1032c03e41d3efee191b9670b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Display_doControl</definition>
        <argsstring>(Display_Handle handle, unsigned int cmd, void *arg)</argsstring>
        <name>Display_doControl</name>
        <param>
          <type><ref refid="_display_8h_1a045a26811755aabf1886d982c49e54ab" kindref="member">Display_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Function performs implementation specific features on a given Display_Handle. </para>        </briefdescription>
        <detaileddescription>
<para>Commands for Display_control can originate from <ref refid="_display_8h" kindref="compound">Display.h</ref> or from implementation specific Display*.h (<emphasis><ref refid="_display_sharp_8h" kindref="compound">DisplaySharp.h</ref></emphasis>, <emphasis><ref refid="_display_uart_8h" kindref="compound">DisplayUart.h</ref></emphasis>, etc.. ) files. While commands from <ref refid="_display_8h" kindref="compound">Display.h</ref> are API portable across driver implementations, not all implementations may support all these commands. Conversely, commands from driver implementation specific Display*.h files add unique driver capabilities but are not API portable across all Display driver implementations.</para><para>Commands supported by <ref refid="_display_8h" kindref="compound">Display.h</ref> follow a DISPLAY_CMD_&lt;cmd&gt; naming convention.<linebreak/>
 Commands supported by Display*.h follow a DISPLAY*_CMD_&lt;cmd&gt; naming convention.<linebreak/>
 Each control command defines <bold>arg</bold> differently. The types of <bold>arg</bold> are documented with each command.</para><para>See <ref refid="group___d_i_s_p_l_a_y___c_m_d" kindref="compound">Display_control command codes</ref> for command codes.</para><para>See <ref refid="group___d_i_s_p_l_a_y___s_t_a_t_u_s" kindref="compound">Display_control return status codes</ref> for status codes.</para><para><simplesect kind="pre"><para><ref refid="_display_8h_1a3aa87973a354d4fd6a2969f764e8afe6" kindref="member">Display_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A Display handle returned from Display()</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="_display_8h" kindref="compound">Display.h</ref> or Display*.h commands.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional R/W (read/write) command argument accompanied with cmd</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Implementation specific return codes. Negative values indicate unsuccessful operations. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="667" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_display_8h_1a1b97c9b7855ceba5ddd5a5aaaa15c907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Display_doInit</definition>
        <argsstring>(void)</argsstring>
        <name>Display_doInit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to initializes the Display driver. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The Display_config structure must exist and be persistent before this function can be called. This function must also be called before any other Display driver APIs. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/display/Display.h" line="676" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Generic interface for text output. </para>    </briefdescription>
    <detaileddescription>
<para>============================================================================</para><para><heading level="1">Driver include</heading>
</para><para>The display header file should be included in an application as follows: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/display/Display.h&gt;</highlight></codeline>
</programlisting></para><para><heading level="1">Operation</heading>
</para><para>The Display middleware-driver in TI-RTOS is designed to abstract operations and considerations specific to given output method.</para><para>The APIs in this driver serve as an interface to a typical TI-RTOS application. The specific peripheral implementations are responsible to create all the SYS/BIOS specific primitives to allow for thread-safe operation. The application initializes the Display driver by calling <ref refid="_display_8h_1a587814881d96c49960b4ae2b73199fe3" kindref="member">Display_init()</ref> and is then ready to open a Display by calling <ref refid="_display_8h_1a3aa87973a354d4fd6a2969f764e8afe6" kindref="member">Display_open()</ref> and passing in a Display parameters data structure.</para><para><simplesect kind="note"><para>Display APIs can only be called from task context.</para></simplesect>
<simplesect kind="note"><para>All Display statements will be removed and no display operations will take place if the symbol <emphasis>Display_DISABLE_ALL</emphasis> is defined globally, or before <emphasis><ref refid="_display_8h" kindref="compound">Display.h</ref></emphasis> is included.</para></simplesect>
<heading level="2">Opening the driver</heading>
</para><para>Because the Display driver serves as an abstraction, it is possible to specify the <emphasis>type</emphasis> of Display implementations that should be opened, as well as alternatively the config-array index value like with other TI-RTOS drivers.</para><para>Optionally, if no particular parameters are desired, the pointer to params can be replaced with NULL.</para><para><programlisting><codeline><highlight class="normal">Display_Handle<sp/><sp/><sp/><sp/>handle;</highlight></codeline>
<codeline><highlight class="normal">Display_Params<sp/><sp/><sp/><sp/>params;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Display_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>Display_open(someConfigIndexValue,<sp/>&amp;params);</highlight></codeline>
<codeline><highlight class="normal">//Display_open(Display_Type_HOST,<sp/>&amp;params);</highlight></codeline>
<codeline><highlight class="normal">//Display_open(Display_Type_ANY,<sp/>&amp;params);</highlight></codeline>
<codeline><highlight class="normal">//Display_open(Display_Type_UART,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal">//Display_open(Display_Type_UART<sp/>|<sp/>Display_Type_LCD,<sp/>&amp;params);</highlight></codeline>
</programlisting></para><para><heading level="2">Outputting data</heading>
</para><para>After the Display interface is opened, the user can call any of the APIs <programlisting><codeline><highlight class="normal">Display_clear(handle);</highlight></codeline>
<codeline><highlight class="normal">Display_clearLines(handle,<sp/>0,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">Display_printf(handle,<sp/>1,<sp/>0,<sp/>&quot;How<sp/>are<sp/>you<sp/>%s?&quot;,<sp/>yourName);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Note<sp/>that<sp/>for<sp/>floating<sp/>point<sp/>support,<sp/>the<sp/>.cfg<sp/>file<sp/>must<sp/>have<sp/>a<sp/>line<sp/>like</highlight></codeline>
<codeline><highlight class="normal">//<sp/>System.extendedFormats<sp/>=<sp/>&quot;%$L%$S%$F%f&quot;;<sp/>//<sp/>Add<sp/>&apos;%f&apos;<sp/>support</highlight></codeline>
<codeline><highlight class="normal">Display_printf(handle,<sp/>3,<sp/>0,<sp/>&quot;Pi<sp/>is<sp/>%f&quot;,<sp/>3.1415);</highlight></codeline>
<codeline><highlight class="normal">Display_close(handle);</highlight></codeline>
</programlisting></para><para>It is also possible to prefer a graphical display if available. Perhaps most interesting for portable applications.</para><para><programlisting><codeline><highlight class="normal">Display_Handle<sp/><sp/><sp/><sp/>handle;</highlight></codeline>
<codeline><highlight class="normal">Display_Params<sp/><sp/><sp/><sp/>params;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Display_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>Display_open(Display_Type_LCD,<sp/>&amp;params);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(NULL<sp/>==<sp/>handle)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>handle<sp/>=<sp/>Display_open(Display_Type_UART,<sp/>&amp;params);</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>Display_printX can only be called from Task context, unless the only opened interfaces specifically allow calls from any context.</para></simplesect>
<heading level="1">Implementation</heading>
</para><para>This module serves as the main interface for TI-RTOS applications. Its purpose is to redirect the module&apos;s APIs to specific implementations which are specified using a pointer to a <ref refid="struct_display___fxn_table" kindref="compound">Display_FxnTable</ref>.</para><para>The Display interface module is joined (at link time) to a NULL-terminated array of <ref refid="struct_display___config" kindref="compound">Display_Config</ref> data structures named <emphasis>Display_config</emphasis>. <emphasis>Display_config</emphasis> is implemented in the application with each entry being an instance of a Display implementation. Each entry in <emphasis>Display_config</emphasis> contains a:<itemizedlist>
<listitem><para>(<ref refid="struct_display___fxn_table" kindref="compound">Display_FxnTable</ref> *) to a set of functions implementing an output channel</para></listitem><listitem><para>(void *) data object that is associated with the <ref refid="struct_display___fxn_table" kindref="compound">Display_FxnTable</ref></para></listitem><listitem><para>(void *) hardware attributes that are associated to the <ref refid="struct_display___fxn_table" kindref="compound">Display_FxnTable</ref></para></listitem></itemizedlist>
</para><para>In practical terms that means the <ref refid="struct_display___config" kindref="compound">Display_Config</ref> struct for each specific implementation equates to an instance of an abstract Display &apos;class&apos;, where the functions are always provided the a <ref refid="struct_display___config" kindref="compound">Display_Config</ref> struct pointer in the parameter list, in lieu of what in some languages is called <emphasis>this</emphasis> or <emphasis>self</emphasis>.</para><para>For example, Display_open is called, and Display.c iterates over the available <ref refid="struct_display___config" kindref="compound">Display_Config</ref>&apos;s in the external Display_config array. For each <emphasis>config</emphasis>, config-&gt;fxns-&gt;open is called, and &amp;config is provided for context.</para><para>Below is an example configuration to use the HOST display.</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/display/Display.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/display/DisplayHost.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#define<sp/>MAXPRINTLEN<sp/>1024</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">DisplayHost_Object<sp/>displayHostObject;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>char<sp/>displayBuf[MAXPRINTLEN];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>DisplayHost_HWAttrs<sp/>displayHostHWAttrs<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.strBuf<sp/>=<sp/>displayBuf,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.strBufLen<sp/>=<sp/>MAXPRINTLEN</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>Display_Config<sp/>Display_config[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.fxnTablePtr<sp/>=<sp/>&amp;DisplayHost_fxnTable,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.object<sp/>=<sp/>&amp;displayHostObject,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.hwAttrs<sp/>=<sp/>&amp;displayHostHWAttrs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>uint8_t<sp/>Display_count<sp/>=<sp/>sizeof(Display_config)<sp/>/<sp/>sizeof(Display_Config);</highlight></codeline>
</programlisting></para><para><heading level="1">Instrumentation</heading>
</para><para>The Display interface produces log statements if instrumentation is enabled.</para><para><table rows="3" cols="2"><row>
<entry thead="yes"><para>Diagnostics Mask </para></entry><entry thead="yes"><para>Log details  </para></entry></row>
<row>
<entry thead="no"><para>Diags_USER1 </para></entry><entry thead="no"><para>basic operations performed </para></entry></row>
<row>
<entry thead="no"><para>Diags_USER2 </para></entry><entry thead="no"><para>detailed operations performed </para></entry></row>
</table>
<heading level="1">Calling Context</heading>
</para><para>For most implementations of this interface it is only possible to call the APIs from Task or Main context because the implementations may rely on Semaphores or other RTOS services that do not work correctly or do not work at all in Hwi / Swi context.</para><para>Unless you know that the implementation is safe to use in Hwi/Swi, do not use this interface in other contexts than Main and Task. <hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016-2017,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor">#ifndef<sp/>ti_display_Display__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_display_Display__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Constants</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="210" refid="group___d_i_s_p_l_a_y___t_y_p_e_s_1ga18e865923359fab7d26c09dc169caf37" refkind="member"><highlight class="preprocessor">#define<sp/>Display_Type_ANY<sp/><sp/><sp/><sp/><sp/><sp/>0xFFFFFFFF<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="211" refid="group___d_i_s_p_l_a_y___t_y_p_e_s_1ga09ec0c157c10708af6c2fec8e5b26805" refkind="member"><highlight class="preprocessor">#define<sp/>Display_Type_INVALID<sp/><sp/>0x00000000<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="212" refid="group___d_i_s_p_l_a_y___t_y_p_e_s_1ga9b8f62fe443d3a584f598392d233f38c" refkind="member"><highlight class="preprocessor">#define<sp/>Display_Type_LCD<sp/><sp/><sp/><sp/><sp/><sp/>0x80000000<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="213" refid="group___d_i_s_p_l_a_y___t_y_p_e_s_1ga0257ac5b377a67eb525400e4c2a4f0d0" refkind="member"><highlight class="preprocessor">#define<sp/>Display_Type_UART<sp/><sp/><sp/><sp/><sp/>0x40000000<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="214" refid="group___d_i_s_p_l_a_y___t_y_p_e_s_1gaaf8a10cc8b8de9d38f144d44f968b1fc" refkind="member"><highlight class="preprocessor">#define<sp/>Display_Type_LOG<sp/><sp/><sp/><sp/><sp/><sp/>0x20000000<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="215" refid="group___d_i_s_p_l_a_y___t_y_p_e_s_1gae19f6c6b10d4e3d491819fb02ae4c865" refkind="member"><highlight class="preprocessor">#define<sp/>Display_Type_ITM<sp/><sp/><sp/><sp/><sp/><sp/>0x10000000<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="216" refid="group___d_i_s_p_l_a_y___t_y_p_e_s_1ga159af3b59e8fa662fc153a0307fd1817" refkind="member"><highlight class="preprocessor">#define<sp/>Display_Type_HOST<sp/><sp/><sp/><sp/><sp/>0x08000000<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="217" refid="group___d_i_s_p_l_a_y___t_y_p_e_s_1gabdee477121870fb7102a9a572c5cdc9d" refkind="member"><highlight class="preprocessor">#define<sp/>Display_Type_ANSI<sp/><sp/><sp/><sp/><sp/>0x04000000<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="218" refid="group___d_i_s_p_l_a_y___t_y_p_e_s_1ga498ae390d2feea643ec3f23533859f35" refkind="member"><highlight class="preprocessor">#define<sp/>Display_Type_GRLIB<sp/><sp/><sp/><sp/>0x00100000<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="222" refid="_display_8h_1a61eb3c7b2406cb61825a0924b066d1ec" refkind="member"><highlight class="preprocessor">#define<sp/>Display_MAXINDEX<sp/><sp/><sp/><sp/>15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="group___d_i_s_p_l_a_y___c_o_n_t_r_o_l_1ga99c2401cd11ea3b49e5e3e4ffac5c886" refkind="member"><highlight class="preprocessor">#define<sp/>DISPLAY_CMD_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="group___d_i_s_p_l_a_y___c_o_n_t_r_o_l_1gacb7031dd18c19e3ecb86d97cb7b17abb" refkind="member"><highlight class="preprocessor">#define<sp/>DISPLAY_STATUS_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="group___d_i_s_p_l_a_y___s_t_a_t_u_s_1ga4f6a4a10f24cf55bc13d1750e38bb946" refkind="member"><highlight class="preprocessor">#define<sp/>DISPLAY_STATUS_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="group___d_i_s_p_l_a_y___s_t_a_t_u_s_1gaf91798b06dd95fce8063b7328420fab3" refkind="member"><highlight class="preprocessor">#define<sp/>DISPLAY_STATUS_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="287" refid="group___d_i_s_p_l_a_y___s_t_a_t_u_s_1ga3e506301dbdad496a95e12c3b17efc6b" refkind="member"><highlight class="preprocessor">#define<sp/>DISPLAY_STATUS_UNDEFINEDCMD<sp/><sp/><sp/>-2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="group___d_i_s_p_l_a_y___c_m_d_1ga5be24ea4a3ddfd94efbb513d649ac88b" refkind="member"><highlight class="preprocessor">#define<sp/>DISPLAY_CMD_TRANSPORT_CLOSE<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="group___d_i_s_p_l_a_y___c_m_d_1gae12206be356c6b2ce885b5ada9b1854d" refkind="member"><highlight class="preprocessor">#define<sp/>DISPLAY_CMD_TRANSPORT_OPEN<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="comment">/*<sp/>-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Macros</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="_display_8h_1a4dacdea7e09ccbb7fc6464bb9af6c2cd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Display_clearLine(handle,<sp/>n)<sp/><sp/><sp/><sp/>Display_clearLines(handle,<sp/>n,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="_display_8h_1a1c085d5459020e806cafd71632e3d8ed" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Display_isIndex(i)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(i<sp/>&lt;=<sp/>Display_MAXINDEX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="_display_8h_1ac0fca232ed955fd16bdf1d7b1b560a9e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Display_isMetaType(i)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(i<sp/>&gt;<sp/>Display_MAXINDEX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Display_DISABLE_ALL)<sp/>||<sp/>(!Display_DISABLE_ALL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="_display_8h_1a587814881d96c49960b4ae2b73199fe3" refkind="member"><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_init()<sp/>\</highlight></codeline>
<codeline lineno="335"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Display_doInit()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="338" refid="_display_8h_1a3aa87973a354d4fd6a2969f764e8afe6" refkind="member"><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_open(id,<sp/>params)<sp/>\</highlight></codeline>
<codeline lineno="339"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Display_doOpen(id,<sp/>params)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="_display_8h_1a4fb2982f52995a80194fbb107883a183" refkind="member"><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_Params_init(params)<sp/>\</highlight></codeline>
<codeline lineno="343"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Display_doParamsInit(params)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="_display_8h_1ab5a031704e2a1a9525d2c1a92346f842" refkind="member"><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_clear(handle)<sp/>\</highlight></codeline>
<codeline lineno="347"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Display_doClear(handle)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="_display_8h_1abae2ae910c2c533dbf11d24c656609d1" refkind="member"><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_clearLines(handle,<sp/>fromLine,<sp/>toLine)<sp/>\</highlight></codeline>
<codeline lineno="351"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Display_doClearLines(handle,<sp/>fromLine,<sp/>toLine)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="_display_8h_1a371873a0f96f2e895bf92af7e586b244" refkind="member"><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_printf<sp/>Display_doPrintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="357" refid="_display_8h_1acd3685718132aa56f51827b28cab9717" refkind="member"><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_print0(handle,<sp/>line,<sp/>col,<sp/>fmt)<sp/>\</highlight></codeline>
<codeline lineno="358"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Display_printf(handle,<sp/>line,<sp/>col,<sp/>fmt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="361" refid="_display_8h_1a32faeb481b205f15a47fe8a57b15050c" refkind="member"><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_print1(handle,<sp/>line,<sp/>col,<sp/>fmt,<sp/>a0)<sp/>\</highlight></codeline>
<codeline lineno="362"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Display_printf(handle,<sp/>line,<sp/>col,<sp/>fmt,<sp/>a0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="365" refid="_display_8h_1a38c04b221312d6810860cc798c5bd87a" refkind="member"><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_print2(handle,<sp/>line,<sp/>col,<sp/>fmt,<sp/>a0,<sp/>a1)<sp/>\</highlight></codeline>
<codeline lineno="366"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Display_printf(handle,<sp/>line,<sp/>col,<sp/>fmt,<sp/>a0,<sp/>a1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="369" refid="_display_8h_1ac4666e03680fc5c36ba2d186fce9f8f1" refkind="member"><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_print3(handle,<sp/>line,<sp/>col,<sp/>fmt,<sp/>a0,<sp/>a1,<sp/>a2)<sp/>\</highlight></codeline>
<codeline lineno="370"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Display_printf(handle,<sp/>line,<sp/>col,<sp/>fmt,<sp/>a0,<sp/>a1,<sp/>a2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="_display_8h_1a346f79ffd49fb4b049812cff58e1c55b" refkind="member"><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_print4(handle,<sp/>line,<sp/>col,<sp/>fmt,<sp/>a0,<sp/>a1,<sp/>a2,<sp/>a3)<sp/>\</highlight></codeline>
<codeline lineno="374"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Display_printf(handle,<sp/>line,<sp/>col,<sp/>fmt,<sp/>a0,<sp/>a1,<sp/>a2,<sp/>a3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="377" refid="_display_8h_1a9c5ad419aa15ab0f127aec0e81a4706a" refkind="member"><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_print5(handle,<sp/>line,<sp/>col,<sp/>fmt,<sp/>a0,<sp/>a1,<sp/>a2,<sp/>a3,<sp/>a4)<sp/>\</highlight></codeline>
<codeline lineno="378"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Display_printf(handle,<sp/>line,<sp/>col,<sp/>fmt,<sp/>a0,<sp/>a1,<sp/>a2,<sp/>a3,<sp/>a4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="381" refid="_display_8h_1a16a3d662df61924feff0eb34e5439794" refkind="member"><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_getType(handle)<sp/>\</highlight></codeline>
<codeline lineno="382"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Display_doGetType(handle)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="385" refid="_display_8h_1ad623d21e3c6d821bf6f4bdcfa05ec21f" refkind="member"><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_control(handle,<sp/>cmd,<sp/>arg)<sp/>\</highlight></codeline>
<codeline lineno="386"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Display_doControl(handle,<sp/>cmd,<sp/>arg)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="_display_8h_1aea13e4e023f2b8020bed2e888cf98599" refkind="member"><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_close(handle)<sp/>\</highlight></codeline>
<codeline lineno="390"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Display_doClose(handle)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_init()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_open(id,<sp/>params)<sp/><sp/><sp/><sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_Params_init(params)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_clear(handle)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_clearLines(handle,<sp/>fromLine,<sp/>toLine)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_printf(handle,<sp/>line,<sp/>col,<sp/>fmt,<sp/>...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_print0(handle,<sp/>line,<sp/>col,<sp/>fmt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_print1(handle,<sp/>line,<sp/>col,<sp/>fmt,<sp/>a0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_print2(handle,<sp/>line,<sp/>col,<sp/>fmt,<sp/>a0,<sp/>a1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_print3(handle,<sp/>line,<sp/>col,<sp/>fmt,<sp/>a0,<sp/>a1,<sp/>a2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_print4(handle,<sp/>line,<sp/>col,<sp/>fmt,<sp/>a0,<sp/>a1,<sp/>a2,<sp/>a3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_print5(handle,<sp/>line,<sp/>col,<sp/>fmt,<sp/>a0,<sp/>a1,<sp/>a2,<sp/>a3,<sp/>a4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_getType(handle)<sp/>Display_Type_INVALID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_control(handle,<sp/>cmd,<sp/>arg)<sp/><sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Display_close(handle)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Typedefs</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="416" refid="_display_8h_1a045a26811755aabf1886d982c49e54ab" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_display___config" kindref="compound">Display_Config</ref><sp/>*<sp/><ref refid="_display_8h_1a045a26811755aabf1886d982c49e54ab" kindref="member">Display_Handle</ref>;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="_display_8h_1a119c5ae929dff42a62b7ca51a3cad7ef" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_display_8h_1a119c5ae929dff42a62b7ca51a3cad7ef" kindref="member">Display_initFxn</ref>)(Display_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="427" refid="_display_8h_1a3d9ab99875c344491227a76f1d47e377" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_display_8h_1a3d9ab99875c344491227a76f1d47e377" kindref="member">Display_LineClearMode</ref></highlight></codeline>
<codeline lineno="428"><highlight class="normal">{</highlight></codeline>
<codeline lineno="429" refid="_display_8h_1a3d9ab99875c344491227a76f1d47e377a8f60ab659badd77a0591a5357cfe5f54" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_display_8h_1a3d9ab99875c344491227a76f1d47e377a8f60ab659badd77a0591a5357cfe5f54" kindref="member">DISPLAY_CLEAR_NONE</ref><sp/>=<sp/>0,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="430" refid="_display_8h_1a3d9ab99875c344491227a76f1d47e377aabdeba4f8c5781eaff441a3778e6cc74" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_display_8h_1a3d9ab99875c344491227a76f1d47e377aabdeba4f8c5781eaff441a3778e6cc74" kindref="member">DISPLAY_CLEAR_LEFT</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="431" refid="_display_8h_1a3d9ab99875c344491227a76f1d47e377affc02447ea45e2c3db516a7b211b3b91" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_display_8h_1a3d9ab99875c344491227a76f1d47e377affc02447ea45e2c3db516a7b211b3b91" kindref="member">DISPLAY_CLEAR_RIGHT</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="432" refid="_display_8h_1a3d9ab99875c344491227a76f1d47e377a14588c1117513fc430c964428f62484e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_display_8h_1a3d9ab99875c344491227a76f1d47e377a14588c1117513fc430c964428f62484e" kindref="member">DISPLAY_CLEAR_BOTH</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="433"><highlight class="normal">}<sp/><ref refid="_display_8h_1a3d9ab99875c344491227a76f1d47e377" kindref="member">Display_LineClearMode</ref>;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="443" refid="struct_display___params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_display___params" kindref="compound">Display_Params</ref></highlight></codeline>
<codeline lineno="444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="445" refid="struct_display___params_1af442a90969018ed8073eef6451425f40" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Display_LineClearMode<sp/><ref refid="struct_display___params_1af442a90969018ed8073eef6451425f40" kindref="member">lineClearMode</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Default<sp/>clear<sp/>entire<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal">}<sp/><ref refid="_display_8h_1a6b9502df6569d4ba369c01b50c7cdb9f" kindref="member">Display_Params</ref>;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="_display_8h_1a3119ce57fb115a68a37d7ec274cb0001" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_display_8h_1a045a26811755aabf1886d982c49e54ab" kindref="member">Display_Handle</ref><sp/>(*<ref refid="_display_8h_1a3119ce57fb115a68a37d7ec274cb0001" kindref="member">Display_openFxn</ref>)(Display_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_display___params" kindref="compound">Display_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="458" refid="_display_8h_1af09f13daab765e83adfac09551e3ee51" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_display_8h_1af09f13daab765e83adfac09551e3ee51" kindref="member">Display_clearFxn</ref>)(Display_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="464" refid="_display_8h_1a8350bd25609f51433e21b502ed50f63a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_display_8h_1a8350bd25609f51433e21b502ed50f63a" kindref="member">Display_clearLinesFxn</ref>)(Display_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>fromLine,</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>toLine);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="472" refid="_display_8h_1a88a2ad12bc551e22c61e8f1649baf1dd" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_display_8h_1a88a2ad12bc551e22c61e8f1649baf1dd" kindref="member">Display_vprintfFxn</ref>)(Display_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>line,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>column,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_list<sp/>va);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="482" refid="_display_8h_1ade8c953094781efff0f10ee0696a984f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_display_8h_1ade8c953094781efff0f10ee0696a984f" kindref="member">Display_closeFxn</ref>)(<ref refid="_display_8h_1a045a26811755aabf1886d982c49e54ab" kindref="member">Display_Handle</ref>);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="488" refid="_display_8h_1a67b559ffeebd829633512c4381858cc1" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="_display_8h_1a67b559ffeebd829633512c4381858cc1" kindref="member">Display_controlFxn</ref>)(Display_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmd,</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="495" refid="_display_8h_1a2800d49b89aa7e3d9a2ec758d60358f1" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="_display_8h_1a2800d49b89aa7e3d9a2ec758d60358f1" kindref="member">Display_getTypeFxn</ref>)(void);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="502" refid="struct_display___fxn_table" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_display___fxn_table" kindref="compound">Display_FxnTable</ref></highlight></codeline>
<codeline lineno="503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="504" refid="struct_display___fxn_table_1a61477f2b3203c0441725caae4b208f2c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_display_8h_1a119c5ae929dff42a62b7ca51a3cad7ef" kindref="member">Display_initFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_display___fxn_table_1a61477f2b3203c0441725caae4b208f2c" kindref="member">initFxn</ref>;</highlight></codeline>
<codeline lineno="505" refid="struct_display___fxn_table_1a66473aac0719cf33382770aab5e51f7f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_display_8h_1a3119ce57fb115a68a37d7ec274cb0001" kindref="member">Display_openFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_display___fxn_table_1a66473aac0719cf33382770aab5e51f7f" kindref="member">openFxn</ref>;</highlight></codeline>
<codeline lineno="506" refid="struct_display___fxn_table_1ac2db3a7d155afd3bf0f83a125d3e1745" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_display_8h_1af09f13daab765e83adfac09551e3ee51" kindref="member">Display_clearFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_display___fxn_table_1ac2db3a7d155afd3bf0f83a125d3e1745" kindref="member">clearFxn</ref>;</highlight></codeline>
<codeline lineno="507" refid="struct_display___fxn_table_1a50c9960307eb7abdddeaea450f2b413d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_display_8h_1a8350bd25609f51433e21b502ed50f63a" kindref="member">Display_clearLinesFxn</ref><sp/><ref refid="struct_display___fxn_table_1a50c9960307eb7abdddeaea450f2b413d" kindref="member">clearLinesFxn</ref>;</highlight></codeline>
<codeline lineno="508" refid="struct_display___fxn_table_1a0a8010b19adec2c5f543e0b97f454a26" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_display_8h_1a88a2ad12bc551e22c61e8f1649baf1dd" kindref="member">Display_vprintfFxn</ref><sp/><sp/><sp/><sp/><ref refid="struct_display___fxn_table_1a0a8010b19adec2c5f543e0b97f454a26" kindref="member">vprintfFxn</ref>;</highlight></codeline>
<codeline lineno="509" refid="struct_display___fxn_table_1ab87c3ac60591e2f8276ca68e372a0eec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_display_8h_1ade8c953094781efff0f10ee0696a984f" kindref="member">Display_closeFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_display___fxn_table_1ab87c3ac60591e2f8276ca68e372a0eec" kindref="member">closeFxn</ref>;</highlight></codeline>
<codeline lineno="510" refid="struct_display___fxn_table_1a8fc3ff1c182a8c00cbbbbe182dacba8a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_display_8h_1a67b559ffeebd829633512c4381858cc1" kindref="member">Display_controlFxn</ref><sp/><sp/><sp/><sp/><ref refid="struct_display___fxn_table_1a8fc3ff1c182a8c00cbbbbe182dacba8a" kindref="member">controlFxn</ref>;</highlight></codeline>
<codeline lineno="511" refid="struct_display___fxn_table_1a77c12532ad85c855dd889b28d7d5a282" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_display_8h_1a2800d49b89aa7e3d9a2ec758d60358f1" kindref="member">Display_getTypeFxn</ref><sp/><sp/><sp/><sp/><ref refid="struct_display___fxn_table_1a77c12532ad85c855dd889b28d7d5a282" kindref="member">getTypeFxn</ref>;</highlight></codeline>
<codeline lineno="512"><highlight class="normal">}<sp/><ref refid="_display_8h_1abdb33c07acce5b6e5affae6725331399" kindref="member">Display_FxnTable</ref>;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="525" refid="struct_display___config" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_display___config" kindref="compound">Display_Config</ref></highlight></codeline>
<codeline lineno="526"><highlight class="normal">{</highlight></codeline>
<codeline lineno="528" refid="struct_display___config_1adce10e2738107a8b017ac8df3dbe1d73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_display___fxn_table" kindref="compound">Display_FxnTable</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_display___config_1adce10e2738107a8b017ac8df3dbe1d73" kindref="member">fxnTablePtr</ref>;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="531" refid="struct_display___config_1a3888ffcab482aacee937ec782f49110d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_display___config_1a3888ffcab482aacee937ec782f49110d" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="534" refid="struct_display___config_1a5fe62abb9c875eca79144e916082ecb8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_display___config_1a5fe62abb9c875eca79144e916082ecb8" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="535"><highlight class="normal">}<sp/><ref refid="_display_8h_1a154de9b84d3b0d30daa9d729d65a6d5c" kindref="member">Display_Config</ref>;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functions</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="572"><highlight class="normal">Display_Handle<sp/><sp/><ref refid="_display_8h_1a3e9f4eee43bc9b70a4944e1a3961f7d2" kindref="member">Display_doOpen</ref>(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="struct_display___params" kindref="compound">Display_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_display_8h_1aff22833ae1cdccbbde3a57e82f85896c" kindref="member">Display_doParamsInit</ref>(<ref refid="struct_display___params" kindref="compound">Display_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="_display_8h_1a68955bb81b0db818bf2688695dca1e4a" kindref="member">Display_doClear</ref>(Display_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="_display_8h_1a443fc3167f9ce70bebf9e016443c6383" kindref="member">Display_doClearLines</ref>(Display_Handle<sp/>handle,<sp/>uint8_t<sp/>fromLine,<sp/>uint8_t<sp/>toLine);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="_display_8h_1a65c7953ed84513f8ebc8b57183056b6f" kindref="member">Display_doPrintf</ref>(Display_Handle<sp/>handle,<sp/>uint8_t<sp/>line,<sp/>uint8_t<sp/>column,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="_display_8h_1add67d9c5e921786ec12d8029fe6096d1" kindref="member">Display_doClose</ref>(Display_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal">uint32_t<sp/><sp/><ref refid="_display_8h_1a2746bc2b6ed341867e8434ed79dfd4b6" kindref="member">Display_doGetType</ref>(Display_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="_display_8h_1a330f4fa1032c03e41d3efee191b9670b" kindref="member">Display_doControl</ref>(Display_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_display_8h_1a1b97c9b7855ceba5ddd5a5aaaa15c907" kindref="member">Display_doInit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//ti_display_Display__include</highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_msp432/source/ti/display/Display.h"/>
  </compounddef>
</doxygen>
