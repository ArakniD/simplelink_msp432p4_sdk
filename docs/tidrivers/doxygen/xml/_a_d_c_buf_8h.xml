<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_a_d_c_buf_8h" kind="file" language="C++">
    <compoundname>ADCBuf.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includedby refid="_a_d_c_buf_m_s_p432_8h" local="no">ADCBufMSP432.h</includedby>
    <incdepgraph>
      <node id="6">
        <label>stdint.h</label>
      </node>
      <node id="5">
        <label>ADCBuf.h</label>
        <link refid="_a_d_c_buf_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="8">
        <label>ADCBufMSP432.h</label>
        <link refid="_a_d_c_buf_m_s_p432_8h"/>
      </node>
      <node id="7">
        <label>ADCBuf.h</label>
        <link refid="_a_d_c_buf_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_a_d_c_buf___conversion__" prot="public">ADCBuf_Conversion_</innerclass>
    <innerclass refid="struct_a_d_c_buf___params__" prot="public">ADCBuf_Params_</innerclass>
    <innerclass refid="struct_a_d_c_buf___fxn_table__" prot="public">ADCBuf_FxnTable_</innerclass>
    <innerclass refid="struct_a_d_c_buf___config__" prot="public">ADCBuf_Config_</innerclass>
      <sectiondef kind="user-defined">
      <memberdef kind="define" id="group___a_d_c_b_u_f___c_o_n_t_r_o_l_1gac9c96db575dfaa6bcdfbd94cd875fbd4" prot="public" static="no">
        <name>ADCBuf_STATUS_SUCCESS</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>Success status code returned by: <ref refid="_a_d_c_buf_8h_1a87678933c235c0bfc1a26472ef873014" kindref="member">ADCBuf_control()</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Functions return ADCBuf_STATUS_SUCCESS if the call was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="181" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c_b_u_f___c_o_n_t_r_o_l_1ga78f1a705377b5bb15cc6c152f75846e2" prot="public" static="no">
        <name>ADCBuf_STATUS_ERROR</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>Generic error status code returned by <ref refid="_a_d_c_buf_8h_1a87678933c235c0bfc1a26472ef873014" kindref="member">ADCBuf_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_a_d_c_buf_8h_1a87678933c235c0bfc1a26472ef873014" kindref="member">ADCBuf_control()</ref> returns ADCBuf_STATUS_ERROR if the control code was not executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="189" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c_b_u_f___c_o_n_t_r_o_l_1ga5d552a66f63d36a8eaffd53c9deff2f2" prot="public" static="no">
        <name>ADCBuf_STATUS_UNDEFINEDCMD</name>
        <initializer>(-2)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_a_d_c_buf_8h_1a87678933c235c0bfc1a26472ef873014" kindref="member">ADCBuf_control()</ref> for undefined command codes. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_a_d_c_buf_8h_1a87678933c235c0bfc1a26472ef873014" kindref="member">ADCBuf_control()</ref> returns ADCBuf_STATUS_UNDEFINEDCMD if the control code is not recognized by the driver implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="198" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c_b_u_f___c_o_n_t_r_o_l_1ga14c9aea90d55fbbf215ab5a17a33573d" prot="public" static="no">
        <name>ADCBuf_STATUS_UNSUPPORTED</name>
        <initializer>(-3)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_a_d_c_buf_8h_1a636816201fdb596b748a0ce4d4bf6739" kindref="member">ADCBuf_adjustRawValues()</ref> if the function is not supported by a particular driver implementation. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_a_d_c_buf_8h_1a636816201fdb596b748a0ce4d4bf6739" kindref="member">ADCBuf_adjustRawValues()</ref> returns ADCBuf_STATUS_UNSUPPORTED if the function is not supported by the driver implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="207" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___a_d_c_b_u_f___c_o_n_t_r_o_l_1ga6d889e191027535ad318be0b9c3765d1" prot="public" static="no">
        <name>ADCBuf_CMD_RESERVED</name>
        <initializer>(32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common ADCBuf_control command code reservation offset. ADC driver implementations should offset command codes with ADCBuf_CMD_RESERVED growing positively</para><para>Example implementation specific command codes: <programlisting><codeline><highlight class="normal">#define<sp/>ADCXYZ_COMMAND0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADCBuf_CMD_RESERVED<sp/>+<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADCXYZ_COMMAND1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADCBuf_CMD_RESERVED<sp/>+<sp/>1</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="156" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c_b_u_f___c_o_n_t_r_o_l_1ga61f0abe91c78f6ab7003c53e513d4d3b" prot="public" static="no">
        <name>ADCBuf_STATUS_RESERVED</name>
        <initializer>(-32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common ADCBuf_control status code reservation offset. ADC driver implementations should offset status codes with ADCBuf_STATUS_RESERVED growing negatively.</para><para>Example implementation specific status codes: <programlisting><codeline><highlight class="normal">#define<sp/>ADCXYZ_STATUS_ERROR0<sp/><sp/><sp/><sp/>ADCBuf_STATUS_RESERVED<sp/>-<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADCXYZ_STATUS_ERROR1<sp/><sp/><sp/><sp/>ADCBuf_STATUS_RESERVED<sp/>-<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADCXYZ_STATUS_ERROR2<sp/><sp/><sp/><sp/>ADCBuf_STATUS_RESERVED<sp/>-<sp/>2</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="170" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_a_d_c_buf_8h_1ae5620b285f881fdecb49b75a73f1400f" prot="public" static="no">
        <name>ADCBuf_Recurrence_Mode_</name>
        <enumvalue id="_a_d_c_buf_8h_1ae5620b285f881fdecb49b75a73f1400fa1916212b661aa853b7a581e3e5dc35e2" prot="public">
          <name>ADCBuf_RECURRENCE_MODE_ONE_SHOT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The driver makes n measurements and returns or runs a callback function depending on the <ref refid="_a_d_c_buf_8h_1a3cc88be061075c8c609959d56adb30a4" kindref="member">ADCBuf_Return_Mode</ref> setting. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_d_c_buf_8h_1ae5620b285f881fdecb49b75a73f1400fac10945188f88ddadd4322c4e117d5b3c" prot="public">
          <name>ADCBuf_RECURRENCE_MODE_CONTINUOUS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The driver makes n measurements and then runs a callback function. This process happens until the application calls <ref refid="_a_d_c_buf_8h_1a88bb1333e07a3fee27926064058d5d1b" kindref="member">ADCBuf_ConvertCancelFxn()</ref>. This setting can only be used in <ref refid="_a_d_c_buf_8h_1aa9e88854960e236788f9775ff630a433a633b4b063b88d7c62e9e2513075a36a7" kindref="member">ADCBuf_RETURN_MODE_CALLBACK</ref>. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ADC trigger mode settings. </para>        </briefdescription>
        <detaileddescription>
<para>This enum defines if the driver should make n conversions and return or run indefinitely and run a callback function every n conversions. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="261" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="261" bodyend="273"/>
      </memberdef>
      <memberdef kind="enum" id="_a_d_c_buf_8h_1aa9e88854960e236788f9775ff630a433" prot="public" static="no">
        <name>ADCBuf_Return_Mode_</name>
        <enumvalue id="_a_d_c_buf_8h_1aa9e88854960e236788f9775ff630a433a5c6236b2f629b196d7874175be679399" prot="public">
          <name>ADCBuf_RETURN_MODE_BLOCKING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Uses a semaphore to block while ADC conversions are performed. Context of the call must be a Task.</para><para><simplesect kind="note"><para>Blocking return mode cannot be used in combination with <ref refid="_a_d_c_buf_8h_1ae5620b285f881fdecb49b75a73f1400fac10945188f88ddadd4322c4e117d5b3c" kindref="member">ADCBuf_RECURRENCE_MODE_CONTINUOUS</ref> </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_d_c_buf_8h_1aa9e88854960e236788f9775ff630a433a633b4b063b88d7c62e9e2513075a36a7" prot="public">
          <name>ADCBuf_RETURN_MODE_CALLBACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Non-blocking and will return immediately. When the conversion is finished the configured callback function is called. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ADC return mode settings. </para>        </briefdescription>
        <detaileddescription>
<para>This enum defines how the <ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref> function returns. It either blocks or returns immediately and calls a callback function when the provided buffer has been filled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="281" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="281" bodyend="295"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" prot="public" static="no">
        <type>struct <ref refid="struct_a_d_c_buf___config__" kindref="compound">ADCBuf_Config_</ref> *</type>
        <definition>typedef struct ADCBuf_Config_* ADCBuf_Handle</definition>
        <argsstring></argsstring>
        <name>ADCBuf_Handle</name>
        <briefdescription>
<para>A handle that is returned from an <ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref> call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="228" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1a24d253ddedcfd02729f910c32fe8b7c8" prot="public" static="no">
        <type>struct <ref refid="struct_a_d_c_buf___conversion__" kindref="compound">ADCBuf_Conversion_</ref></type>
        <definition>typedef struct ADCBuf_Conversion_  ADCBuf_Conversion</definition>
        <argsstring></argsstring>
        <name>ADCBuf_Conversion</name>
        <briefdescription>
<para>An <ref refid="_a_d_c_buf_8h_1a24d253ddedcfd02729f910c32fe8b7c8" kindref="member">ADCBuf_Conversion</ref> data structure is used with <ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref>. It indicates which channel to perform the ADC conversion on, how many conversions to make, and where to put them. The arg variable is an user-definable argument which gets passed to the <ref refid="_a_d_c_buf_8h_1a477c377c65f8de04aa67ff7eefa0a4cf" kindref="member">ADCBuf_Callback</ref> when the ADC driver is in <ref refid="_a_d_c_buf_8h_1aa9e88854960e236788f9775ff630a433a633b4b063b88d7c62e9e2513075a36a7" kindref="member">ADCBuf_RETURN_MODE_CALLBACK</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="245" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1a477c377c65f8de04aa67ff7eefa0a4cf" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ADCBuf_Callback) (ADCBuf_Handle handle, ADCBuf_Conversion *conversion, void *completedADCBuffer, uint32_t completedChannel)</definition>
        <argsstring>)(ADCBuf_Handle handle, ADCBuf_Conversion *conversion, void *completedADCBuffer, uint32_t completedChannel)</argsstring>
        <name>ADCBuf_Callback</name>
        <briefdescription>
<para>The definition of a callback function used by the ADC driver when used in <ref refid="_a_d_c_buf_8h_1aa9e88854960e236788f9775ff630a433a633b4b063b88d7c62e9e2513075a36a7" kindref="member">ADCBuf_RETURN_MODE_CALLBACK</ref>. It is called in a HWI or SWI context depending on the device specific implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="251" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1a0df315657027d8c4dc1582ee6438522b" prot="public" static="no">
        <type>enum <ref refid="_a_d_c_buf_8h_1ae5620b285f881fdecb49b75a73f1400f" kindref="member">ADCBuf_Recurrence_Mode_</ref></type>
        <definition>typedef enum ADCBuf_Recurrence_Mode_  ADCBuf_Recurrence_Mode</definition>
        <argsstring></argsstring>
        <name>ADCBuf_Recurrence_Mode</name>
        <briefdescription>
<para>ADC trigger mode settings. </para>        </briefdescription>
        <detaileddescription>
<para>This enum defines if the driver should make n conversions and return or run indefinitely and run a callback function every n conversions. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="273" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1a3cc88be061075c8c609959d56adb30a4" prot="public" static="no">
        <type>enum <ref refid="_a_d_c_buf_8h_1aa9e88854960e236788f9775ff630a433" kindref="member">ADCBuf_Return_Mode_</ref></type>
        <definition>typedef enum ADCBuf_Return_Mode_  ADCBuf_Return_Mode</definition>
        <argsstring></argsstring>
        <name>ADCBuf_Return_Mode</name>
        <briefdescription>
<para>ADC return mode settings. </para>        </briefdescription>
        <detaileddescription>
<para>This enum defines how the <ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref> function returns. It either blocks or returns immediately and calls a callback function when the provided buffer has been filled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="295" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1a127e649bfd0523552802c71e28a831c3" prot="public" static="no">
        <type>struct <ref refid="struct_a_d_c_buf___params__" kindref="compound">ADCBuf_Params_</ref></type>
        <definition>typedef struct ADCBuf_Params_  ADCBuf_Params</definition>
        <argsstring></argsstring>
        <name>ADCBuf_Params</name>
        <briefdescription>
<para>ADC Parameters. </para>        </briefdescription>
        <detaileddescription>
<para>ADC Parameters are used to with the <ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref> call. Default values for these parameters are set using <ref refid="_a_d_c_buf_8h_1ae6ddd34c34fd06cdede98fb01033cc47" kindref="member">ADCBuf_Params_init()</ref>.</para><para><simplesect kind="see"><para><ref refid="_a_d_c_buf_8h_1ae6ddd34c34fd06cdede98fb01033cc47" kindref="member">ADCBuf_Params_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="313" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1a94dfd94e96f6c7e15a9da57feddd60dc" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ADCBuf_CloseFxn) (ADCBuf_Handle handle)</definition>
        <argsstring>)(ADCBuf_Handle handle)</argsstring>
        <name>ADCBuf_CloseFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_buf_8h_1a04ab5fae5da8f9ff77ab3ae4974d8f7d" kindref="member">ADCBuf_close()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="319" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1ab8084b8145ded40824a3f98e58f9917d" prot="public" static="no">
        <type><ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref>(*</type>
        <definition>typedef ADCBuf_Handle(* ADCBuf_OpenFxn) (ADCBuf_Handle handle, const ADCBuf_Params *params)</definition>
        <argsstring>)(ADCBuf_Handle handle, const ADCBuf_Params *params)</argsstring>
        <name>ADCBuf_OpenFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="326" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1a24f4127b82e138fa18c8a54b4d914e05" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* ADCBuf_ControlFxn) (ADCBuf_Handle handle, uint_fast8_t cmd, void *arg)</definition>
        <argsstring>)(ADCBuf_Handle handle, uint_fast8_t cmd, void *arg)</argsstring>
        <name>ADCBuf_ControlFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_buf_8h_1a87678933c235c0bfc1a26472ef873014" kindref="member">ADCBuf_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="333" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1ab63b9bc37ab6f5fa2521c18b38c1881e" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ADCBuf_InitFxn) (ADCBuf_Handle handle)</definition>
        <argsstring>)(ADCBuf_Handle handle)</argsstring>
        <name>ADCBuf_InitFxn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="340" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1a57f40a75d77241e2fda473f0538e404d" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* ADCBuf_ConvertFxn) (ADCBuf_Handle handle, ADCBuf_Conversion conversions[], uint_fast8_t channelCount)</definition>
        <argsstring>)(ADCBuf_Handle handle, ADCBuf_Conversion conversions[], uint_fast8_t channelCount)</argsstring>
        <name>ADCBuf_ConvertFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="346" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1a88bb1333e07a3fee27926064058d5d1b" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* ADCBuf_ConvertCancelFxn) (ADCBuf_Handle handle)</definition>
        <argsstring>)(ADCBuf_Handle handle)</argsstring>
        <name>ADCBuf_ConvertCancelFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_buf_8h_1a5201c27bddf11b9f9ae902807bded40d" kindref="member">ADCBuf_convertCancel()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="353" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1aeff0bfa20eb16c3857b5123da136d320" prot="public" static="no">
        <type>uint_fast8_t(*</type>
        <definition>typedef uint_fast8_t(* ADCBuf_GetResolutionFxn) (ADCBuf_Handle handle)</definition>
        <argsstring>)(ADCBuf_Handle handle)</argsstring>
        <name>ADCBuf_GetResolutionFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of ADCBuf_GetResolution();. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="359" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1a4a19f2deb010ca0ba5bdcf5586a8cb28" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* ADCBuf_adjustRawValuesFxn) (ADCBuf_Handle handle, void *sampleBuffer, uint_fast16_t sampleCount, uint32_t adcChannel)</definition>
        <argsstring>)(ADCBuf_Handle handle, void *sampleBuffer, uint_fast16_t sampleCount, uint32_t adcChannel)</argsstring>
        <name>ADCBuf_adjustRawValuesFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_buf_8h_1a636816201fdb596b748a0ce4d4bf6739" kindref="member">ADCBuf_adjustRawValues()</ref>;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="365" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1a6ffaac5eaa1253f9b78bbaa6952e1162" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* ADCBuf_convertAdjustedToMicroVoltsFxn) (ADCBuf_Handle handle, uint32_t adcChannel, void *adjustedSampleBuffer, uint32_t outputMicroVoltBuffer[], uint_fast16_t sampleCount)</definition>
        <argsstring>)(ADCBuf_Handle handle, uint32_t adcChannel, void *adjustedSampleBuffer, uint32_t outputMicroVoltBuffer[], uint_fast16_t sampleCount)</argsstring>
        <name>ADCBuf_convertAdjustedToMicroVoltsFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_buf_8h_1a815c5b8d43cb93a46298c889dff1019c" kindref="member">ADCBuf_convertAdjustedToMicroVolts()</ref>;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="374" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1af15c19b29f04db7b3755c255187c1dc4" prot="public" static="no">
        <type>struct <ref refid="struct_a_d_c_buf___fxn_table__" kindref="compound">ADCBuf_FxnTable_</ref></type>
        <definition>typedef struct ADCBuf_FxnTable_  ADCBuf_FxnTable</definition>
        <argsstring></argsstring>
        <name>ADCBuf_FxnTable</name>
        <briefdescription>
<para>The definition of an ADCBuf function table that contains the required set of functions to control a specific ADC driver implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="404" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1a72d585edb37e7c4c53c278305a8df7d2" prot="public" static="no">
        <type>struct <ref refid="struct_a_d_c_buf___config__" kindref="compound">ADCBuf_Config_</ref></type>
        <definition>typedef struct ADCBuf_Config_  ADCBuf_Config</definition>
        <argsstring></argsstring>
        <name>ADCBuf_Config</name>
        <briefdescription>
<para>ADCBuf Global configuration. </para>        </briefdescription>
        <detaileddescription>
<para>The ADCBuf_Config structure contains a set of pointers used to characterise the ADC driver implementation.</para><para>This structure needs to be defined before calling <ref refid="_a_d_c_buf_8h_1a88a0ab421304465b22417a7adef6c0c2" kindref="member">ADCBuf_init()</ref> and it must not be changed thereafter.</para><para><simplesect kind="see"><para><ref refid="_a_d_c_buf_8h_1a88a0ab421304465b22417a7adef6c0c2" kindref="member">ADCBuf_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="426" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_a_d_c_buf_8h_1a04ab5fae5da8f9ff77ab3ae4974d8f7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADCBuf_close</definition>
        <argsstring>(ADCBuf_Handle handle)</argsstring>
        <name>ADCBuf_close</name>
        <param>
          <type><ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to close an ADC peripheral specified by the ADC handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref> has to be called first.</para></simplesect>
<simplesect kind="pre"><para>In ADCBuf_RECURRENCE_MODE_CONTINUOUS, the application must call <ref refid="_a_d_c_buf_8h_1a5201c27bddf11b9f9ae902807bded40d" kindref="member">ADCBuf_convertCancel()</ref> first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADCBuf handle returned from <ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_buf_8h_1a87678933c235c0bfc1a26472ef873014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t ADCBuf_control</definition>
        <argsstring>(ADCBuf_Handle handle, uint_fast16_t cmd, void *cmdArg)</argsstring>
        <name>ADCBuf_control</name>
        <param>
          <type><ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint_fast16_t</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cmdArg</declname>
        </param>
        <briefdescription>
<para>Function performs implementation specific features on a given ADCBuf_Handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADCBuf handle returned from <ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>A command value defined by the driver specific implementation</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmdArg</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an optional R/W (read/write) argument that is accompanied with cmd</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ADCBuf_Status describing an error or success state. Negative values indicates an error.</para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_buf_8h_1a88a0ab421304465b22417a7adef6c0c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADCBuf_init</definition>
        <argsstring>(void)</argsstring>
        <name>ADCBuf_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function initializes the ADC module. This function must. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The ADCBuf_Config structure must exist and be persistent before this function can be called. This function call does not modify any peripheral registers. Function should only be called once. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="471" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_buf_8h_1ae6ddd34c34fd06cdede98fb01033cc47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADCBuf_Params_init</definition>
        <argsstring>(ADCBuf_Params *params)</argsstring>
        <name>ADCBuf_Params_init</name>
        <param>
          <type><ref refid="_a_d_c_buf_8h_1a127e649bfd0523552802c71e28a831c3" kindref="member">ADCBuf_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>This function sets all fields of a specified ADCBuf_Params structure to their default values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to ADCBuf_Params structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Default values are: returnMode = ADCBuf_RETURN_MODE_BLOCKING, blockingTimeout = 25000, callbackFxn = NULL, recurrenceMode = ADCBuf_RECURRENCE_MODE_ONE_SHOT, samplingFrequency = 10000, custom = NULL</para><para><ref refid="struct_a_d_c_buf___params___1adc70dfc130fec9d3185d3a9d82d6f637" kindref="member">ADCBuf_Params::blockingTimeout</ref> should be set large enough to allow for the desired number of samples to be collected with the specified frequency. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="490" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref></type>
        <definition>ADCBuf_Handle ADCBuf_open</definition>
        <argsstring>(uint_least8_t index, ADCBuf_Params *params)</argsstring>
        <name>ADCBuf_open</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="_a_d_c_buf_8h_1a127e649bfd0523552802c71e28a831c3" kindref="member">ADCBuf_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>This function opens a given ADCBuf peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical peripheral number for the ADCBuf indexed into the ADCBuf_config table</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an parameter block, if NULL it will use default values.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ADCBuf_Handle on success or a NULL on an error or if it has been opened already. If NULL is returned further ADC API calls will result in undefined behaviour.</para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_buf_8h_1a04ab5fae5da8f9ff77ab3ae4974d8f7d" kindref="member">ADCBuf_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="507" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t ADCBuf_convert</definition>
        <argsstring>(ADCBuf_Handle handle, ADCBuf_Conversion conversions[], uint_fast8_t channelCount)</argsstring>
        <name>ADCBuf_convert</name>
        <param>
          <type><ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="_a_d_c_buf_8h_1a24d253ddedcfd02729f910c32fe8b7c8" kindref="member">ADCBuf_Conversion</ref></type>
          <declname>conversions</declname>
          <array>[]</array>
        </param>
        <param>
          <type>uint_fast8_t</type>
          <declname>channelCount</declname>
        </param>
        <briefdescription>
<para>This function starts a set of conversions on one or more channels. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADCBuf handle returned from <ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conversions</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an array of ADCBuf_Conversion structs with the specific parameters for each channel. Only use one ADCBuf_Conversion struct per channel.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channelCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of channels to convert on in this call. Should be the length of the conversions array. Depending on the device, multiple simultaneous conversions may not be supported. See device specific implementation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ADCBuf_STATUS_SUCCESS if the operation was successful. ADCBuf_STATUS_ERROR or a device specific status is returned otherwise.</para></simplesect>
<simplesect kind="pre"><para><ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref> must have been called prior.</para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_buf_8h_1a5201c27bddf11b9f9ae902807bded40d" kindref="member">ADCBuf_convertCancel()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="529" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_buf_8h_1a5201c27bddf11b9f9ae902807bded40d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t ADCBuf_convertCancel</definition>
        <argsstring>(ADCBuf_Handle handle)</argsstring>
        <name>ADCBuf_convertCancel</name>
        <param>
          <type><ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>This function cancels an ADC conversion that is in progress. </para>        </briefdescription>
        <detaileddescription>
<para>This function must be called before calling <ref refid="_a_d_c_buf_8h_1a04ab5fae5da8f9ff77ab3ae4974d8f7d" kindref="member">ADCBuf_close()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADCBuf handle returned from <ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ADCBuf_STATUS_SUCCESS if the operation was successful. ADCBuf_STATUS_ERROR or a device specific status is returned otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="544" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_buf_8h_1a2ff6d7db155bcd1367ef82a9f5cef19c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint_fast8_t</type>
        <definition>uint_fast8_t ADCBuf_getResolution</definition>
        <argsstring>(ADCBuf_Handle handle)</argsstring>
        <name>ADCBuf_getResolution</name>
        <param>
          <type><ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>This function returns the resolution in bits of the specified ADC. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADCBuf handle returned from <ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The resolution in bits of the specified ADC.</para></simplesect>
<simplesect kind="pre"><para><ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref> must have been called prior. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="555" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_buf_8h_1a636816201fdb596b748a0ce4d4bf6739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t ADCBuf_adjustRawValues</definition>
        <argsstring>(ADCBuf_Handle handle, void *sampleBuf, uint_fast16_t sampleCount, uint32_t adcChan)</argsstring>
        <name>ADCBuf_adjustRawValues</name>
        <param>
          <type><ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>sampleBuf</declname>
        </param>
        <param>
          <type>uint_fast16_t</type>
          <declname>sampleCount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>adcChan</declname>
        </param>
        <briefdescription>
<para>This function adjusts a raw ADC output buffer such that the result is comparable between devices of the same make. The function does the adjustment in-place. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADCBuf handle returned from <ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sampleBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer full of raw sample values.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sampleCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of samples to adjust.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adcChan</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel the buffer was sampled on.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A buffer full of adjusted samples contained in sampleBuffer.</para></simplesect>
<simplesect kind="return"><para>ADCBuf_STATUS_SUCCESS if the operation was successful. ADCBuf_STATUS_ERROR or a device specific status is returned otherwise.</para></simplesect>
<simplesect kind="pre"><para><ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref> must have been called prior. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="577" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_buf_8h_1a815c5b8d43cb93a46298c889dff1019c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t ADCBuf_convertAdjustedToMicroVolts</definition>
        <argsstring>(ADCBuf_Handle handle, uint32_t adcChan, void *adjustedSampleBuffer, uint32_t outputMicroVoltBuffer[], uint_fast16_t sampleCount)</argsstring>
        <name>ADCBuf_convertAdjustedToMicroVolts</name>
        <param>
          <type><ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>adcChan</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>adjustedSampleBuffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>outputMicroVoltBuffer</declname>
          <array>[]</array>
        </param>
        <param>
          <type>uint_fast16_t</type>
          <declname>sampleCount</declname>
        </param>
        <briefdescription>
<para>This function converts a raw ADC output value to a value scaled in micro volts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADCBuf handle returned from <ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adcChan</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADC channel the samples stem from. This parameter is only necessary for certain devices. See device specific implementation for details.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adjustedSampleBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer full of adjusted samples.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputMicroVoltBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The output buffer. The conversion does not occur in place due to the differing data type sizes.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sampleCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of samples to convert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A number of measurements scaled in micro volts inside outputMicroVoltBuffer.</para></simplesect>
<simplesect kind="return"><para>ADCBuf_STATUS_SUCCESS if the operation was successful. ADCBuf_STATUS_ERROR or a device specific status is returned otherwise.</para></simplesect>
<simplesect kind="pre"><para><ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref> must have been called prior.</para></simplesect>
<simplesect kind="pre"><para><ref refid="_a_d_c_buf_8h_1a636816201fdb596b748a0ce4d4bf6739" kindref="member">ADCBuf_adjustRawValues()</ref> must be called on adjustedSampleBuffer prior. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="604" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>ADCBuf driver interface. </para>    </briefdescription>
    <detaileddescription>
<para>============================================================================</para><para>The ADCBuf header file should be included in an application as follows: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/ADCBuf.h&gt;</highlight></codeline>
</programlisting></para><para><heading level="1">Operation</heading>
</para><para>The ADCBuf driver in TI-RTOS samples an analogue waveform at a specified frequency. The resulting samples are transferred to a buffer provided by the application. The driver can either take n samples once, or continuously sample by double-buffering and providing a callback to process each finished buffer.</para><para>The APIs in this driver serve as an interface to a typical TI-RTOS application. The specific peripheral implementations are responsible to create all the SYS/BIOS specific primitives to allow for thread-safe operation.</para><para>User can use the ADC driver or the ADCBuf driver. But both ADC and ADCBuf cannot be used together in an application.</para><para><heading level="2">Opening the driver</heading>
</para><para><programlisting><codeline><highlight class="normal">ADCBuf_Handle<sp/>adcBufHandle;</highlight></codeline>
<codeline><highlight class="normal">ADCBuf_Params<sp/>adcBufParams;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ADCBuf_Params_init(&amp;adcBufParams);</highlight></codeline>
<codeline><highlight class="normal">adcBufHandle<sp/>=<sp/>ADCBuf_open(Board_ADCBUF0,<sp/>&amp;adcBufParams);</highlight></codeline>
</programlisting></para><para><heading level="2">Making a conversion</heading>
</para><para>In this context, a conversion refers to taking multiple ADC samples and transferring them to an application-provided buffer. To start a conversion, the application must configure an ADCBuf_Conversion struct and call <ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref>. In blocking mode, <ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref> will return when the conversion is finished and the desired number of samples have been made. In callback mode, <ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref> will return immediately and the application will get a callback when the conversion is done.</para><para><programlisting><codeline><highlight class="normal">ADCBuf_Conversion<sp/>blockingConversion;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">blockingConversion.arg<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">blockingConversion.adcChannel<sp/>=<sp/>Board_ADCBUF0CHANNEL0;</highlight></codeline>
<codeline><highlight class="normal">blockingConversion.sampleBuffer<sp/>=<sp/>sampleBufferOnePtr;</highlight></codeline>
<codeline><highlight class="normal">blockingConversion.sampleBufferTwo<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">blockingConversion.samplesRequestedCount<sp/>=<sp/>ADCBUFFERSIZE;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(!ADCBuf_convert(adcBuf,<sp/>&amp;continuousConversion,<sp/>1))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><heading level="2">Canceling a conversion</heading>
</para><para><ref refid="_a_d_c_buf_8h_1a5201c27bddf11b9f9ae902807bded40d" kindref="member">ADCBuf_convertCancel()</ref> is used to cancel an ADCBuf conversion when the driver is used in <ref refid="_a_d_c_buf_8h_1aa9e88854960e236788f9775ff630a433a633b4b063b88d7c62e9e2513075a36a7" kindref="member">ADCBuf_RETURN_MODE_CALLBACK</ref>.</para><para>Calling this API while no conversion is in progress has no effect. If a conversion is in progress, it is canceled and the provided callback function is called.</para><para>In <ref refid="_a_d_c_buf_8h_1ae5620b285f881fdecb49b75a73f1400fac10945188f88ddadd4322c4e117d5b3c" kindref="member">ADCBuf_RECURRENCE_MODE_CONTINUOUS</ref>, this function must be called to stop the conversion. The driver will continue providing callbacks with fresh samples until thie <ref refid="_a_d_c_buf_8h_1a5201c27bddf11b9f9ae902807bded40d" kindref="member">ADCBuf_convertCancel()</ref> function is called. The callback function is not called after <ref refid="_a_d_c_buf_8h_1a5201c27bddf11b9f9ae902807bded40d" kindref="member">ADCBuf_convertCancel()</ref> while in <ref refid="_a_d_c_buf_8h_1ae5620b285f881fdecb49b75a73f1400fac10945188f88ddadd4322c4e117d5b3c" kindref="member">ADCBuf_RECURRENCE_MODE_CONTINUOUS</ref>.</para><para><heading level="1">Implementation</heading>
</para><para>This module serves as the main interface for TI-RTOS applications. Its purpose is to redirect the module&apos;s APIs to specific peripheral implementations which are specified using a pointer to an ADCBuf_FxnTable.</para><para>The ADCBuf driver interface module is joined (at link time) to a NULL-terminated array of ADCBuf_Config data structures named <emphasis>ADCBuf_config</emphasis>. <emphasis>ADCBuf_config</emphasis> is implemented in the application with each entry being an instance of an ADCBuf peripheral. Each entry in <emphasis>ADCBuf_config</emphasis> contains a:<itemizedlist>
<listitem><para>(ADCBuf_FxnTable *) to a set of functions that implement an ADCBuf peripheral</para></listitem><listitem><para>(void *) data object that is associated with the ADCBuf_FxnTable</para></listitem><listitem><para>(void *) hardware attributes that are associated to the ADCBuf_FxnTable</para></listitem></itemizedlist>
</para><para><heading level="1">Instrumentation</heading>
</para><para>The ADCBuf driver interface produces log statements if instrumentation is enabled.</para><para><table rows="3" cols="2"><row>
<entry thead="yes"><para>Diagnostics Mask </para></entry><entry thead="yes"><para>Log details  </para></entry></row>
<row>
<entry thead="no"><para>Diags_USER1 </para></entry><entry thead="no"><para>basic operations performed </para></entry></row>
<row>
<entry thead="no"><para>Diags_USER2 </para></entry><entry thead="no"><para>detailed operations performed </para></entry></row>
</table>
<hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016-2017,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor">#ifndef<sp/>ti_drivers_adcbuf__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_adcbuf__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="group___a_d_c_b_u_f___c_o_n_t_r_o_l_1ga6d889e191027535ad318be0b9c3765d1" refkind="member"><highlight class="preprocessor">#define<sp/>ADCBuf_CMD_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="group___a_d_c_b_u_f___c_o_n_t_r_o_l_1ga61f0abe91c78f6ab7003c53e513d4d3b" refkind="member"><highlight class="preprocessor">#define<sp/>ADCBuf_STATUS_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="group___a_d_c_b_u_f___c_o_n_t_r_o_l_1gac9c96db575dfaa6bcdfbd94cd875fbd4" refkind="member"><highlight class="preprocessor">#define<sp/>ADCBuf_STATUS_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="group___a_d_c_b_u_f___c_o_n_t_r_o_l_1ga78f1a705377b5bb15cc6c152f75846e2" refkind="member"><highlight class="preprocessor">#define<sp/>ADCBuf_STATUS_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="group___a_d_c_b_u_f___c_o_n_t_r_o_l_1ga5d552a66f63d36a8eaffd53c9deff2f2" refkind="member"><highlight class="preprocessor">#define<sp/>ADCBuf_STATUS_UNDEFINEDCMD<sp/><sp/><sp/><sp/><sp/><sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="group___a_d_c_b_u_f___c_o_n_t_r_o_l_1ga14c9aea90d55fbbf215ab5a17a33573d" refkind="member"><highlight class="preprocessor">#define<sp/>ADCBuf_STATUS_UNSUPPORTED<sp/><sp/><sp/><sp/><sp/><sp/>(-3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="comment">/*<sp/>Add<sp/>ADCBUF_CMD_&lt;commands&gt;<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_d_c_buf___config__" kindref="compound">ADCBuf_Config_</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref>;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="struct_a_d_c_buf___conversion__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_d_c_buf___conversion__" kindref="compound">ADCBuf_Conversion_</ref><sp/>{</highlight></codeline>
<codeline lineno="238" refid="struct_a_d_c_buf___conversion___1a06235de0f9b2a313856993589fca5392" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___conversion___1a06235de0f9b2a313856993589fca5392" kindref="member">samplesRequestedCount</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="239" refid="struct_a_d_c_buf___conversion___1aceb8ea6ca0a788c2fc1c249523cccb0e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_a_d_c_buf___conversion___1aceb8ea6ca0a788c2fc1c249523cccb0e" kindref="member">sampleBuffer</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="240" refid="struct_a_d_c_buf___conversion___1a61cf0b33f40586ef431c0e697fd8f877" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_a_d_c_buf___conversion___1a61cf0b33f40586ef431c0e697fd8f877" kindref="member">sampleBufferTwo</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="243" refid="struct_a_d_c_buf___conversion___1ae3faf2fae30ceb64ca571f7739017f45" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_a_d_c_buf___conversion___1ae3faf2fae30ceb64ca571f7739017f45" kindref="member">arg</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="244" refid="struct_a_d_c_buf___conversion___1a36a37e1ac1e9489d240e02d46e2557ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___conversion___1a36a37e1ac1e9489d240e02d46e2557ee" kindref="member">adcChannel</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="245"><highlight class="normal">}<sp/><ref refid="_a_d_c_buf_8h_1a24d253ddedcfd02729f910c32fe8b7c8" kindref="member">ADCBuf_Conversion</ref>;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="251" refid="_a_d_c_buf_8h_1a477c377c65f8de04aa67ff7eefa0a4cf" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_a_d_c_buf_8h_1a477c377c65f8de04aa67ff7eefa0a4cf" kindref="member">ADCBuf_Callback</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ADCBuf_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___conversion__" kindref="compound">ADCBuf_Conversion</ref><sp/>*conversion,</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*completedADCBuffer,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>completedChannel);</highlight></codeline>
<codeline lineno="261" refid="_a_d_c_buf_8h_1ae5620b285f881fdecb49b75a73f1400f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_a_d_c_buf_8h_1ae5620b285f881fdecb49b75a73f1400f" kindref="member">ADCBuf_Recurrence_Mode_</ref><sp/>{</highlight></codeline>
<codeline lineno="266" refid="_a_d_c_buf_8h_1ae5620b285f881fdecb49b75a73f1400fa1916212b661aa853b7a581e3e5dc35e2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_buf_8h_1ae5620b285f881fdecb49b75a73f1400fa1916212b661aa853b7a581e3e5dc35e2" kindref="member">ADCBuf_RECURRENCE_MODE_ONE_SHOT</ref>,</highlight></codeline>
<codeline lineno="272" refid="_a_d_c_buf_8h_1ae5620b285f881fdecb49b75a73f1400fac10945188f88ddadd4322c4e117d5b3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_buf_8h_1ae5620b285f881fdecb49b75a73f1400fac10945188f88ddadd4322c4e117d5b3c" kindref="member">ADCBuf_RECURRENCE_MODE_CONTINUOUS</ref></highlight></codeline>
<codeline lineno="273"><highlight class="normal">}<sp/><ref refid="_a_d_c_buf_8h_1a0df315657027d8c4dc1582ee6438522b" kindref="member">ADCBuf_Recurrence_Mode</ref>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="_a_d_c_buf_8h_1aa9e88854960e236788f9775ff630a433" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_a_d_c_buf_8h_1aa9e88854960e236788f9775ff630a433" kindref="member">ADCBuf_Return_Mode_</ref><sp/>{</highlight></codeline>
<codeline lineno="288" refid="_a_d_c_buf_8h_1aa9e88854960e236788f9775ff630a433a5c6236b2f629b196d7874175be679399" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_buf_8h_1aa9e88854960e236788f9775ff630a433a5c6236b2f629b196d7874175be679399" kindref="member">ADCBuf_RETURN_MODE_BLOCKING</ref>,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="294" refid="_a_d_c_buf_8h_1aa9e88854960e236788f9775ff630a433a633b4b063b88d7c62e9e2513075a36a7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_buf_8h_1aa9e88854960e236788f9775ff630a433a633b4b063b88d7c62e9e2513075a36a7" kindref="member">ADCBuf_RETURN_MODE_CALLBACK</ref></highlight></codeline>
<codeline lineno="295"><highlight class="normal">}<sp/><ref refid="_a_d_c_buf_8h_1a3cc88be061075c8c609959d56adb30a4" kindref="member">ADCBuf_Return_Mode</ref>;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="struct_a_d_c_buf___params__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_d_c_buf___params__" kindref="compound">ADCBuf_Params_</ref><sp/>{</highlight></codeline>
<codeline lineno="307" refid="struct_a_d_c_buf___params___1adc70dfc130fec9d3185d3a9d82d6f637" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___params___1adc70dfc130fec9d3185d3a9d82d6f637" kindref="member">blockingTimeout</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="308" refid="struct_a_d_c_buf___params___1aaa30acc2f475567a7815caf63da1c5c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___params___1aaa30acc2f475567a7815caf63da1c5c6" kindref="member">samplingFrequency</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="309" refid="struct_a_d_c_buf___params___1a8a482674cd1d63c33f8fc50f35635944" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCBuf_Return_Mode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___params___1a8a482674cd1d63c33f8fc50f35635944" kindref="member">returnMode</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="310" refid="struct_a_d_c_buf___params___1a9dccf945921169b9438cfdfd9b4200d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_buf_8h_1a477c377c65f8de04aa67ff7eefa0a4cf" kindref="member">ADCBuf_Callback</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___params___1a9dccf945921169b9438cfdfd9b4200d1" kindref="member">callbackFxn</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="311" refid="struct_a_d_c_buf___params___1a4e82d36d5bd2f3df9737dd43b1b4ce6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCBuf_Recurrence_Mode<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___params___1a4e82d36d5bd2f3df9737dd43b1b4ce6d" kindref="member">recurrenceMode</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="312" refid="struct_a_d_c_buf___params___1adc93f0522f0f47abc83b87cff3095d89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_a_d_c_buf___params___1adc93f0522f0f47abc83b87cff3095d89" kindref="member">custom</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="313"><highlight class="normal">}<sp/><ref refid="_a_d_c_buf_8h_1a127e649bfd0523552802c71e28a831c3" kindref="member">ADCBuf_Params</ref>;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="319" refid="_a_d_c_buf_8h_1a94dfd94e96f6c7e15a9da57feddd60dc" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_a_d_c_buf_8h_1a94dfd94e96f6c7e15a9da57feddd60dc" kindref="member">ADCBuf_CloseFxn</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ADCBuf_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="_a_d_c_buf_8h_1ab8084b8145ded40824a3f98e58f9917d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref><sp/>(*<ref refid="_a_d_c_buf_8h_1ab8084b8145ded40824a3f98e58f9917d" kindref="member">ADCBuf_OpenFxn</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ADCBuf_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_d_c_buf___params__" kindref="compound">ADCBuf_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="333" refid="_a_d_c_buf_8h_1a24f4127b82e138fa18c8a54b4d914e05" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_a_d_c_buf_8h_1a24f4127b82e138fa18c8a54b4d914e05" kindref="member">ADCBuf_ControlFxn</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ADCBuf_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_fast8_t<sp/>cmd,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_a_d_c_buf___conversion___1ae3faf2fae30ceb64ca571f7739017f45" kindref="member">arg</ref>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>function<sp/>pointer<sp/>to<sp/>a<sp/>driver<sp/>specific<sp/>implementation<sp/>of</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADCBuf_init().</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="_a_d_c_buf_8h_1ab63b9bc37ab6f5fa2521c18b38c1881e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_a_d_c_buf_8h_1ab63b9bc37ab6f5fa2521c18b38c1881e" kindref="member">ADCBuf_InitFxn</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ADCBuf_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="_a_d_c_buf_8h_1a57f40a75d77241e2fda473f0538e404d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_a_d_c_buf_8h_1a57f40a75d77241e2fda473f0538e404d" kindref="member">ADCBuf_ConvertFxn</ref>)<sp/><sp/><sp/><sp/><sp/>(ADCBuf_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___conversion__" kindref="compound">ADCBuf_Conversion</ref><sp/>conversions[],</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_fast8_t<sp/>channelCount);</highlight></codeline>
<codeline lineno="353" refid="_a_d_c_buf_8h_1a88bb1333e07a3fee27926064058d5d1b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_a_d_c_buf_8h_1a88bb1333e07a3fee27926064058d5d1b" kindref="member">ADCBuf_ConvertCancelFxn</ref>)(ADCBuf_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="359" refid="_a_d_c_buf_8h_1aeff0bfa20eb16c3857b5123da136d320" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint_fast8_t<sp/>(*<ref refid="_a_d_c_buf_8h_1aeff0bfa20eb16c3857b5123da136d320" kindref="member">ADCBuf_GetResolutionFxn</ref>)<sp/><sp/><sp/><sp/><sp/>(ADCBuf_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="365" refid="_a_d_c_buf_8h_1a4a19f2deb010ca0ba5bdcf5586a8cb28" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_a_d_c_buf_8h_1a4a19f2deb010ca0ba5bdcf5586a8cb28" kindref="member">ADCBuf_adjustRawValuesFxn</ref>)(ADCBuf_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_a_d_c_buf___conversion___1aceb8ea6ca0a788c2fc1c249523cccb0e" kindref="member">sampleBuffer</ref>,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_fast16_t<sp/>sampleCount,</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_a_d_c_buf___conversion___1a36a37e1ac1e9489d240e02d46e2557ee" kindref="member">adcChannel</ref>);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="374" refid="_a_d_c_buf_8h_1a6ffaac5eaa1253f9b78bbaa6952e1162" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_a_d_c_buf_8h_1a6ffaac5eaa1253f9b78bbaa6952e1162" kindref="member">ADCBuf_convertAdjustedToMicroVoltsFxn</ref>)<sp/><sp/>(ADCBuf_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><ref refid="struct_a_d_c_buf___conversion___1a36a37e1ac1e9489d240e02d46e2557ee" kindref="member">adcChannel</ref>,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*adjustedSampleBuffer,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>outputMicroVoltBuffer[],</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_fast16_t<sp/>sampleCount);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="385" refid="struct_a_d_c_buf___fxn_table__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_d_c_buf___fxn_table__" kindref="compound">ADCBuf_FxnTable_</ref><sp/>{</highlight></codeline>
<codeline lineno="387" refid="struct_a_d_c_buf___fxn_table___1a22aca3a569224b72ef5729922525f619" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_buf_8h_1a94dfd94e96f6c7e15a9da57feddd60dc" kindref="member">ADCBuf_CloseFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___fxn_table___1a22aca3a569224b72ef5729922525f619" kindref="member">closeFxn</ref>;</highlight></codeline>
<codeline lineno="389" refid="struct_a_d_c_buf___fxn_table___1a626c1f712187966b33d328f335d14a44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_buf_8h_1a24f4127b82e138fa18c8a54b4d914e05" kindref="member">ADCBuf_ControlFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___fxn_table___1a626c1f712187966b33d328f335d14a44" kindref="member">controlFxn</ref>;</highlight></codeline>
<codeline lineno="391" refid="struct_a_d_c_buf___fxn_table___1a08753ba88399b888140830e3a055e99c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_buf_8h_1ab63b9bc37ab6f5fa2521c18b38c1881e" kindref="member">ADCBuf_InitFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___fxn_table___1a08753ba88399b888140830e3a055e99c" kindref="member">initFxn</ref>;</highlight></codeline>
<codeline lineno="393" refid="struct_a_d_c_buf___fxn_table___1af0086e548b22367018d9e1aba0927edb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_buf_8h_1ab8084b8145ded40824a3f98e58f9917d" kindref="member">ADCBuf_OpenFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___fxn_table___1af0086e548b22367018d9e1aba0927edb" kindref="member">openFxn</ref>;</highlight></codeline>
<codeline lineno="395" refid="struct_a_d_c_buf___fxn_table___1a4e42771ab30667f7490e5b99a4befaae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_buf_8h_1a57f40a75d77241e2fda473f0538e404d" kindref="member">ADCBuf_ConvertFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___fxn_table___1a4e42771ab30667f7490e5b99a4befaae" kindref="member">convertFxn</ref>;</highlight></codeline>
<codeline lineno="397" refid="struct_a_d_c_buf___fxn_table___1a6488e24a05210b2faaa6ef3fbb0a546a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_buf_8h_1a88bb1333e07a3fee27926064058d5d1b" kindref="member">ADCBuf_ConvertCancelFxn</ref><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___fxn_table___1a6488e24a05210b2faaa6ef3fbb0a546a" kindref="member">convertCancelFxn</ref>;</highlight></codeline>
<codeline lineno="399" refid="struct_a_d_c_buf___fxn_table___1a65729da60474968b72bc8819704bdfe6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_buf_8h_1aeff0bfa20eb16c3857b5123da136d320" kindref="member">ADCBuf_GetResolutionFxn</ref><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___fxn_table___1a65729da60474968b72bc8819704bdfe6" kindref="member">getResolutionFxn</ref>;</highlight></codeline>
<codeline lineno="401" refid="struct_a_d_c_buf___fxn_table___1aa4acf60356ebf48fb5a30eedb1ac9e72" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_buf_8h_1a4a19f2deb010ca0ba5bdcf5586a8cb28" kindref="member">ADCBuf_adjustRawValuesFxn</ref><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___fxn_table___1aa4acf60356ebf48fb5a30eedb1ac9e72" kindref="member">adjustRawValuesFxn</ref>;</highlight></codeline>
<codeline lineno="403" refid="struct_a_d_c_buf___fxn_table___1a97cebec4df088ed9e05175a7677ec436" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_buf_8h_1a6ffaac5eaa1253f9b78bbaa6952e1162" kindref="member">ADCBuf_convertAdjustedToMicroVoltsFxn</ref><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___fxn_table___1a97cebec4df088ed9e05175a7677ec436" kindref="member">convertAdjustedToMicroVoltsFxn</ref>;</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}<sp/><ref refid="_a_d_c_buf_8h_1af15c19b29f04db7b3755c255187c1dc4" kindref="member">ADCBuf_FxnTable</ref>;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="struct_a_d_c_buf___config__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_d_c_buf___config__" kindref="compound">ADCBuf_Config_</ref><sp/>{</highlight></codeline>
<codeline lineno="419" refid="struct_a_d_c_buf___config___1a2b0117b07999dee4f4189aef978b52c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_d_c_buf___fxn_table__" kindref="compound">ADCBuf_FxnTable</ref><sp/><sp/><sp/>*<ref refid="struct_a_d_c_buf___config___1a2b0117b07999dee4f4189aef978b52c6" kindref="member">fxnTablePtr</ref>;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="struct_a_d_c_buf___config___1a54674c23d536bfa6585f24962ffd2689" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_a_d_c_buf___config___1a54674c23d536bfa6585f24962ffd2689" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="425" refid="struct_a_d_c_buf___config___1a56cf8ec1b583817f01c5121ce44800d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_a_d_c_buf___config___1a56cf8ec1b583817f01c5121ce44800d8" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}<sp/><ref refid="_a_d_c_buf_8h_1a72d585edb37e7c4c53c278305a8df7d2" kindref="member">ADCBuf_Config</ref>;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_d_c_buf_8h_1a04ab5fae5da8f9ff77ab3ae4974d8f7d" kindref="member">ADCBuf_close</ref>(ADCBuf_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_a_d_c_buf_8h_1a87678933c235c0bfc1a26472ef873014" kindref="member">ADCBuf_control</ref>(ADCBuf_Handle<sp/>handle,<sp/>uint_fast16_t<sp/>cmd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cmdArg);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_d_c_buf_8h_1a88a0ab421304465b22417a7adef6c0c2" kindref="member">ADCBuf_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_d_c_buf_8h_1ae6ddd34c34fd06cdede98fb01033cc47" kindref="member">ADCBuf_Params_init</ref>(<ref refid="struct_a_d_c_buf___params__" kindref="compound">ADCBuf_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ADCBuf_Handle<sp/><ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open</ref>(uint_least8_t<sp/>index,<sp/><ref refid="struct_a_d_c_buf___params__" kindref="compound">ADCBuf_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert</ref>(ADCBuf_Handle<sp/>handle,<sp/><ref refid="struct_a_d_c_buf___conversion__" kindref="compound">ADCBuf_Conversion</ref><sp/>conversions[],<sp/><sp/>uint_fast8_t<sp/>channelCount);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_a_d_c_buf_8h_1a5201c27bddf11b9f9ae902807bded40d" kindref="member">ADCBuf_convertCancel</ref>(ADCBuf_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint_fast8_t<sp/><ref refid="_a_d_c_buf_8h_1a2ff6d7db155bcd1367ef82a9f5cef19c" kindref="member">ADCBuf_getResolution</ref>(ADCBuf_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_a_d_c_buf_8h_1a636816201fdb596b748a0ce4d4bf6739" kindref="member">ADCBuf_adjustRawValues</ref>(ADCBuf_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*sampleBuf,<sp/>uint_fast16_t<sp/>sampleCount,<sp/>uint32_t<sp/>adcChan);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_a_d_c_buf_8h_1a815c5b8d43cb93a46298c889dff1019c" kindref="member">ADCBuf_convertAdjustedToMicroVolts</ref>(ADCBuf_Handle<sp/>handle,<sp/>uint32_t<sp/><sp/>adcChan,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*adjustedSampleBuffer,<sp/>uint32_t<sp/>outputMicroVoltBuffer[],<sp/>uint_fast16_t<sp/>sampleCount);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_adcbuf__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h"/>
  </compounddef>
</doxygen>
