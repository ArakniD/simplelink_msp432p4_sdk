<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_a_d_c_buf_8h" kind="file" language="C++">
    <compoundname>ADCBuf.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includedby refid="_a_d_c_buf_m_s_p432_8h" local="no">ADCBufMSP432.h</includedby>
    <incdepgraph>
      <node id="5">
        <label>ADCBuf.h</label>
        <link refid="_a_d_c_buf_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="7">
        <label>ADCBuf.h</label>
        <link refid="_a_d_c_buf_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ADCBufMSP432.h</label>
        <link refid="_a_d_c_buf_m_s_p432_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_a_d_c_buf___conversion" prot="public">ADCBuf_Conversion</innerclass>
    <innerclass refid="struct_a_d_c_buf___params" prot="public">ADCBuf_Params</innerclass>
    <innerclass refid="struct_a_d_c_buf___fxn_table" prot="public">ADCBuf_FxnTable</innerclass>
    <innerclass refid="struct_a_d_c_buf___config__" prot="public">ADCBuf_Config_</innerclass>
      <sectiondef kind="user-defined">
      <memberdef kind="define" id="group___a_d_c_buf___c_o_n_t_r_o_l_1gac9c96db575dfaa6bcdfbd94cd875fbd4" prot="public" static="no">
        <name>ADCBuf_STATUS_SUCCESS</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>Success status code returned by: <ref refid="_a_d_c_buf_8h_1a87678933c235c0bfc1a26472ef873014" kindref="member">ADCBuf_control()</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Functions return ADCBuf_STATUS_SUCCESS if the call was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="262" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c_buf___c_o_n_t_r_o_l_1ga78f1a705377b5bb15cc6c152f75846e2" prot="public" static="no">
        <name>ADCBuf_STATUS_ERROR</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>Generic error status code returned by <ref refid="_a_d_c_buf_8h_1a87678933c235c0bfc1a26472ef873014" kindref="member">ADCBuf_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_a_d_c_buf_8h_1a87678933c235c0bfc1a26472ef873014" kindref="member">ADCBuf_control()</ref> returns <ref refid="group___a_d_c_buf___c_o_n_t_r_o_l_1ga78f1a705377b5bb15cc6c152f75846e2" kindref="member">ADCBuf_STATUS_ERROR</ref> if the control code was not executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="270" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c_buf___c_o_n_t_r_o_l_1ga5d552a66f63d36a8eaffd53c9deff2f2" prot="public" static="no">
        <name>ADCBuf_STATUS_UNDEFINEDCMD</name>
        <initializer>(-2)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_a_d_c_buf_8h_1a87678933c235c0bfc1a26472ef873014" kindref="member">ADCBuf_control()</ref> for undefined command codes. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_a_d_c_buf_8h_1a87678933c235c0bfc1a26472ef873014" kindref="member">ADCBuf_control()</ref> returns ADCBuf_STATUS_UNDEFINEDCMD if the control code is not recognized by the driver implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="279" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c_buf___c_o_n_t_r_o_l_1ga14c9aea90d55fbbf215ab5a17a33573d" prot="public" static="no">
        <name>ADCBuf_STATUS_UNSUPPORTED</name>
        <initializer>(-3)</initializer>
        <briefdescription>
<para>An error status code returned if the function is not supported by a particular driver implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="285" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___a_d_c_buf___c_o_n_t_r_o_l_1ga6d889e191027535ad318be0b9c3765d1" prot="public" static="no">
        <name>ADCBuf_CMD_RESERVED</name>
        <initializer>(32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common ADCBuf_control command code reservation offset. ADC driver implementations should offset command codes with ADCBuf_CMD_RESERVED growing positively</para><para>Example implementation specific command codes: <programlisting><codeline><highlight class="normal">#define<sp/>ADCXYZ_COMMAND0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADCBuf_CMD_RESERVED<sp/>+<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADCXYZ_COMMAND1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADCBuf_CMD_RESERVED<sp/>+<sp/>1</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="237" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c_buf___c_o_n_t_r_o_l_1ga61f0abe91c78f6ab7003c53e513d4d3b" prot="public" static="no">
        <name>ADCBuf_STATUS_RESERVED</name>
        <initializer>(-32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common ADCBuf_control status code reservation offset. ADC driver implementations should offset status codes with ADCBuf_STATUS_RESERVED growing negatively.</para><para>Example implementation specific status codes: <programlisting><codeline><highlight class="normal">#define<sp/>ADCXYZ_STATUS_ERROR0<sp/><sp/><sp/><sp/>ADCBuf_STATUS_RESERVED<sp/>-<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADCXYZ_STATUS_ERROR1<sp/><sp/><sp/><sp/>ADCBuf_STATUS_RESERVED<sp/>-<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADCXYZ_STATUS_ERROR2<sp/><sp/><sp/><sp/>ADCBuf_STATUS_RESERVED<sp/>-<sp/>2</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="251" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_a_d_c_buf_8h_1af15cc4961b02af48216132c2b8bc88f1" prot="public" static="no">
        <name>ADCBuf_Recurrence_Mode</name>
        <enumvalue id="_a_d_c_buf_8h_1af15cc4961b02af48216132c2b8bc88f1a1916212b661aa853b7a581e3e5dc35e2" prot="public">
          <name>ADCBuf_RECURRENCE_MODE_ONE_SHOT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>When operating in <ref refid="_a_d_c_buf_8h_1af15cc4961b02af48216132c2b8bc88f1a1916212b661aa853b7a581e3e5dc35e2" kindref="member">ADCBuf_RECURRENCE_MODE_ONE_SHOT</ref>, calls to <ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref> will pend on a semaphore until <ref refid="struct_a_d_c_buf___conversion_1afd95c203d1e7dd347102eef22dc9cc93" kindref="member">ADCBuf_Conversion.samplesRequestedCount</ref> samples are completed or after a duration of <ref refid="struct_a_d_c_buf___params_1a3c3b5dab517e5d6bdc6dd68bda1e88d2" kindref="member">ADCBuf_Params.blockingTimeout</ref>.</para><para><simplesect kind="note"><para>When using <ref refid="_a_d_c_buf_8h_1af15cc4961b02af48216132c2b8bc88f1a1916212b661aa853b7a581e3e5dc35e2" kindref="member">ADCBuf_RECURRENCE_MODE_ONE_SHOT</ref>, <ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref> must be called from a thread context. <ref refid="_a_d_c_buf_8h_1af15cc4961b02af48216132c2b8bc88f1a1916212b661aa853b7a581e3e5dc35e2" kindref="member">ADCBuf_RECURRENCE_MODE_ONE_SHOT</ref> can only be used in combination with <ref refid="_a_d_c_buf_8h_1a3d643e8024503c5ef2679c83419ba6eea5c6236b2f629b196d7874175be679399" kindref="member">ADCBuf_RETURN_MODE_BLOCKING</ref>. </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_d_c_buf_8h_1af15cc4961b02af48216132c2b8bc88f1ac10945188f88ddadd4322c4e117d5b3c" prot="public">
          <name>ADCBuf_RECURRENCE_MODE_CONTINUOUS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>When operating in <ref refid="_a_d_c_buf_8h_1af15cc4961b02af48216132c2b8bc88f1ac10945188f88ddadd4322c4e117d5b3c" kindref="member">ADCBuf_RECURRENCE_MODE_CONTINUOUS</ref>, calls to <ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref> will return immediately. The driver will continuously perform <ref refid="struct_a_d_c_buf___conversion_1afd95c203d1e7dd347102eef22dc9cc93" kindref="member">ADCBuf_Conversion.samplesRequestedCount</ref> samples and call the <ref refid="_a_d_c_buf_8h_1a477c377c65f8de04aa67ff7eefa0a4cf" kindref="member">ADCBuf_Callback</ref> function when completed. The driver will automatically alternate between <ref refid="struct_a_d_c_buf___conversion_1a5415e58a69e40124f66cdcc52a097c4a" kindref="member">ADCBuf_Conversion.sampleBuffer</ref> and <ref refid="struct_a_d_c_buf___conversion_1a6953e200ba2e5a85b9197bdaeb101a5f" kindref="member">ADCBuf_Conversion.sampleBufferTwo</ref>. A <ref refid="_a_d_c_buf_8h_1af15cc4961b02af48216132c2b8bc88f1ac10945188f88ddadd4322c4e117d5b3c" kindref="member">ADCBuf_RECURRENCE_MODE_CONTINUOUS</ref> conversion can only be terminated using <ref refid="_a_d_c_buf_8h_1a5201c27bddf11b9f9ae902807bded40d" kindref="member">ADCBuf_convertCancel()</ref>.</para><para><simplesect kind="note"><para><ref refid="_a_d_c_buf_8h_1af15cc4961b02af48216132c2b8bc88f1ac10945188f88ddadd4322c4e117d5b3c" kindref="member">ADCBuf_RECURRENCE_MODE_CONTINUOUS</ref> can only be used in combination with <ref refid="_a_d_c_buf_8h_1a3d643e8024503c5ef2679c83419ba6eea633b4b063b88d7c62e9e2513075a36a7" kindref="member">ADCBuf_RETURN_MODE_CALLBACK</ref>.</para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_buf_8h_1a3d643e8024503c5ef2679c83419ba6eea633b4b063b88d7c62e9e2513075a36a7" kindref="member">ADCBuf_RETURN_MODE_CALLBACK</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_buf_8h_1a5201c27bddf11b9f9ae902807bded40d" kindref="member">ADCBuf_convertCancel()</ref> </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Recurrence behavior of a <ref refid="struct_a_d_c_buf___conversion" kindref="compound">ADCBuf_Conversion</ref> specified in the <ref refid="struct_a_d_c_buf___params" kindref="compound">ADCBuf_Params</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This enumeration defines the recurrence mode of a <ref refid="struct_a_d_c_buf___conversion" kindref="compound">ADCBuf_Conversion</ref>. After a call to <ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref>, <ref refid="struct_a_d_c_buf___conversion" kindref="compound">ADCBuf_Conversion</ref> may either be done once or reoccur. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="405" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="404" bodyend="435"/>
      </memberdef>
      <memberdef kind="enum" id="_a_d_c_buf_8h_1a3d643e8024503c5ef2679c83419ba6ee" prot="public" static="no">
        <name>ADCBuf_Return_Mode</name>
        <enumvalue id="_a_d_c_buf_8h_1a3d643e8024503c5ef2679c83419ba6eea5c6236b2f629b196d7874175be679399" prot="public">
          <name>ADCBuf_RETURN_MODE_BLOCKING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>When operating in <ref refid="_a_d_c_buf_8h_1a3d643e8024503c5ef2679c83419ba6eea5c6236b2f629b196d7874175be679399" kindref="member">ADCBuf_RETURN_MODE_BLOCKING</ref>, calls to <ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref> will pend on a semaphore until <ref refid="struct_a_d_c_buf___conversion_1afd95c203d1e7dd347102eef22dc9cc93" kindref="member">ADCBuf_Conversion.samplesRequestedCount</ref> samples are completed or after a duration of <ref refid="struct_a_d_c_buf___params_1a3c3b5dab517e5d6bdc6dd68bda1e88d2" kindref="member">ADCBuf_Params.blockingTimeout</ref>.</para><para><simplesect kind="note"><para>When using <ref refid="_a_d_c_buf_8h_1a3d643e8024503c5ef2679c83419ba6eea5c6236b2f629b196d7874175be679399" kindref="member">ADCBuf_RETURN_MODE_BLOCKING</ref>, <ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref> must be called from a thread context. <ref refid="_a_d_c_buf_8h_1a3d643e8024503c5ef2679c83419ba6eea5c6236b2f629b196d7874175be679399" kindref="member">ADCBuf_RETURN_MODE_BLOCKING</ref> can only be used in combination with <ref refid="_a_d_c_buf_8h_1af15cc4961b02af48216132c2b8bc88f1a1916212b661aa853b7a581e3e5dc35e2" kindref="member">ADCBuf_RECURRENCE_MODE_ONE_SHOT</ref>. </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_d_c_buf_8h_1a3d643e8024503c5ef2679c83419ba6eea633b4b063b88d7c62e9e2513075a36a7" prot="public">
          <name>ADCBuf_RETURN_MODE_CALLBACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>When operating in <ref refid="_a_d_c_buf_8h_1a3d643e8024503c5ef2679c83419ba6eea633b4b063b88d7c62e9e2513075a36a7" kindref="member">ADCBuf_RETURN_MODE_CALLBACK</ref>, calls to <ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref> will return immediately. When <ref refid="struct_a_d_c_buf___conversion_1afd95c203d1e7dd347102eef22dc9cc93" kindref="member">ADCBuf_Conversion.samplesRequestedCount</ref> samples are completed, the <ref refid="struct_a_d_c_buf___params_1a29f674ee9b6739607119d6b50f244e17" kindref="member">ADCBuf_Params.callbackFxn</ref> function is called.</para><para><simplesect kind="note"><para><ref refid="_a_d_c_buf_8h_1af15cc4961b02af48216132c2b8bc88f1ac10945188f88ddadd4322c4e117d5b3c" kindref="member">ADCBuf_RECURRENCE_MODE_CONTINUOUS</ref> can only be used in combination with <ref refid="_a_d_c_buf_8h_1a3d643e8024503c5ef2679c83419ba6eea633b4b063b88d7c62e9e2513075a36a7" kindref="member">ADCBuf_RETURN_MODE_CALLBACK</ref>.</para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_buf_8h_1af15cc4961b02af48216132c2b8bc88f1ac10945188f88ddadd4322c4e117d5b3c" kindref="member">ADCBuf_RECURRENCE_MODE_CONTINUOUS</ref> </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Return behavior for <ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref> specified in the <ref refid="struct_a_d_c_buf___params" kindref="compound">ADCBuf_Params</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This enumeration defines the return behavior for <ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref>. A call to <ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref> may either block or return immediately.</para><para><simplesect kind="see"><para><ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="447" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="446" bodyend="472"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" prot="public" static="no">
        <type>struct <ref refid="struct_a_d_c_buf___config__" kindref="compound">ADCBuf_Config_</ref> *</type>
        <definition>typedef struct ADCBuf_Config_* ADCBuf_Handle</definition>
        <argsstring></argsstring>
        <name>ADCBuf_Handle</name>
        <briefdescription>
<para>A handle that is returned from an <ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref> call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="306" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1a477c377c65f8de04aa67ff7eefa0a4cf" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ADCBuf_Callback) (ADCBuf_Handle handle, ADCBuf_Conversion *conversion, void *completedADCBuffer, uint32_t completedChannel)</definition>
        <argsstring>)(ADCBuf_Handle handle, ADCBuf_Conversion *conversion, void *completedADCBuffer, uint32_t completedChannel)</argsstring>
        <name>ADCBuf_Callback</name>
        <briefdescription>
<para>The definition of a callback function. </para>        </briefdescription>
        <detaileddescription>
<para>When operating in <ref refid="_a_d_c_buf_8h_1a3d643e8024503c5ef2679c83419ba6eea633b4b063b88d7c62e9e2513075a36a7" kindref="member">ADCBuf_RETURN_MODE_CALLBACK</ref>, the callback function is called when an <ref refid="struct_a_d_c_buf___conversion" kindref="compound">ADCBuf_Conversion</ref> completes. The application is responsible for declaring a <ref refid="_a_d_c_buf_8h_1a477c377c65f8de04aa67ff7eefa0a4cf" kindref="member">ADCBuf_Callback</ref> and providing a pointer in <ref refid="struct_a_d_c_buf___params_1a29f674ee9b6739607119d6b50f244e17" kindref="member">ADCBuf_Params.callbackFxn</ref>.</para><para><simplesect kind="warning"><para>The callback function is called from an interrupt context.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">handle</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref> used with the initial call to <ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">conversion</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="struct_a_d_c_buf___conversion" kindref="compound">ADCBuf_Conversion</ref> structure used with the initial call to <ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref>. This structure also contains the custom argument specified by <computeroutput>conversion.arg</computeroutput>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">completedADCBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a buffer containing <computeroutput>conversion.samplesRequestedCount</computeroutput> ADC samples.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">completedChannel</parametername>
</parameternamelist>
<parameterdescription>
<para>ADCBuf channel the samples were performed on.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="struct_a_d_c_buf___conversion" kindref="compound">ADCBuf_Conversion</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_buf_8h_1af15cc4961b02af48216132c2b8bc88f1" kindref="member">ADCBuf_Recurrence_Mode</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_buf_8h_1a3d643e8024503c5ef2679c83419ba6eea633b4b063b88d7c62e9e2513075a36a7" kindref="member">ADCBuf_RETURN_MODE_CALLBACK</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="391" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1a94dfd94e96f6c7e15a9da57feddd60dc" prot="private" static="no">
        <type>void(*</type>
        <definition>typedef void(* ADCBuf_CloseFxn) (ADCBuf_Handle handle)</definition>
        <argsstring>)(ADCBuf_Handle handle)</argsstring>
        <name>ADCBuf_CloseFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_buf_8h_1a04ab5fae5da8f9ff77ab3ae4974d8f7d" kindref="member">ADCBuf_close()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="526" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1ab8084b8145ded40824a3f98e58f9917d" prot="private" static="no">
        <type><ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref>(*</type>
        <definition>typedef ADCBuf_Handle(* ADCBuf_OpenFxn) (ADCBuf_Handle handle, const ADCBuf_Params *params)</definition>
        <argsstring>)(ADCBuf_Handle handle, const ADCBuf_Params *params)</argsstring>
        <name>ADCBuf_OpenFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="533" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="533" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1a24f4127b82e138fa18c8a54b4d914e05" prot="private" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* ADCBuf_ControlFxn) (ADCBuf_Handle handle, uint_fast8_t cmd, void *arg)</definition>
        <argsstring>)(ADCBuf_Handle handle, uint_fast8_t cmd, void *arg)</argsstring>
        <name>ADCBuf_ControlFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_buf_8h_1a87678933c235c0bfc1a26472ef873014" kindref="member">ADCBuf_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="541" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="541" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1ab63b9bc37ab6f5fa2521c18b38c1881e" prot="private" static="no">
        <type>void(*</type>
        <definition>typedef void(* ADCBuf_InitFxn) (ADCBuf_Handle handle)</definition>
        <argsstring>)(ADCBuf_Handle handle)</argsstring>
        <name>ADCBuf_InitFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_buf_8h_1a88a0ab421304465b22417a7adef6c0c2" kindref="member">ADCBuf_init()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="549" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="549" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1a57f40a75d77241e2fda473f0538e404d" prot="private" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* ADCBuf_ConvertFxn) (ADCBuf_Handle handle, ADCBuf_Conversion conversions[], uint_fast8_t channelCount)</definition>
        <argsstring>)(ADCBuf_Handle handle, ADCBuf_Conversion conversions[], uint_fast8_t channelCount)</argsstring>
        <name>ADCBuf_ConvertFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="556" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="556" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1a88bb1333e07a3fee27926064058d5d1b" prot="private" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* ADCBuf_ConvertCancelFxn) (ADCBuf_Handle handle)</definition>
        <argsstring>)(ADCBuf_Handle handle)</argsstring>
        <name>ADCBuf_ConvertCancelFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_buf_8h_1a5201c27bddf11b9f9ae902807bded40d" kindref="member">ADCBuf_convertCancel()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="564" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="564" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1aeff0bfa20eb16c3857b5123da136d320" prot="private" static="no">
        <type>uint_fast8_t(*</type>
        <definition>typedef uint_fast8_t(* ADCBuf_GetResolutionFxn) (ADCBuf_Handle handle)</definition>
        <argsstring>)(ADCBuf_Handle handle)</argsstring>
        <name>ADCBuf_GetResolutionFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of ADCBuf_GetResolution();. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="571" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="571" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1a4a19f2deb010ca0ba5bdcf5586a8cb28" prot="private" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* ADCBuf_adjustRawValuesFxn) (ADCBuf_Handle handle, void *sampleBuffer, uint_fast16_t sampleCount, uint32_t adcChannel)</definition>
        <argsstring>)(ADCBuf_Handle handle, void *sampleBuffer, uint_fast16_t sampleCount, uint32_t adcChannel)</argsstring>
        <name>ADCBuf_adjustRawValuesFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_buf_8h_1a636816201fdb596b748a0ce4d4bf6739" kindref="member">ADCBuf_adjustRawValues()</ref>;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="578" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="578" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1a6ffaac5eaa1253f9b78bbaa6952e1162" prot="private" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* ADCBuf_convertAdjustedToMicroVoltsFxn) (ADCBuf_Handle handle, uint32_t adcChannel, void *adjustedSampleBuffer, uint32_t outputMicroVoltBuffer[], uint_fast16_t sampleCount)</definition>
        <argsstring>)(ADCBuf_Handle handle, uint32_t adcChannel, void *adjustedSampleBuffer, uint32_t outputMicroVoltBuffer[], uint_fast16_t sampleCount)</argsstring>
        <name>ADCBuf_convertAdjustedToMicroVoltsFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_buf_8h_1a815c5b8d43cb93a46298c889dff1019c" kindref="member">ADCBuf_convertAdjustedToMicroVolts()</ref>;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="588" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" bodystart="588" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_buf_8h_1a72d585edb37e7c4c53c278305a8df7d2" prot="public" static="no">
        <type>struct <ref refid="struct_a_d_c_buf___config__" kindref="compound">ADCBuf_Config_</ref></type>
        <definition>typedef struct ADCBuf_Config_  ADCBuf_Config</definition>
        <argsstring></argsstring>
        <name>ADCBuf_Config</name>
        <briefdescription>
<para>ADC driver&apos;s custom <ref refid="index_1driver_configuration" kindref="member">configuration</ref> structure. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="_a_d_c_buf_8h_1a88a0ab421304465b22417a7adef6c0c2" kindref="member">ADCBuf_init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="643" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_a_d_c_buf_8h_1a04ab5fae5da8f9ff77ab3ae4974d8f7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADCBuf_close</definition>
        <argsstring>(ADCBuf_Handle handle)</argsstring>
        <name>ADCBuf_close</name>
        <param>
          <type><ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to close an ADCBuf driver instance. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref> has to be called first.</para></simplesect>
<simplesect kind="pre"><para>In <ref refid="_a_d_c_buf_8h_1af15cc4961b02af48216132c2b8bc88f1ac10945188f88ddadd4322c4e117d5b3c" kindref="member">ADCBuf_RECURRENCE_MODE_CONTINUOUS</ref>, the application must call <ref refid="_a_d_c_buf_8h_1a5201c27bddf11b9f9ae902807bded40d" kindref="member">ADCBuf_convertCancel()</ref> first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref> returned from <ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="656" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_buf_8h_1a87678933c235c0bfc1a26472ef873014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t ADCBuf_control</definition>
        <argsstring>(ADCBuf_Handle handle, uint_fast16_t cmd, void *cmdArg)</argsstring>
        <name>ADCBuf_control</name>
        <param>
          <type><ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint_fast16_t</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cmdArg</declname>
        </param>
        <briefdescription>
<para>Function performs implementation specific features on a driver instance. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref> returned from <ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>A command value defined by the device specific implementation</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cmdArg</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional R/W (read/write) argument that is accompanied with <computeroutput>cmd</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Implementation specific return codes. Negative values indicate unsuccessful operations.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group___a_d_c_buf___c_o_n_t_r_o_l_1gac9c96db575dfaa6bcdfbd94cd875fbd4" kindref="member">ADCBuf_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The call was successful.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___a_d_c_buf___c_o_n_t_r_o_l_1ga5d552a66f63d36a8eaffd53c9deff2f2" kindref="member">ADCBuf_STATUS_UNDEFINEDCMD</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>cmd</computeroutput> value is not supported by the device specific implementation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="680" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_buf_8h_1a88a0ab421304465b22417a7adef6c0c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADCBuf_init</definition>
        <argsstring>(void)</argsstring>
        <name>ADCBuf_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to initialize the ADCBuf driver. </para>        </briefdescription>
        <detaileddescription>
<para>This function must also be called before any other ADCBuf driver APIs. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="689" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_buf_8h_1ae6ddd34c34fd06cdede98fb01033cc47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADCBuf_Params_init</definition>
        <argsstring>(ADCBuf_Params *params)</argsstring>
        <name>ADCBuf_Params_init</name>
        <param>
          <type><ref refid="struct_a_d_c_buf___params" kindref="compound">ADCBuf_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Initialize an <ref refid="struct_a_d_c_buf___params" kindref="compound">ADCBuf_Params</ref> structure to its default values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to <ref refid="struct_a_d_c_buf___params" kindref="compound">ADCBuf_Params</ref> structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Default values are: <itemizedlist>
<listitem><para><ref refid="struct_a_d_c_buf___params_1a17b3cdab5de5cfb81854b86f0cfc0ec1" kindref="member">ADCBuf_Params.returnMode</ref> = <ref refid="_a_d_c_buf_8h_1a3d643e8024503c5ef2679c83419ba6eea5c6236b2f629b196d7874175be679399" kindref="member">ADCBuf_RETURN_MODE_BLOCKING</ref>, </para></listitem>
<listitem><para><ref refid="struct_a_d_c_buf___params_1a3c3b5dab517e5d6bdc6dd68bda1e88d2" kindref="member">ADCBuf_Params.blockingTimeout</ref> = 25000, </para></listitem>
<listitem><para><ref refid="struct_a_d_c_buf___params_1a29f674ee9b6739607119d6b50f244e17" kindref="member">ADCBuf_Params.callbackFxn</ref> = NULL, </para></listitem>
<listitem><para><ref refid="struct_a_d_c_buf___params_1a559d4f3324bdbee8f6b6140a6d7264fb" kindref="member">ADCBuf_Params.recurrenceMode</ref> = <ref refid="_a_d_c_buf_8h_1af15cc4961b02af48216132c2b8bc88f1a1916212b661aa853b7a581e3e5dc35e2" kindref="member">ADCBuf_RECURRENCE_MODE_ONE_SHOT</ref>, </para></listitem>
<listitem><para><ref refid="struct_a_d_c_buf___params_1ad2ca9d85a9379652a86ea9235e4bec82" kindref="member">ADCBuf_Params.samplingFrequency</ref> = 10000, </para></listitem>
<listitem><para><ref refid="struct_a_d_c_buf___params_1a72c7ec51318ec2f8fcf5d2ff37de33e3" kindref="member">ADCBuf_Params.custom</ref> = NULL </para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="705" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref></type>
        <definition>ADCBuf_Handle ADCBuf_open</definition>
        <argsstring>(uint_least8_t index, ADCBuf_Params *params)</argsstring>
        <name>ADCBuf_open</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="struct_a_d_c_buf___params" kindref="compound">ADCBuf_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>This function opens a given ADCBuf peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index in the <computeroutput>ADCBuf_Config</computeroutput>[] array.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an initialized <ref refid="struct_a_d_c_buf___params" kindref="compound">ADCBuf_Params</ref> structure. If NULL, the default <ref refid="struct_a_d_c_buf___params" kindref="compound">ADCBuf_Params</ref> values are used.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref> on success or NULL on error.</para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_buf_8h_1a04ab5fae5da8f9ff77ab3ae4974d8f7d" kindref="member">ADCBuf_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="719" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t ADCBuf_convert</definition>
        <argsstring>(ADCBuf_Handle handle, ADCBuf_Conversion conversions[], uint_fast8_t channelCount)</argsstring>
        <name>ADCBuf_convert</name>
        <param>
          <type><ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_a_d_c_buf___conversion" kindref="compound">ADCBuf_Conversion</ref></type>
          <declname>conversions</declname>
          <array>[]</array>
        </param>
        <param>
          <type>uint_fast8_t</type>
          <declname>channelCount</declname>
        </param>
        <briefdescription>
<para>Starts ADCBuf conversions on one or more channels. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When using <ref refid="_a_d_c_buf_8h_1a3d643e8024503c5ef2679c83419ba6eea5c6236b2f629b196d7874175be679399" kindref="member">ADCBuf_RETURN_MODE_BLOCKING</ref>, this must be called from a thread context.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADCBuf handle returned from <ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">conversions</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an array of <ref refid="struct_a_d_c_buf___conversion" kindref="compound">ADCBuf_Conversion</ref> structures.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channelCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of channels to convert on in this call. Should be the length of the <computeroutput>conversions</computeroutput> array. Depending on the device, multiple simultaneous conversions may not be supported. See device specific implementation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group___a_d_c_buf___c_o_n_t_r_o_l_1gac9c96db575dfaa6bcdfbd94cd875fbd4" kindref="member">ADCBuf_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The conversion was successful. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___a_d_c_buf___c_o_n_t_r_o_l_1ga78f1a705377b5bb15cc6c152f75846e2" kindref="member">ADCBuf_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The conversion failed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref> must have been called.</para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_buf_8h_1a5201c27bddf11b9f9ae902807bded40d" kindref="member">ADCBuf_convertCancel()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_buf_8h_1a3d643e8024503c5ef2679c83419ba6ee" kindref="member">ADCBuf_Return_Mode</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_buf_8h_1af15cc4961b02af48216132c2b8bc88f1" kindref="member">ADCBuf_Recurrence_Mode</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="struct_a_d_c_buf___conversion" kindref="compound">ADCBuf_Conversion</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="747" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_buf_8h_1a5201c27bddf11b9f9ae902807bded40d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t ADCBuf_convertCancel</definition>
        <argsstring>(ADCBuf_Handle handle)</argsstring>
        <name>ADCBuf_convertCancel</name>
        <param>
          <type><ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Cancels all ADCBuf conversions in progress. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref> returned from <ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group___a_d_c_buf___c_o_n_t_r_o_l_1gac9c96db575dfaa6bcdfbd94cd875fbd4" kindref="member">ADCBuf_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The cancel was successful. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___a_d_c_buf___c_o_n_t_r_o_l_1ga78f1a705377b5bb15cc6c152f75846e2" kindref="member">ADCBuf_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The cancel failed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="761" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_buf_8h_1a2ff6d7db155bcd1367ef82a9f5cef19c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint_fast8_t</type>
        <definition>uint_fast8_t ADCBuf_getResolution</definition>
        <argsstring>(ADCBuf_Handle handle)</argsstring>
        <name>ADCBuf_getResolution</name>
        <param>
          <type><ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Returns the resolution in bits of the specified ADCBuf instance. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref> returned from <ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The resolution in bits of the specified ADC.</para></simplesect>
<simplesect kind="pre"><para><ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref> must have been called prior. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="772" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_buf_8h_1a636816201fdb596b748a0ce4d4bf6739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t ADCBuf_adjustRawValues</definition>
        <argsstring>(ADCBuf_Handle handle, void *sampleBuf, uint_fast16_t sampleCount, uint32_t adcChan)</argsstring>
        <name>ADCBuf_adjustRawValues</name>
        <param>
          <type><ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>sampleBuf</declname>
        </param>
        <param>
          <type>uint_fast16_t</type>
          <declname>sampleCount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>adcChan</declname>
        </param>
        <briefdescription>
<para>Adjust a raw ADC output buffer. The function does the adjustment in-place. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADCBuf_Handle returned from <ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sampleBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer full of raw sample values.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sampleCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of samples to adjust.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">adcChan</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel the buffer was sampled on.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group___a_d_c_buf___c_o_n_t_r_o_l_1gac9c96db575dfaa6bcdfbd94cd875fbd4" kindref="member">ADCBuf_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation was successful. <computeroutput>sampleBuf</computeroutput> contains valid values.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___a_d_c_buf___c_o_n_t_r_o_l_1ga78f1a705377b5bb15cc6c152f75846e2" kindref="member">ADCBuf_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if an error occurred.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___a_d_c_buf___c_o_n_t_r_o_l_1ga14c9aea90d55fbbf215ab5a17a33573d" kindref="member">ADCBuf_STATUS_UNSUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The function is not supported by the device specific implementation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert()</ref> must have returned a valid buffer with samples. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="796" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_buf_8h_1a815c5b8d43cb93a46298c889dff1019c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t ADCBuf_convertAdjustedToMicroVolts</definition>
        <argsstring>(ADCBuf_Handle handle, uint32_t adcChan, void *adjustedSampleBuffer, uint32_t outputMicroVoltBuffer[], uint_fast16_t sampleCount)</argsstring>
        <name>ADCBuf_convertAdjustedToMicroVolts</name>
        <param>
          <type><ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>adcChan</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>adjustedSampleBuffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>outputMicroVoltBuffer</declname>
          <array>[]</array>
        </param>
        <param>
          <type>uint_fast16_t</type>
          <declname>sampleCount</declname>
        </param>
        <briefdescription>
<para>Convert an adjusted ADC output buffer to microvolts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADCBuf_Handle returned from <ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">adcChan</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADC channel the samples were performed on.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">adjustedSampleBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer full of adjusted samples.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">outputMicroVoltBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The output buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sampleCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of samples to convert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group___a_d_c_buf___c_o_n_t_r_o_l_1gac9c96db575dfaa6bcdfbd94cd875fbd4" kindref="member">ADCBuf_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation was successful. <computeroutput>outputMicroVoltBuffer</computeroutput> contains valid values.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___a_d_c_buf___c_o_n_t_r_o_l_1ga78f1a705377b5bb15cc6c152f75846e2" kindref="member">ADCBuf_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation failed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><ref refid="_a_d_c_buf_8h_1a636816201fdb596b748a0ce4d4bf6739" kindref="member">ADCBuf_adjustRawValues()</ref> must be called on <computeroutput>adjustedSampleBuffer</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h" line="821" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Analog to Digital Conversion Buffer (ADCBuf) Input Driver. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para><anchor id="_a_d_c_buf_8h_1ti_drivers_ADCBuf_Overview"/><heading level="1">Overview</heading>
</para><para>The ADCBuf driver allows you to sample and convert analog signals at a specified frequency. The resulting samples are placed in a buffer provided by the application. The driver can either take <computeroutput>N</computeroutput> samples once or continuously sample by double-buffering and providing a callback to process each finished buffer.</para><para><hruler/>
 <anchor id="_a_d_c_buf_8h_1ti_drivers_ADCBuf_Usage"/><heading level="1">Usage</heading>
</para><para>This documentation provides a basic <ref refid="_a_d_c_buf_8h_1ti_drivers_ADCBuf_Synopsis" kindref="member">usage summary</ref> and a set of <ref refid="_a_d_c_buf_8h_1ti_drivers_ADCBuf_Examples" kindref="member">examples</ref> in the form of commented code fragments. Detailed descriptions of the APIs are provided in subsequent sections.</para><para><anchor id="_a_d_c_buf_8h_1ti_drivers_ADCBuf_Synopsis"/><heading level="2">Synopsis</heading>
</para><para><anchor id="_a_d_c_buf_8h_1ti_drivers_ADCBuf_Synopsis_Code"/><programlisting><codeline><highlight class="normal">//<sp/>Import<sp/>ADCBuf<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/ADCBuf.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Define<sp/>name<sp/>for<sp/>ADCBuf<sp/>channel<sp/>index</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PIEZOMETER_OUT<sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Create<sp/>buffer<sp/>for<sp/>samples</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADCBUFFERSIZE<sp/><sp/><sp/><sp/><sp/>10</highlight></codeline>
<codeline><highlight class="normal">uint16_t<sp/>buffer[ADCBUFFERSIZE];</highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>microvoltBuffer[ADCBUFFERSIZE];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>One<sp/>time<sp/>init<sp/>of<sp/>ADCBuf<sp/>driver</highlight></codeline>
<codeline><highlight class="normal">ADCBuf_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>optional<sp/>ADCBuf<sp/>parameters</highlight></codeline>
<codeline><highlight class="normal">ADCBuf_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal">ADCBuf_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">params.returnMode<sp/>=<sp/>ADCBuf_RETURN_MODE_BLOCKING;</highlight></codeline>
<codeline><highlight class="normal">params.recurrenceMode<sp/>=<sp/>ADCBuf_RECURRENCE_MODE_ONE_SHOT;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Open<sp/>ADCBuf<sp/>driver</highlight></codeline>
<codeline><highlight class="normal">adcBuf<sp/>=<sp/>ADCBuf_open(CONFIG_ADCBUF0,<sp/>&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Setup<sp/>conversion<sp/>structure</highlight></codeline>
<codeline><highlight class="normal">ADCBuf_Conversion<sp/>conversion<sp/>=<sp/>{0};</highlight></codeline>
<codeline><highlight class="normal">conversion.samplesRequestedCount<sp/>=<sp/>ADCBUFFERSIZE;</highlight></codeline>
<codeline><highlight class="normal">conversion.sampleBuffer<sp/>=<sp/>buffer;</highlight></codeline>
<codeline><highlight class="normal">conversion.adcChannel<sp/>=<sp/>PIEZOMETER_OUT;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Start<sp/>ADCBuf<sp/>conversion</highlight></codeline>
<codeline><highlight class="normal">ADCBuf_convert(adcBuf,<sp/>&amp;conversion,<sp/>1)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Adjust<sp/>raw<sp/>ADC<sp/>values<sp/>and<sp/>convert<sp/>them<sp/>to<sp/>microvolts</highlight></codeline>
<codeline><highlight class="normal">ADCBuf_adjustRawValues(handle,<sp/>buffer,<sp/>ADCBUFFERSIZE,<sp/>PIEZOMETER_OUT);</highlight></codeline>
<codeline><highlight class="normal">ADCBuf_convertAdjustedToMicroVolts(handle,<sp/>PIEZOMETER_OUT,<sp/>buffer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>microvoltBuffer,<sp/>ADCBUFFERSIZE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Close<sp/>ADCBuf<sp/>driver</highlight></codeline>
<codeline><highlight class="normal">ADCBuf_close(adcbuf);</highlight></codeline>
</programlisting></para><para><hruler/>
 <anchor id="_a_d_c_buf_8h_1ti_drivers_ADCBuf_Examples"/><heading level="1">Examples</heading>
</para><para><itemizedlist>
<listitem><para><ref refid="_a_d_c_buf_8h_1ti_drivers_ADCBuf_Examples_open" kindref="member">Opening an ADCBuf instance</ref> </para></listitem>
<listitem><para><ref refid="_a_d_c_buf_8h_1ti_drivers_ADCBuf_Examples_blocking" kindref="member">Using a blocking conversion</ref> </para></listitem>
<listitem><para><ref refid="_a_d_c_buf_8h_1ti_drivers_ADCBuf_Examples_callback" kindref="member">Using a callback conversion</ref></para></listitem>
</itemizedlist>
<anchor id="_a_d_c_buf_8h_1ti_drivers_ADCBuf_Examples_open"/><heading level="2">Opening an ADCBuf instance</heading>
</para><para><programlisting><codeline><highlight class="normal">ADCBuf_Handle<sp/>adcBufHandle;</highlight></codeline>
<codeline><highlight class="normal">ADCBuf_Params<sp/>adcBufParams;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ADCBuf_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ADCBuf_Params_init(&amp;adcBufParams);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">adcBufHandle<sp/>=<sp/>ADCBuf_open(0,<sp/>&amp;adcBufParams);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(adcBufHandle<sp/>==<sp/>NULL)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//ADCBuf_open()<sp/>failed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(1)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><anchor id="_a_d_c_buf_8h_1ti_drivers_ADCBuf_Examples_blocking"/><heading level="2">Using a blocking conversion</heading>
</para><para><programlisting><codeline><highlight class="normal">ADCBuf_Handle<sp/>adcbuf;</highlight></codeline>
<codeline><highlight class="normal">ADCBuf_Params<sp/>params;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ADCBuf_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ADCBuf_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">params.returnMode<sp/>=<sp/>ADCBuf_RETURN_MODE_BLOCKING;</highlight></codeline>
<codeline><highlight class="normal">params.recurrenceMode<sp/>=<sp/>ADCBuf_RECURRENCE_MODE_ONE_SHOT;</highlight></codeline>
<codeline><highlight class="normal">adcbuf<sp/>=<sp/>ADCBuf_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(adcbuf<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ADCBuf_Conversion<sp/>conversion<sp/>=<sp/>{0};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>conversion.adcChannel<sp/>=<sp/>PIEZOMETER_OUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>conversion.sampleBuffer<sp/>=<sp/>buffer;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>conversion.samplesRequestedCount<sp/>=<sp/>ADCBUFFERSIZE;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(ADCBuf_convert(adcbuf,<sp/>&amp;conversion,<sp/>1)<sp/>!=<sp/>ADCBuf_STATUS_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>ADCBuf_conver()<sp/>failed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><anchor id="_a_d_c_buf_8h_1ti_drivers_ADCBuf_Examples_callback"/><heading level="2">Using a callback conversion</heading>
</para><para><programlisting><codeline><highlight class="normal">//<sp/>ADCBuf<sp/>callback<sp/>function</highlight></codeline>
<codeline><highlight class="normal">void<sp/>adcBufCallbackFxn(ADCBuf_Handle<sp/>handle,<sp/>ADCBuf_Conversion<sp/>*conversion,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>*buffer,<sp/>uint32_t<sp/>channel);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ADCBuf_Handle<sp/>adcbuf;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ADCBuf_Params<sp/>params;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ADCBuf_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ADCBuf_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params.returnMode<sp/>=<sp/>ADCBuf_RETURN_MODE_CALLBACK;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params.recurrenceMode<sp/>=<sp/>ADCBuf_RECURRENCE_MODE_ONE_SHOT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params.callbackFxn<sp/>=<sp/>adcBufCallbackFxn;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>adcbuf<sp/>=<sp/>ADCBuf_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ADCBuf_Conversion<sp/>conversion<sp/>=<sp/>{0};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>conversion.adcChannel<sp/>=<sp/>PIEZOMETER_OUT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>conversion.sampleBuffer<sp/>=<sp/>buffer;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>conversion.samplesRequestedCount<sp/>=<sp/>ADCBUFFERSIZE;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(ADCBuf_convert(adcbuf,<sp/>&amp;conversion,<sp/>1)<sp/>!=<sp/>ADCBuf_STATUS_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>ADCBuf_convert()<sp/>failed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Pend<sp/>on<sp/>a<sp/>semaphore</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>adcBufCallbackFxn(ADCBuf_Handle<sp/>handle,<sp/>ADCBuf_Conversion<sp/>*conversion,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>*buffer,<sp/>uint32_t<sp/>channel)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Adjust<sp/>raw<sp/>ADC<sp/>values<sp/>and<sp/>convert<sp/>them<sp/>to<sp/>microvolts</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ADCBuf_adjustRawValues(handle,<sp/>buffer,<sp/>ADCBUFFERSIZE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ADCBuf_convertAdjustedToMicroVolts(handle,<sp/>channel,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer,<sp/>microvoltBuffer,<sp/>ADCBUFFERSIZE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Post<sp/>a<sp/>semaphore</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><hruler/>
 <anchor id="_a_d_c_buf_8h_1ti_drivers_ADCBuf_Configuration"/><heading level="1">Configuration</heading>
</para><para>Refer to the <ref refid="index_1driver_configuration" kindref="member">Driver&apos;s Configuration</ref> section for driver configuration information. <hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016-2019,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*!*****************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADCBuf.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>Analog<sp/>to<sp/>Digital<sp/>Conversion<sp/>Buffer<sp/>(ADCBuf)<sp/>Input<sp/>Driver</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_ADCBuf_Overview</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Overview</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>ADCBuf<sp/>driver<sp/>allows<sp/>you<sp/>to<sp/>sample<sp/>and<sp/>convert<sp/>analog<sp/>signals</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/>at<sp/>a<sp/>specified<sp/>frequency.<sp/>The<sp/>resulting<sp/>samples<sp/>are<sp/>placed<sp/>in</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/>a<sp/>buffer<sp/>provided<sp/>by<sp/>the<sp/>application.<sp/>The<sp/>driver<sp/>can<sp/>either<sp/>take<sp/>@p<sp/>N</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/>samples<sp/>once<sp/>or<sp/>continuously<sp/>sample<sp/>by<sp/>double-buffering<sp/>and<sp/>providing<sp/>a</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/>callback<sp/>to<sp/>process<sp/>each<sp/>finished<sp/>buffer.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_ADCBuf_Usage</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Usage</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>documentation<sp/>provides<sp/>a<sp/>basic<sp/>@ref<sp/>ti_drivers_ADCBuf_Synopsis</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/>&quot;usage<sp/>summary&quot;<sp/>and<sp/>a<sp/>set<sp/>of<sp/>@ref<sp/>ti_drivers_ADCBuf_Examples<sp/>&quot;examples&quot;</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/>in<sp/>the<sp/>form<sp/>of<sp/>commented<sp/>code<sp/>fragments.<sp/>Detailed<sp/>descriptions<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/>APIs<sp/>are<sp/>provided<sp/>in<sp/>subsequent<sp/>sections.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_ADCBuf_Synopsis</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Synopsis</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_ADCBuf_Synopsis_Code</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Import<sp/>ADCBuf<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/ADCBuf.h&gt;</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Define<sp/>name<sp/>for<sp/>ADCBuf<sp/>channel<sp/>index</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/>#define<sp/>PIEZOMETER_OUT<sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Create<sp/>buffer<sp/>for<sp/>samples</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/><sp/>#define<sp/>ADCBUFFERSIZE<sp/><sp/><sp/><sp/><sp/>10</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/>uint16_t<sp/>buffer[ADCBUFFERSIZE];</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/>uint32_t<sp/>microvoltBuffer[ADCBUFFERSIZE];</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>One<sp/>time<sp/>init<sp/>of<sp/>ADCBuf<sp/>driver</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/>ADCBuf_init();</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Initialize<sp/>optional<sp/>ADCBuf<sp/>parameters</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/><sp/>ADCBuf_Params<sp/>params;</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/>ADCBuf_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/>params.returnMode<sp/>=<sp/>ADCBuf_RETURN_MODE_BLOCKING;</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/><sp/>params.recurrenceMode<sp/>=<sp/>ADCBuf_RECURRENCE_MODE_ONE_SHOT;</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Open<sp/>ADCBuf<sp/>driver</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/>adcBuf<sp/>=<sp/>ADCBuf_open(CONFIG_ADCBUF0,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Setup<sp/>conversion<sp/>structure</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/>ADCBuf_Conversion<sp/>conversion<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/>conversion.samplesRequestedCount<sp/>=<sp/>ADCBUFFERSIZE;</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/>conversion.sampleBuffer<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/>conversion.adcChannel<sp/>=<sp/>PIEZOMETER_OUT;</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Start<sp/>ADCBuf<sp/>conversion</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/>ADCBuf_convert(adcBuf,<sp/>&amp;conversion,<sp/>1)</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Adjust<sp/>raw<sp/>ADC<sp/>values<sp/>and<sp/>convert<sp/>them<sp/>to<sp/>microvolts</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/>ADCBuf_adjustRawValues(handle,<sp/>buffer,<sp/>ADCBUFFERSIZE,<sp/>PIEZOMETER_OUT);</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/>ADCBuf_convertAdjustedToMicroVolts(handle,<sp/>PIEZOMETER_OUT,<sp/>buffer,</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>microvoltBuffer,<sp/>ADCBUFFERSIZE);</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Close<sp/>ADCBuf<sp/>driver</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/>ADCBuf_close(adcbuf);</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_ADCBuf_Examples</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Examples</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>@ref<sp/>ti_drivers_ADCBuf_Examples_open<sp/>&quot;Opening<sp/>an<sp/>ADCBuf<sp/>instance&quot;</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>@ref<sp/>ti_drivers_ADCBuf_Examples_blocking<sp/>&quot;Using<sp/>a<sp/>blocking<sp/>conversion&quot;</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>@ref<sp/>ti_drivers_ADCBuf_Examples_callback<sp/>&quot;Using<sp/>a<sp/>callback<sp/>conversion&quot;</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_ADCBuf_Examples_open</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Opening<sp/>an<sp/>ADCBuf<sp/>instance</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/><sp/>ADCBuf_Handle<sp/>adcBufHandle;</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/><sp/>ADCBuf_Params<sp/>adcBufParams;</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/><sp/>ADCBuf_init();</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/><sp/>ADCBuf_Params_init(&amp;adcBufParams);</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/><sp/>adcBufHandle<sp/>=<sp/>ADCBuf_open(0,<sp/>&amp;adcBufParams);</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(adcBufHandle<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//ADCBuf_open()<sp/>failed.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(1)<sp/>{}</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_ADCBuf_Examples_blocking</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Using<sp/>a<sp/>blocking<sp/>conversion</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/>ADCBuf_Handle<sp/>adcbuf;</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/><sp/>ADCBuf_Params<sp/>params;</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/><sp/>ADCBuf_init();</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/><sp/>ADCBuf_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/><sp/>params.returnMode<sp/>=<sp/>ADCBuf_RETURN_MODE_BLOCKING;</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/><sp/>params.recurrenceMode<sp/>=<sp/>ADCBuf_RECURRENCE_MODE_ONE_SHOT;</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/><sp/>adcbuf<sp/>=<sp/>ADCBuf_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(adcbuf<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>ADCBuf_Conversion<sp/>conversion<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>conversion.adcChannel<sp/>=<sp/>PIEZOMETER_OUT;</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>conversion.sampleBuffer<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>conversion.samplesRequestedCount<sp/>=<sp/>ADCBUFFERSIZE;</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ADCBuf_convert(adcbuf,<sp/>&amp;conversion,<sp/>1)<sp/>!=<sp/>ADCBuf_STATUS_SUCCESS)</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>ADCBuf_conver()<sp/>failed</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_ADCBuf_Examples_callback</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Using<sp/>a<sp/>callback<sp/>conversion</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>ADCBuf<sp/>callback<sp/>function</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/><sp/>void<sp/>adcBufCallbackFxn(ADCBuf_Handle<sp/>handle,<sp/>ADCBuf_Conversion<sp/>*conversion,</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>*buffer,<sp/>uint32_t<sp/>channel);</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/><sp/>main()</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>ADCBuf_Handle<sp/>adcbuf;</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>ADCBuf_Params<sp/>params;</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>ADCBuf_init();</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>ADCBuf_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>params.returnMode<sp/>=<sp/>ADCBuf_RETURN_MODE_CALLBACK;</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>params.recurrenceMode<sp/>=<sp/>ADCBuf_RECURRENCE_MODE_ONE_SHOT;</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>params.callbackFxn<sp/>=<sp/>adcBufCallbackFxn;</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>adcbuf<sp/>=<sp/>ADCBuf_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>ADCBuf_Conversion<sp/>conversion<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>conversion.adcChannel<sp/>=<sp/>PIEZOMETER_OUT;</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>conversion.sampleBuffer<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>conversion.samplesRequestedCount<sp/>=<sp/>ADCBUFFERSIZE;</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ADCBuf_convert(adcbuf,<sp/>&amp;conversion,<sp/>1)<sp/>!=<sp/>ADCBuf_STATUS_SUCCESS)</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>ADCBuf_convert()<sp/>failed</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Pend<sp/>on<sp/>a<sp/>semaphore</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/><sp/>void<sp/>adcBufCallbackFxn(ADCBuf_Handle<sp/>handle,<sp/>ADCBuf_Conversion<sp/>*conversion,</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>*buffer,<sp/>uint32_t<sp/>channel)</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Adjust<sp/>raw<sp/>ADC<sp/>values<sp/>and<sp/>convert<sp/>them<sp/>to<sp/>microvolts</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>ADCBuf_adjustRawValues(handle,<sp/>buffer,<sp/>ADCBUFFERSIZE,</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>ADCBuf_convertAdjustedToMicroVolts(handle,<sp/>channel,</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer,<sp/>microvoltBuffer,<sp/>ADCBUFFERSIZE);</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Post<sp/>a<sp/>semaphore</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_ADCBuf_Configuration</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Configuration</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/><sp/>Refer<sp/>to<sp/>the<sp/>@ref<sp/>driver_configuration<sp/>&quot;Driver&apos;s<sp/>Configuration&quot;<sp/>section</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/><sp/>for<sp/>driver<sp/>configuration<sp/>information.</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>******************************************************************************</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_adcbuf__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_adcbuf__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="group___a_d_c_buf___c_o_n_t_r_o_l_1ga6d889e191027535ad318be0b9c3765d1" refkind="member"><highlight class="preprocessor">#define<sp/>ADCBuf_CMD_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="251" refid="group___a_d_c_buf___c_o_n_t_r_o_l_1ga61f0abe91c78f6ab7003c53e513d4d3b" refkind="member"><highlight class="preprocessor">#define<sp/>ADCBuf_STATUS_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="group___a_d_c_buf___c_o_n_t_r_o_l_1gac9c96db575dfaa6bcdfbd94cd875fbd4" refkind="member"><highlight class="preprocessor">#define<sp/>ADCBuf_STATUS_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="group___a_d_c_buf___c_o_n_t_r_o_l_1ga78f1a705377b5bb15cc6c152f75846e2" refkind="member"><highlight class="preprocessor">#define<sp/>ADCBuf_STATUS_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="group___a_d_c_buf___c_o_n_t_r_o_l_1ga5d552a66f63d36a8eaffd53c9deff2f2" refkind="member"><highlight class="preprocessor">#define<sp/>ADCBuf_STATUS_UNDEFINEDCMD<sp/><sp/><sp/><sp/><sp/><sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="group___a_d_c_buf___c_o_n_t_r_o_l_1ga14c9aea90d55fbbf215ab5a17a33573d" refkind="member"><highlight class="preprocessor">#define<sp/>ADCBuf_STATUS_UNSUPPORTED<sp/><sp/><sp/><sp/><sp/><sp/>(-3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="comment">/*<sp/>Add<sp/>ADCBuf_CMD_&lt;commands&gt;<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_d_c_buf___config__" kindref="compound">ADCBuf_Config_</ref><sp/>*<ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref>;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="315" refid="struct_a_d_c_buf___conversion" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323" refid="struct_a_d_c_buf___conversion_1afd95c203d1e7dd347102eef22dc9cc93" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="struct_a_d_c_buf___conversion_1afd95c203d1e7dd347102eef22dc9cc93" kindref="member">samplesRequestedCount</ref>;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="330" refid="struct_a_d_c_buf___conversion_1a5415e58a69e40124f66cdcc52a097c4a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_a_d_c_buf___conversion_1a5415e58a69e40124f66cdcc52a097c4a" kindref="member">sampleBuffer</ref>;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="341" refid="struct_a_d_c_buf___conversion_1a6953e200ba2e5a85b9197bdaeb101a5f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_a_d_c_buf___conversion_1a6953e200ba2e5a85b9197bdaeb101a5f" kindref="member">sampleBufferTwo</ref>;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="353" refid="struct_a_d_c_buf___conversion_1a47080bd2e4d552858be60f6e25be58dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_a_d_c_buf___conversion_1a47080bd2e4d552858be60f6e25be58dc" kindref="member">arg</ref>;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="struct_a_d_c_buf___conversion_1a379de126469bdd35de64c36498fafb51" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_a_d_c_buf___conversion_1a379de126469bdd35de64c36498fafb51" kindref="member">adcChannel</ref>;</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}<sp/><ref refid="struct_a_d_c_buf___conversion" kindref="compound">ADCBuf_Conversion</ref>;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="391" refid="_a_d_c_buf_8h_1a477c377c65f8de04aa67ff7eefa0a4cf" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_a_d_c_buf_8h_1a477c377c65f8de04aa67ff7eefa0a4cf" kindref="member">ADCBuf_Callback</ref>)<sp/>(ADCBuf_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___conversion" kindref="compound">ADCBuf_Conversion</ref><sp/>*conversion,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*completedADCBuffer,</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>completedChannel);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="_a_d_c_buf_8h_1af15cc4961b02af48216132c2b8bc88f1" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal">{</highlight></codeline>
<codeline lineno="416" refid="_a_d_c_buf_8h_1af15cc4961b02af48216132c2b8bc88f1a1916212b661aa853b7a581e3e5dc35e2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_buf_8h_1af15cc4961b02af48216132c2b8bc88f1a1916212b661aa853b7a581e3e5dc35e2" kindref="member">ADCBuf_RECURRENCE_MODE_ONE_SHOT</ref>,</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="434" refid="_a_d_c_buf_8h_1af15cc4961b02af48216132c2b8bc88f1ac10945188f88ddadd4322c4e117d5b3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_buf_8h_1af15cc4961b02af48216132c2b8bc88f1ac10945188f88ddadd4322c4e117d5b3c" kindref="member">ADCBuf_RECURRENCE_MODE_CONTINUOUS</ref></highlight></codeline>
<codeline lineno="435"><highlight class="normal">}<sp/><ref refid="_a_d_c_buf_8h_1af15cc4961b02af48216132c2b8bc88f1" kindref="member">ADCBuf_Recurrence_Mode</ref>;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="446" refid="_a_d_c_buf_8h_1a3d643e8024503c5ef2679c83419ba6ee" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal">{</highlight></codeline>
<codeline lineno="458" refid="_a_d_c_buf_8h_1a3d643e8024503c5ef2679c83419ba6eea5c6236b2f629b196d7874175be679399" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_buf_8h_1a3d643e8024503c5ef2679c83419ba6eea5c6236b2f629b196d7874175be679399" kindref="member">ADCBuf_RETURN_MODE_BLOCKING</ref>,</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="471" refid="_a_d_c_buf_8h_1a3d643e8024503c5ef2679c83419ba6eea633b4b063b88d7c62e9e2513075a36a7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_buf_8h_1a3d643e8024503c5ef2679c83419ba6eea633b4b063b88d7c62e9e2513075a36a7" kindref="member">ADCBuf_RETURN_MODE_CALLBACK</ref></highlight></codeline>
<codeline lineno="472"><highlight class="normal">}<sp/><ref refid="_a_d_c_buf_8h_1a3d643e8024503c5ef2679c83419ba6ee" kindref="member">ADCBuf_Return_Mode</ref>;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="482" refid="struct_a_d_c_buf___params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">{</highlight></codeline>
<codeline lineno="496" refid="struct_a_d_c_buf___params_1a3c3b5dab517e5d6bdc6dd68bda1e88d2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___params_1a3c3b5dab517e5d6bdc6dd68bda1e88d2" kindref="member">blockingTimeout</ref>;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="503" refid="struct_a_d_c_buf___params_1ad2ca9d85a9379652a86ea9235e4bec82" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___params_1ad2ca9d85a9379652a86ea9235e4bec82" kindref="member">samplingFrequency</ref>;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="506" refid="struct_a_d_c_buf___params_1a17b3cdab5de5cfb81854b86f0cfc0ec1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCBuf_Return_Mode<sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___params_1a17b3cdab5de5cfb81854b86f0cfc0ec1" kindref="member">returnMode</ref>;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="512" refid="struct_a_d_c_buf___params_1a29f674ee9b6739607119d6b50f244e17" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_buf_8h_1a477c377c65f8de04aa67ff7eefa0a4cf" kindref="member">ADCBuf_Callback</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___params_1a29f674ee9b6739607119d6b50f244e17" kindref="member">callbackFxn</ref>;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="515" refid="struct_a_d_c_buf___params_1a559d4f3324bdbee8f6b6140a6d7264fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCBuf_Recurrence_Mode<sp/><ref refid="struct_a_d_c_buf___params_1a559d4f3324bdbee8f6b6140a6d7264fb" kindref="member">recurrenceMode</ref>;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="518" refid="struct_a_d_c_buf___params_1a72c7ec51318ec2f8fcf5d2ff37de33e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_a_d_c_buf___params_1a72c7ec51318ec2f8fcf5d2ff37de33e3" kindref="member">custom</ref>;</highlight></codeline>
<codeline lineno="519"><highlight class="normal">}<sp/><ref refid="struct_a_d_c_buf___params" kindref="compound">ADCBuf_Params</ref>;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*ADCBuf_CloseFxn)<sp/>(ADCBuf_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_a_d_c_buf_8h_1a12e1cd567193c54b72c1baa82e6b221b" kindref="member">ADCBuf_Handle</ref><sp/>(*ADCBuf_OpenFxn)<sp/>(ADCBuf_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_d_c_buf___params" kindref="compound">ADCBuf_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*ADCBuf_ControlFxn)<sp/>(ADCBuf_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_fast8_t<sp/>cmd,</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="549"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*ADCBuf_InitFxn)<sp/>(ADCBuf_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*ADCBuf_ConvertFxn)<sp/>(ADCBuf_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___conversion" kindref="compound">ADCBuf_Conversion</ref><sp/>conversions[],</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_fast8_t<sp/>channelCount);</highlight></codeline>
<codeline lineno="564"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*ADCBuf_ConvertCancelFxn)(ADCBuf_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint_fast8_t<sp/>(*ADCBuf_GetResolutionFxn)<sp/>(ADCBuf_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*ADCBuf_adjustRawValuesFxn)(ADCBuf_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*sampleBuffer,</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_fast16_t<sp/>sampleCount,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>adcChannel);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*ADCBuf_convertAdjustedToMicroVoltsFxn)<sp/>(</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADCBuf_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>adcChannel,</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*adjustedSampleBuffer,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>outputMicroVoltBuffer[],</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_fast16_t<sp/>sampleCount);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="600" refid="struct_a_d_c_buf___fxn_table" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="603" refid="struct_a_d_c_buf___fxn_table_1a443b411e8c7e9873f34c2f827a07fc6b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCBuf_CloseFxn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closeFxn;</highlight></codeline>
<codeline lineno="605" refid="struct_a_d_c_buf___fxn_table_1a89ea3261a27de9bfa94ba4299d0f6082" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCBuf_ControlFxn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>controlFxn;</highlight></codeline>
<codeline lineno="607" refid="struct_a_d_c_buf___fxn_table_1aa7616fc3e78d72a3836b08f11632ac2d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCBuf_InitFxn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initFxn;</highlight></codeline>
<codeline lineno="609" refid="struct_a_d_c_buf___fxn_table_1adc31e28a3c2270c8159c5fb88ce14167" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCBuf_OpenFxn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openFxn;</highlight></codeline>
<codeline lineno="611" refid="struct_a_d_c_buf___fxn_table_1af242d84a8ec0284b071b7ec14f77f54c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCBuf_ConvertFxn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convertFxn;</highlight></codeline>
<codeline lineno="614" refid="struct_a_d_c_buf___fxn_table_1a2803deeb90c108c539a340d711c51351" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCBuf_ConvertCancelFxn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convertCancelFxn;</highlight></codeline>
<codeline lineno="616" refid="struct_a_d_c_buf___fxn_table_1ac351196231c2ee97db44d1fa6410f3dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCBuf_GetResolutionFxn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getResolutionFxn;</highlight></codeline>
<codeline lineno="619" refid="struct_a_d_c_buf___fxn_table_1a0b80725420ba691dc6a20505fcdf5522" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCBuf_adjustRawValuesFxn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adjustRawValuesFxn;</highlight></codeline>
<codeline lineno="621" refid="struct_a_d_c_buf___fxn_table_1a01e865f5a1ce7cbd748f05b16b87a39d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCBuf_convertAdjustedToMicroVoltsFxn<sp/>convertAdjustedToMicroVoltsFxn;</highlight></codeline>
<codeline lineno="622"><highlight class="normal">}<sp/><ref refid="struct_a_d_c_buf___fxn_table" kindref="compound">ADCBuf_FxnTable</ref>;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="631" refid="struct_a_d_c_buf___config__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_d_c_buf___config__" kindref="compound">ADCBuf_Config_</ref></highlight></codeline>
<codeline lineno="632"><highlight class="normal">{</highlight></codeline>
<codeline lineno="635" refid="struct_a_d_c_buf___config___1a2b0117b07999dee4f4189aef978b52c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_d_c_buf___fxn_table" kindref="compound">ADCBuf_FxnTable</ref><sp/>*<ref refid="struct_a_d_c_buf___config___1a2b0117b07999dee4f4189aef978b52c6" kindref="member">fxnTablePtr</ref>;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="638" refid="struct_a_d_c_buf___config___1a54674c23d536bfa6585f24962ffd2689" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_a_d_c_buf___config___1a54674c23d536bfa6585f24962ffd2689" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="642" refid="struct_a_d_c_buf___config___1a56cf8ec1b583817f01c5121ce44800d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_a_d_c_buf___config___1a56cf8ec1b583817f01c5121ce44800d8" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="643"><highlight class="normal">}<sp/><ref refid="_a_d_c_buf_8h_1a72d585edb37e7c4c53c278305a8df7d2" kindref="member">ADCBuf_Config</ref>;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_d_c_buf_8h_1a04ab5fae5da8f9ff77ab3ae4974d8f7d" kindref="member">ADCBuf_close</ref>(ADCBuf_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_a_d_c_buf_8h_1a87678933c235c0bfc1a26472ef873014" kindref="member">ADCBuf_control</ref>(ADCBuf_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_fast16_t<sp/>cmd,</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cmdArg);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_d_c_buf_8h_1a88a0ab421304465b22417a7adef6c0c2" kindref="member">ADCBuf_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_d_c_buf_8h_1ae6ddd34c34fd06cdede98fb01033cc47" kindref="member">ADCBuf_Params_init</ref>(<ref refid="struct_a_d_c_buf___params" kindref="compound">ADCBuf_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ADCBuf_Handle<sp/><ref refid="_a_d_c_buf_8h_1a292e0e615d57d93c2f87f7e915e7027b" kindref="member">ADCBuf_open</ref>(uint_least8_t<sp/>index,<sp/><ref refid="struct_a_d_c_buf___params" kindref="compound">ADCBuf_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_a_d_c_buf_8h_1a762253a94875258c5a71b591f03f9d97" kindref="member">ADCBuf_convert</ref>(ADCBuf_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c_buf___conversion" kindref="compound">ADCBuf_Conversion</ref><sp/>conversions[],</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_fast8_t<sp/>channelCount);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_a_d_c_buf_8h_1a5201c27bddf11b9f9ae902807bded40d" kindref="member">ADCBuf_convertCancel</ref>(ADCBuf_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint_fast8_t<sp/><ref refid="_a_d_c_buf_8h_1a2ff6d7db155bcd1367ef82a9f5cef19c" kindref="member">ADCBuf_getResolution</ref>(ADCBuf_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_a_d_c_buf_8h_1a636816201fdb596b748a0ce4d4bf6739" kindref="member">ADCBuf_adjustRawValues</ref>(ADCBuf_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*sampleBuf,</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_fast16_t<sp/>sampleCount,</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>adcChan);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_a_d_c_buf_8h_1a815c5b8d43cb93a46298c889dff1019c" kindref="member">ADCBuf_convertAdjustedToMicroVolts</ref>(</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADCBuf_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/>adcChan,</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*adjustedSampleBuffer,</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>outputMicroVoltBuffer[],</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_fast16_t<sp/>sampleCount);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_adcbuf__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_msp432/source/ti/drivers/ADCBuf.h"/>
  </compounddef>
</doxygen>
