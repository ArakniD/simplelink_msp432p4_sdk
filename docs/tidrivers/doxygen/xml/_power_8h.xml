<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_power_8h" kind="file" language="C++">
    <compoundname>Power.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdint.h</includes>
    <includes refid="_list_8h" local="no">ti/drivers/utils/List.h</includes>
    <includedby refid="_a_d_c_m_s_p432_8h" local="no">ADCMSP432.h</includedby>
    <includedby refid="_a_d_c_buf_m_s_p432_8h" local="no">ADCBufMSP432.h</includedby>
    <includedby refid="_i2_c_m_s_p432_8h" local="no">I2CMSP432.h</includedby>
    <includedby refid="_i2_c_slave_m_s_p432_8h" local="no">I2CSlaveMSP432.h</includedby>
    <includedby refid="_power_m_s_p432_8h" local="no">PowerMSP432.h</includedby>
    <includedby refid="_p_w_m_timer_m_s_p432_8h" local="no">PWMTimerMSP432.h</includedby>
    <includedby refid="_s_p_i_m_s_p432_d_m_a_8h" local="no">SPIMSP432DMA.h</includedby>
    <includedby refid="_timer_m_s_p432_8h" local="no">TimerMSP432.h</includedby>
    <includedby refid="_u_a_r_t_m_s_p432_8h" local="no">UARTMSP432.h</includedby>
    <incdepgraph>
      <node id="173">
        <label>stdbool.h</label>
      </node>
      <node id="175">
        <label>ti/drivers/utils/List.h</label>
        <link refid="_list_8h"/>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="176" relation="include">
        </childnode>
      </node>
      <node id="174">
        <label>stdint.h</label>
      </node>
      <node id="176">
        <label>stddef.h</label>
      </node>
      <node id="172">
        <label>Power.h</label>
        <link refid="_power_8h"/>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="180">
        <label>I2CMSP432.h</label>
        <link refid="_i2_c_m_s_p432_8h"/>
      </node>
      <node id="181">
        <label>I2CSlaveMSP432.h</label>
        <link refid="_i2_c_slave_m_s_p432_8h"/>
      </node>
      <node id="178">
        <label>ADCMSP432.h</label>
        <link refid="_a_d_c_m_s_p432_8h"/>
      </node>
      <node id="182">
        <label>PowerMSP432.h</label>
        <link refid="_power_m_s_p432_8h"/>
      </node>
      <node id="184">
        <label>SPIMSP432DMA.h</label>
        <link refid="_s_p_i_m_s_p432_d_m_a_8h"/>
      </node>
      <node id="179">
        <label>ADCBufMSP432.h</label>
        <link refid="_a_d_c_buf_m_s_p432_8h"/>
      </node>
      <node id="185">
        <label>TimerMSP432.h</label>
        <link refid="_timer_m_s_p432_8h"/>
        <childnode refid="186" relation="include">
        </childnode>
      </node>
      <node id="183">
        <label>PWMTimerMSP432.h</label>
        <link refid="_p_w_m_timer_m_s_p432_8h"/>
      </node>
      <node id="186">
        <label>CaptureMSP432.h</label>
        <link refid="_capture_m_s_p432_8h"/>
      </node>
      <node id="177">
        <label>Power.h</label>
        <link refid="_power_8h"/>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
        <childnode refid="183" relation="include">
        </childnode>
        <childnode refid="184" relation="include">
        </childnode>
        <childnode refid="185" relation="include">
        </childnode>
        <childnode refid="187" relation="include">
        </childnode>
      </node>
      <node id="187">
        <label>UARTMSP432.h</label>
        <link refid="_u_a_r_t_m_s_p432_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_power___notify_obj__" prot="public">Power_NotifyObj_</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_power_8h_1aa5e33b10202cc5a261c1800b4ae1de3e" prot="public" static="no">
        <name>Power_TOTAL</name>
        <initializer>(1U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>total latency </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="74" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Power.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_power_8h_1a7343f6504f2df361dca3760a97584371" prot="public" static="no">
        <name>Power_RESUME</name>
        <initializer>(2U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>resume latency </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="75" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Power.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_power_8h_1a98c91c03b469de0cf4f53b89a867ee19" prot="public" static="no">
        <name>Power_NOTIFYDONE</name>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>OK, notify completed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="78" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Power.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_power_8h_1a98066f45fce59fd38d8edcb6f2ac96fd" prot="public" static="no">
        <name>Power_NOTIFYERROR</name>
        <initializer>(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>an error occurred during notify </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="79" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Power.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_power_8h_1a92eed670a5d7e3d43f612ca0da9d3fe2" prot="public" static="no">
        <name>Power_SOK</name>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>OK, operation succeeded </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="82" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Power.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_power_8h_1aed2f92a8c72bfa183e14d10a2e35789f" prot="public" static="no">
        <name>Power_EFAIL</name>
        <initializer>(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>general failure </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="83" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Power.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_power_8h_1a200ab87d1e0ffbc4eb3864d18646e0f7" prot="public" static="no">
        <name>Power_EINVALIDINPUT</name>
        <initializer>(-2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>invalid data value </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="84" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Power.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_power_8h_1a0d24bacb087e8282be2e4394503a429a" prot="public" static="no">
        <name>Power_EINVALIDPOINTER</name>
        <initializer>(-3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>invalid pointer </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="85" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Power.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_power_8h_1aa4e7b580b1c9c026036bf53befe5723b" prot="public" static="no">
        <name>Power_ECHANGE_NOT_ALLOWED</name>
        <initializer>(-4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>change is not allowed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="86" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Power.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_power_8h_1a3132904395c5631392bd6301d9a2181e" prot="public" static="no">
        <name>Power_EBUSY</name>
        <initializer>(-5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>busy with another transition </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="87" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Power.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_power_8h_1a01074d8221d330077fbe040b9143e183" prot="public" static="no">
        <name>Power_ACTIVE</name>
        <initializer>(1U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>normal active state </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="90" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Power.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_power_8h_1a6038b3877b09c908834af7d46595b989" prot="public" static="no">
        <name>Power_ENTERING_SLEEP</name>
        <initializer>(2U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>entering a sleep state </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="91" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Power.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_power_8h_1a1ea41cdfb6fb053eaed2792c4edf886d" prot="public" static="no">
        <name>Power_EXITING_SLEEP</name>
        <initializer>(3U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>exiting a sleep state </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="92" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Power.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_power_8h_1ad09d75dfaa5d799c4f044df9814db485" prot="public" static="no">
        <name>Power_ENTERING_SHUTDOWN</name>
        <initializer>(4U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>entering a shutdown state </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="93" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Power.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_power_8h_1a2b7d4ba49a9418af10c84132a8cbf108" prot="public" static="no">
        <name>Power_CHANGING_PERF_LEVEL</name>
        <initializer>(5U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>moving to new performance level </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="94" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Power.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_power_8h_1a435fdeb71d13ea6be86f599c9b6a0d78" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Power_PolicyInitFxn) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>Power_PolicyInitFxn</name>
        <briefdescription>
<para>Power policy initialization function pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="100" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Power.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_power_8h_1a333038d1e9cd5f93dda7b83f8a1afa8b" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Power_PolicyFxn) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>Power_PolicyFxn</name>
        <briefdescription>
<para>Power policy function pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="105" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Power.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_power_8h_1ad6c365f54d37429c5bd32181e5dbf463" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* Power_NotifyFxn) (uint_fast16_t eventType, uintptr_t eventArg, uintptr_t clientArg)</definition>
        <argsstring>)(uint_fast16_t eventType, uintptr_t eventArg, uintptr_t clientArg)</argsstring>
        <name>Power_NotifyFxn</name>
        <briefdescription>
<para>Power notify function pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="110" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Power.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_power_8h_1a380d08b754e6f3f096349ab5fc464209" prot="public" static="no">
        <type>struct <ref refid="struct_power___notify_obj__" kindref="compound">Power_NotifyObj_</ref></type>
        <definition>typedef struct Power_NotifyObj_  Power_NotifyObj</definition>
        <argsstring></argsstring>
        <name>Power_NotifyObj</name>
        <briefdescription>
<para>Power notify object structure. </para>        </briefdescription>
        <detaileddescription>
<para>This struct specification is for internal use. Notification clients must pre-allocate a notify object when registering for a notification; <ref refid="_power_8h_1aa89d120c82d4f23e6d4a337720b6300e" kindref="member">Power_registerNotify()</ref> will take care initializing the internal elements appropriately. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="126" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_power_8h_1acf9706c39bd0fa07ec977dd643e5dd2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Power_disablePolicy</definition>
        <argsstring>(void)</argsstring>
        <name>Power_disablePolicy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Disable the configured power policy from running when the CPU is idle. </para>        </briefdescription>
        <detaileddescription>
<para>Calling this function clears the flag that controls whether the configured power policy function is invoked on each pass through the Idle loop. This function call will override both a &apos;true&apos; setting of the &quot;enablePolicy&quot; setting in the Power Manager configuration object, as well as a previous runtime call to the <ref refid="_power_8h_1ae8d6092a8fb35b6db52a69a35fcc327f" kindref="member">Power_enablePolicy()</ref> function.</para><para><simplesect kind="return"><para>The old value of &quot;enablePolicy&quot;.</para></simplesect>
<simplesect kind="see"><para><ref refid="_power_8h_1ae8d6092a8fb35b6db52a69a35fcc327f" kindref="member">Power_enablePolicy</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_power_8h_1ae8d6092a8fb35b6db52a69a35fcc327f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Power_enablePolicy</definition>
        <argsstring>(void)</argsstring>
        <name>Power_enablePolicy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Enable the configured power policy to run when the CPU is idle. </para>        </briefdescription>
        <detaileddescription>
<para>Calling this function sets a flag that will cause the configured power policy function to be invoked on each pass through the Idle loop. This function call will override both a &apos;false&apos; setting of the &quot;enablePolicy&quot; setting in the Power Manager configuration object, as well as a previous runtime call to the <ref refid="_power_8h_1acf9706c39bd0fa07ec977dd643e5dd2a" kindref="member">Power_disablePolicy()</ref> function.</para><para>For some processor families, automatic power transitions can make initial application development more difficult, as well as being at odds with basic debugger operation. This convenience function allows an application to be initially configured, built, and debugged, without automatic power transitions during idle time. When the application is found to be working, this function can be called (typically in main()) to enable the policy to run, without having to change the application configuration.</para><para><simplesect kind="see"><para><ref refid="_power_8h_1acf9706c39bd0fa07ec977dd643e5dd2a" kindref="member">Power_disablePolicy</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_power_8h_1a5a014bc499484e3340eed32b2aad9b56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint_fast32_t</type>
        <definition>uint_fast32_t Power_getConstraintMask</definition>
        <argsstring>(void)</argsstring>
        <name>Power_getConstraintMask</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the constraints that have been declared with Power. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns a bitmask indicating the constraints that are currently declared to the Power Manager (via previous calls to <ref refid="_power_8h_1a45bde4b6fc658e81dc70701e8bdc947a" kindref="member">Power_setConstraint()</ref>). For each constraint that is currently declared, the corresponding bit in the bitmask will be set. For example, if two clients have independently declared two different constraints, the returned bitmask will have two bits set.</para><para>Constraint identifiers are device specific, and defined in the device-specific Power include file. For example, the constraints for MSP432 are defined in <ref refid="_power_m_s_p432_8h" kindref="compound">PowerMSP432.h</ref>. The corresponding bit in the bitmask returned by this function can be derived by a left-shift using the constraint identifier. For example, for MSP432, for the corresponding bit for the PowerMSP432_DISALLOW_SLEEP constraint, the bit position is determined by the operation: (1 &lt;&lt; PowerMSP432_DISALLOW_SLEEP)</para><para><simplesect kind="return"><para>A bitmask of the currently declared constraints.</para></simplesect>
<simplesect kind="see"><para><ref refid="_power_8h_1a45bde4b6fc658e81dc70701e8bdc947a" kindref="member">Power_setConstraint</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_power_8h_1a3c4f3e678659b683126eef65aef4400b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t Power_getDependencyCount</definition>
        <argsstring>(uint_fast16_t resourceId)</argsstring>
        <name>Power_getDependencyCount</name>
        <param>
          <type>uint_fast16_t</type>
          <declname>resourceId</declname>
        </param>
        <briefdescription>
<para>Get the current dependency count for a resource. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the number of dependencies that are currently declared upon a resource.</para><para>Resource identifiers are device specific, and defined in the device-specific Power include file. For example, the resources for CC32XX are defined in PowerCC32XX.h.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resourceId</parametername>
</parameternamelist>
<parameterdescription>
<para>resource id</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of dependencies declared for the resource. Power_EINVALIDINPUT if the resourceId is invalid.</para></simplesect>
<simplesect kind="see"><para><ref refid="_power_8h_1a25f2b780b7ea1ff1f515115fe1c2f519" kindref="member">Power_setDependency</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_power_8h_1a33830ca68bc594b1f24c7285a62f0475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint_fast16_t</type>
        <definition>uint_fast16_t Power_getPerformanceLevel</definition>
        <argsstring>(void)</argsstring>
        <name>Power_getPerformanceLevel</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current performance level. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the current device performance level in effect.</para><para>If performance scaling is not supported for the device, this function will always indicate a performance level of zero.</para><para><simplesect kind="return"><para>The current performance level.</para></simplesect>
<simplesect kind="see"><para><ref refid="_power_8h_1ae40483e9ed7c626a02399996d3a7878a" kindref="member">Power_setPerformanceLevel</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="220" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_power_8h_1a54c4704ee529e55633288b0bd49ad583" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint_fast32_t</type>
        <definition>uint_fast32_t Power_getTransitionLatency</definition>
        <argsstring>(uint_fast16_t sleepState, uint_fast16_t type)</argsstring>
        <name>Power_getTransitionLatency</name>
        <param>
          <type>uint_fast16_t</type>
          <declname>sleepState</declname>
        </param>
        <param>
          <type>uint_fast16_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Get the hardware transition latency for a sleep state. </para>        </briefdescription>
        <detaileddescription>
<para>This function reports the minimal hardware transition latency for a specific sleep state. The reported latency is that for a direct transition, and does not include any additional latency that might occur due to software-based notifications.</para><para>Sleep states are device specific, and defined in the device-specific Power include file. For example, the sleep states for CC32XX are defined in PowerCC32XX.h.</para><para>This function is typically called by the power policy function. The latency is reported in units of microseconds.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sleepState</parametername>
</parameternamelist>
<parameterdescription>
<para>the sleep state</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>the latency type (Power_TOTAL or Power_RESUME)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The latency value, in units of microseconds. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_power_8h_1a20509b474f5e68c9d36832199d167b9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint_fast16_t</type>
        <definition>uint_fast16_t Power_getTransitionState</definition>
        <argsstring>(void)</argsstring>
        <name>Power_getTransitionState</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current transition state of the Power Manager. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the current transition state for the Power Manager. For example, when no transitions are in progress, a status of Power_ACTIVE is returned. Power_ENTERING_SLEEP is returned during the transition to sleep, before sleep has occurred. Power_EXITING_SLEEP is returned after wakeup, as the device is being transitioned back to Power_ACTIVE. And Power_CHANGING_PERF_LEVEL is returned when a change is being made to the performance level.</para><para><simplesect kind="return"><para>The current Power Manager transition state. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_power_8h_1a873219012923300f3b3b958b951a4ea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Power_idleFunc</definition>
        <argsstring>(void)</argsstring>
        <name>Power_idleFunc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Power function to be added to the application idle loop. </para>        </briefdescription>
        <detaileddescription>
<para>This function should be added to the application idle loop. (The method to do this depends upon the operating system being used.) This function will invoke the configured power policy function when appropriate. The specific policy function to be invoked is configured as the &apos;policyFxn&apos; in the application-defined Power configuration object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_power_8h_1a3c4e1eab2809636848b2758fb201707c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t Power_init</definition>
        <argsstring>(void)</argsstring>
        <name>Power_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Power initialization function. </para>        </briefdescription>
        <detaileddescription>
<para>This function initializes Power Manager internal state. It must be called prior to any other Power API. This function is normally called as part of TI-RTOS board initialization, for example, from within the &lt;board name&gt;_initGeneral() function.</para><para><simplesect kind="return"><para>Power_SOK </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_power_8h_1aa89d120c82d4f23e6d4a337720b6300e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t Power_registerNotify</definition>
        <argsstring>(Power_NotifyObj *pNotifyObj, uint_fast16_t eventTypes, Power_NotifyFxn notifyFxn, uintptr_t clientArg)</argsstring>
        <name>Power_registerNotify</name>
        <param>
          <type><ref refid="_power_8h_1a380d08b754e6f3f096349ab5fc464209" kindref="member">Power_NotifyObj</ref> *</type>
          <declname>pNotifyObj</declname>
        </param>
        <param>
          <type>uint_fast16_t</type>
          <declname>eventTypes</declname>
        </param>
        <param>
          <type><ref refid="_power_8h_1ad6c365f54d37429c5bd32181e5dbf463" kindref="member">Power_NotifyFxn</ref></type>
          <declname>notifyFxn</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>clientArg</declname>
        </param>
        <briefdescription>
<para>Register a function to be called upon a specific power event. </para>        </briefdescription>
        <detaileddescription>
<para>This function registers a function to be called when a Power event occurs. Registrations and the corresponding notifications are processed in first-in-first-out (FIFO) order. The function registered must behave as described later, below.</para><para>The pNotifyObj parameter is a pointer to a pre-allocated, opaque object that will be used by Power to support the notification. This object could be dynamically allocated, or declared as a global object. This function will properly initialized the object&apos;s fields as appropriate; the caller just needs to provide a pointer to this pre-existing object.</para><para>The eventTypes parameter identifies the type of power event(s) for which the notify function being registered is to be called. (Event identifiers are device specific, and defined in the device-specific Power include file. For example, the events for MSP432 are defined in <ref refid="_power_m_s_p432_8h" kindref="compound">PowerMSP432.h</ref>.) The eventTypes parameter for this function call is treated as a bitmask, so multiple event types can be registered at once, using a common callback function. For example, to call the specified notifyFxn when both the entering deepsleep and awake from deepsleep events occur, eventTypes should be specified as: PowerMSP432_ENTERING_DEEPSLEEP | PowerMSP432_AWAKE_DEEPSLEEP</para><para>The notifyFxn parameter specifies a callback function to be called when the specified Power event occurs. The notifyFxn must implement the following signature: status = notifyFxn(eventType, eventArg, clientArg);</para><para>Where: eventType identifies the event being signalled, eventArg is an optional event-specific argument, and clientArg is an abitrary argument specified by the client at registration. Note that multipe types of events can be specified when registering the notification callback function, but when the callback function is actually called by Power, only a single eventType will be specified for the callback (i.e., the current event). The status returned by the client notification function must be one of the following constants: Power_NOTIFYDONE if the client processed the notification successfully, or Power_NOTIFYERROR if an error occurred during notification.</para><para>The clientArg parameter is an arbitrary, client-defined argument to be passed back to the client upon notification. This argument may allow one notify function to be used by multiple instances of a driver (that is, the clientArg can be used to identify the instance of the driver that is being notified).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pNotifyObj</parametername>
</parameternamelist>
<parameterdescription>
<para>notification object (preallocated by caller)</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventTypes</parametername>
</parameternamelist>
<parameterdescription>
<para>event type or types</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>notifyFxn</parametername>
</parameternamelist>
<parameterdescription>
<para>client&apos;s callback function</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clientArg</parametername>
</parameternamelist>
<parameterdescription>
<para>client-specified argument to pass with notification</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Power_SOK on success. Power_EINVALIDPOINTER if either pNotifyObj or notifyFxn are NULL.</para></simplesect>
<simplesect kind="see"><para><ref refid="_power_8h_1ac32c17ce6da099da97957f08ddb000b4" kindref="member">Power_unregisterNotify</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_power_8h_1acc3b76add2f8fadd70bb747d7dd0f8e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t Power_releaseConstraint</definition>
        <argsstring>(uint_fast16_t constraintId)</argsstring>
        <name>Power_releaseConstraint</name>
        <param>
          <type>uint_fast16_t</type>
          <declname>constraintId</declname>
        </param>
        <briefdescription>
<para>Release a previously declared constraint. </para>        </briefdescription>
        <detaileddescription>
<para>This function releases a constraint that was previously declared with <ref refid="_power_8h_1a45bde4b6fc658e81dc70701e8bdc947a" kindref="member">Power_setConstraint()</ref>. For example, if a device driver is starting an I/O transaction and wants to prohibit activation of a sleep state during the transaction, it uses <ref refid="_power_8h_1a45bde4b6fc658e81dc70701e8bdc947a" kindref="member">Power_setConstraint()</ref> to declare the constraint, before starting the transaction. When the transaction completes, the driver calls this function to release the constraint, to allow the Power manager to once again allow transitions to sleep.</para><para>Constraint identifiers are device specific, and defined in the device-specific Power include file. For example, the constraints for MSP432 are defined in <ref refid="_power_m_s_p432_8h" kindref="compound">PowerMSP432.h</ref>.</para><para>Only one constraint can be specified with each call to this function; to release multiple constraints this function must be called multiple times.</para><para>It is critical that clients call <ref refid="_power_8h_1acc3b76add2f8fadd70bb747d7dd0f8e8" kindref="member">Power_releaseConstraint()</ref> when operational constraints no longer exists. Otherwise, Power may be left unnecessarily restricted from activating power savings.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>constraintId</parametername>
</parameternamelist>
<parameterdescription>
<para>constraint id</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>CC26XX/CC13XX only</bold>: Power_SOK. To minimize code size asserts are used internally to check that the constraintId is valid,valid, and that the constraint count is not already zero; the function always returns Power_SOK.</para></simplesect>
<simplesect kind="return"><para><bold>All other devices</bold>: Power_SOK on success, Power_EINVALIDINPUT if the constraintId is invalid, and Power_EFAIL if the constraint count is already zero.</para></simplesect>
<simplesect kind="see"><para><ref refid="_power_8h_1a45bde4b6fc658e81dc70701e8bdc947a" kindref="member">Power_setConstraint</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="385" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_power_8h_1a74f45b58c200fa042614e4a892f58a2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t Power_releaseDependency</definition>
        <argsstring>(uint_fast16_t resourceId)</argsstring>
        <name>Power_releaseDependency</name>
        <param>
          <type>uint_fast16_t</type>
          <declname>resourceId</declname>
        </param>
        <briefdescription>
<para>Release a previously declared dependency. </para>        </briefdescription>
        <detaileddescription>
<para>This function releases a dependency that had been previously declared upon a resource (by a call to <ref refid="_power_8h_1a25f2b780b7ea1ff1f515115fe1c2f519" kindref="member">Power_setDependency()</ref>).</para><para>Resource identifiers are device specific, and defined in the device-specific Power include file. For example, the resources for CC32XX are defined in PowerCC32XX.h.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resourceId</parametername>
</parameternamelist>
<parameterdescription>
<para>resource id</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>CC26XX/CC13XX only</bold>: Power_SOK. To minimize code size asserts are used internally to check that the resourceId is valid, and that the resource reference count is not already zero; the function always returns Power_SOK.</para></simplesect>
<simplesect kind="return"><para><bold>All other devices</bold>: Power_SOK on success, Power_EINVALIDINPUT if the resourceId is invalid, and Power_EFAIL if the resource reference count is already zero.</para></simplesect>
<simplesect kind="see"><para><ref refid="_power_8h_1a25f2b780b7ea1ff1f515115fe1c2f519" kindref="member">Power_setDependency</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="410" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_power_8h_1a45bde4b6fc658e81dc70701e8bdc947a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t Power_setConstraint</definition>
        <argsstring>(uint_fast16_t constraintId)</argsstring>
        <name>Power_setConstraint</name>
        <param>
          <type>uint_fast16_t</type>
          <declname>constraintId</declname>
        </param>
        <briefdescription>
<para>Declare an operational constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Before taking certain actions, the Power Manager checks to see if the requested action would conflict with a client-declared constraint. If the action does conflict, Power will not proceed with the request. This is the function that allows clients to declare their constraints with Power.</para><para>Constraint identifiers are device specific, and defined in the device-specific Power include file. For example, the constraints for MSP432 are defined in <ref refid="_power_m_s_p432_8h" kindref="compound">PowerMSP432.h</ref>.</para><para>Only one constraint can be specified with each call to this function; to declare multiple constraints this function must be called multiple times.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>constraintId</parametername>
</parameternamelist>
<parameterdescription>
<para>constraint id</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>CC26XX/CC13XX only</bold>: Power_SOK. To minimize code size an assert is used internally to check that the constraintId is valid; the function always returns Power_SOK.</para></simplesect>
<simplesect kind="return"><para><bold>All other devices</bold>: Power_SOK on success, Power_EINVALIDINPUT if the constraintId is invalid.</para></simplesect>
<simplesect kind="see"><para><ref refid="_power_8h_1acc3b76add2f8fadd70bb747d7dd0f8e8" kindref="member">Power_releaseConstraint</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="438" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_power_8h_1a25f2b780b7ea1ff1f515115fe1c2f519" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t Power_setDependency</definition>
        <argsstring>(uint_fast16_t resourceId)</argsstring>
        <name>Power_setDependency</name>
        <param>
          <type>uint_fast16_t</type>
          <declname>resourceId</declname>
        </param>
        <briefdescription>
<para>Declare a dependency upon a resource. </para>        </briefdescription>
        <detaileddescription>
<para>This function declares a dependency upon a resource. For example, if a UART driver needs a specific UART peripheral, it uses this function to declare this to the Power Manager. If the resource had been inactive, then Power will activate the peripheral during this function call.</para><para>What is needed to make a peripheral resource &apos;active&apos; will vary by device family. For some devices this may be a simple enable of a clock to the specified peripheral. For others it may also require a power on of a power domain. In either case, the Power Manager will take care of these details, and will also implement reference counting for resources and their interdependencies. For example, if multiple UART peripherals reside in a shared serial power domain, the Power Manager will power up the serial domain when it is first needed, and then automatically power the domain off later, when all related dependencies for the relevant peripherals are released.</para><para>Resource identifiers are device specific, and defined in the device-specific Power include file. For example, the resources for CC32XX are defined in PowerCC32XX.h.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resourceId</parametername>
</parameternamelist>
<parameterdescription>
<para>resource id</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>CC26XX/CC13XX only</bold>: Power_SOK. To minimize code size an assert is used internally to check that the resourceId is valid; the function always returns Power_SOK.</para></simplesect>
<simplesect kind="return"><para><bold>All other devices</bold>: Power_SOK on success, Power_EINVALIDINPUT if the reseourceId is invalid.</para></simplesect>
<simplesect kind="see"><para><ref refid="_power_8h_1a74f45b58c200fa042614e4a892f58a2d" kindref="member">Power_releaseDependency</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="474" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_power_8h_1ae40483e9ed7c626a02399996d3a7878a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t Power_setPerformanceLevel</definition>
        <argsstring>(uint_fast16_t level)</argsstring>
        <name>Power_setPerformanceLevel</name>
        <param>
          <type>uint_fast16_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Set the MCU performance level. </para>        </briefdescription>
        <detaileddescription>
<para>This function manages a transition to a new device performance level. Before the actual transition is initiated, notifications will be sent to any clients who&apos;ve registered (with <ref refid="_power_8h_1aa89d120c82d4f23e6d4a337720b6300e" kindref="member">Power_registerNotify()</ref>) for a &apos;start change performance level&apos; notification. The event name is device specific, and defined in the device-specific Power include file. For example, for MSP432, the event is &quot;PowerMSP432_START_CHANGE_PERF_LEVEL&quot;, which is defined in <ref refid="_power_m_s_p432_8h" kindref="compound">PowerMSP432.h</ref>. Once notifications have been completed, the change to the performance level is initiated. After the level change is completed, there is a comparable event that can be used to signal a client that the change has completed. For example, on MSP432 the &quot;PowerMSP432_DONE_CHANGE_PERF_LEVEL&quot; event can be used to signal completion.</para><para>This function will not return until the new performance level is in effect. If performance scaling is not supported for the device, or is prohibited by an active constraint, or if the specified level is invalid, then an error status will be returned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>the new performance level</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Power_SOK on success. Power_EINVALIDINPUT if the specified performance level is out of range of valid levels. Power_EBUSY if another transition is already in progress, or if a single constraint is set to prohibit any change to the performance level. Power_ECHANGE_NOT_ALLOWED if a level-specific constraint prohibits a change to the requested level. Power_EFAIL if performance scaling is not supported, if an error occurred during initialization, or if an error occurred during client notifications.</para></simplesect>
<simplesect kind="see"><para><ref refid="_power_8h_1a33830ca68bc594b1f24c7285a62f0475" kindref="member">Power_getPerformanceLevel</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="513" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_power_8h_1aa4af0d238813058bf6146df6021df8cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Power_setPolicy</definition>
        <argsstring>(Power_PolicyFxn policy)</argsstring>
        <name>Power_setPolicy</name>
        <param>
          <type><ref refid="_power_8h_1a333038d1e9cd5f93dda7b83f8a1afa8b" kindref="member">Power_PolicyFxn</ref></type>
          <declname>policy</declname>
        </param>
        <briefdescription>
<para>Set a new Power policy. </para>        </briefdescription>
        <detaileddescription>
<para>This function allows a new Power policy function to be selected at runtime.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>policy</parametername>
</parameternamelist>
<parameterdescription>
<para>the new Power policy function </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="522" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_power_8h_1a311d085ba6ecbeea0e279c52995892a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t Power_shutdown</definition>
        <argsstring>(uint_fast16_t shutdownState, uint_fast32_t shutdownTime)</argsstring>
        <name>Power_shutdown</name>
        <param>
          <type>uint_fast16_t</type>
          <declname>shutdownState</declname>
        </param>
        <param>
          <type>uint_fast32_t</type>
          <declname>shutdownTime</declname>
        </param>
        <briefdescription>
<para>Put the device into a shutdown state. </para>        </briefdescription>
        <detaileddescription>
<para>This function will transition the device into a shutdown state. Before the actual transition is initiated, notifications will be sent to any clients who&apos;ve registered (with <ref refid="_power_8h_1aa89d120c82d4f23e6d4a337720b6300e" kindref="member">Power_registerNotify()</ref>) for an &apos;entering shutdown&apos; event. The event name is device specific, and defined in the device-specific Power include file. For example, for CC32XX, the event is &quot;PowerCC32XX_ENTERING_SHUTDOWN&quot;, which is defined in PowerCC32XX.h. Once notifications have been completed, the device shutdown will commence.</para><para>If the device is successfully transitioned to shutdown, this function call will never return. Upon wakeup, the device and application will be rebooted (through a device reset). If the transition is not successful, one of the error codes listed below will be returned.</para><para>On some devices a timed wakeup from shutdown can be specified, using the shutdownTime parameter. This enables an autonomous application reboot at a future time. For example, an application can go to shutdown, and then automatically reboot at a future time to do some work. And once that work is done, the application can shutdown again, for another timed interval. The time interval is specified via the shutdownTime parameter. (On devices that do not support this feature, any value specified for shutdownTime will be ignored.) If the specified shutdownTime is less than the total shutdown latency for the device, then shutdownTime will be ignored. The shutdown latency for the device can be found in the device-specific Power include file. For example, for the CC32XX, this latency is defined in PowerCC32XX.h, as &quot;PowerCC32XX_TOTALTIMESHUTDOWN&quot;.)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shutdownState</parametername>
</parameternamelist>
<parameterdescription>
<para>the device-specific shutdown state</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shutdownTime</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of time (in milliseconds) to keep the the device in the shutdown state; this parameter is not supported on all device families</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Power_ECHANGE_NOT_ALLOWED if a constraint is prohibiting shutdown. Power_EFAIL if an error occurred during client notifications. Power_EINVALIDINPUT if the shutdownState is invalid. Power_EBUSY if another transition is already in progress. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="565" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_power_8h_1a45e1e0f3168cc39a2309fce40c3e271d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t Power_sleep</definition>
        <argsstring>(uint_fast16_t sleepState)</argsstring>
        <name>Power_sleep</name>
        <param>
          <type>uint_fast16_t</type>
          <declname>sleepState</declname>
        </param>
        <briefdescription>
<para>Transition the device into a sleep state. </para>        </briefdescription>
        <detaileddescription>
<para>This function is called from the power policy when it has made a decision to put the device in a specific sleep state. This function returns to the caller (the policy function) once the device has awoken from sleep.</para><para>This function must be called with interrupts disabled, and should not be called directly by the application, or by any drivers. This function does not check declared constraints; the policy function must check constraints before calling this function to initiate sleep.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sleepState</parametername>
</parameternamelist>
<parameterdescription>
<para>the sleep state</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Power_SOK on success, the device has slept and is awake again. Power_EFAIL if an error occurred during client notifications, or if a general failure occurred. Power_EINVALIDINPUT if the sleepState is invalid. Power_EBUSY if another transition is already in progress. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="588" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_power_8h_1ac32c17ce6da099da97957f08ddb000b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Power_unregisterNotify</definition>
        <argsstring>(Power_NotifyObj *pNotifyObj)</argsstring>
        <name>Power_unregisterNotify</name>
        <param>
          <type><ref refid="_power_8h_1a380d08b754e6f3f096349ab5fc464209" kindref="member">Power_NotifyObj</ref> *</type>
          <declname>pNotifyObj</declname>
        </param>
        <briefdescription>
<para>Unregister previously registered notifications. </para>        </briefdescription>
        <detaileddescription>
<para>This function unregisters for event notifications that were previously registered with <ref refid="_power_8h_1aa89d120c82d4f23e6d4a337720b6300e" kindref="member">Power_registerNotify()</ref>. The caller must specify a pointer to the same notification object used during registration.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pNotifyObj</parametername>
</parameternamelist>
<parameterdescription>
<para>notify object</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_power_8h_1aa89d120c82d4f23e6d4a337720b6300e" kindref="member">Power_registerNotify</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h" line="601" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Power Manager interface. </para>    </briefdescription>
    <detaileddescription>
<para>============================================================================</para><para>The Power header file should be included in an application as follows: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/Power.h&gt;</highlight></codeline>
</programlisting></para><para><heading level="1">Operation</heading>
</para><para>The Power Manager facilitates the transition of the MCU from active states to sleep states and vice versa. It provides other drivers the ability to set and release dependencies on hardware resources, and keeps reference counts on each resource to know when to enable or disable the resource. It provides drivers the ability to register callback functions to be invoked upon specific power events. In addition, drivers and applications can set or release constraints to prevent the MCU from transitioning into specific active or sleep states.</para><para><bold>The Power Manager APIs and configuration parameters are described here. For a detailed description of terms and concepts, and usage by different types of software components (peripheral drivers, power policies, and applications) please see the <ulink url="../../Power_Management.pdf">SimpleLink SDK Power Management User&apos;s Guide</ulink>.</bold> <hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2018,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor">#ifndef<sp/>ti_drivers_Power__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_Power__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_list_8h" kindref="compound">ti/drivers/utils/List.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Power<sp/>latency<sp/>types<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="_power_8h_1aa5e33b10202cc5a261c1800b4ae1de3e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Power_TOTAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75" refid="_power_8h_1a7343f6504f2df361dca3760a97584371" refkind="member"><highlight class="preprocessor">#define<sp/>Power_RESUME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(2U)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Power<sp/>notify<sp/>responses<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="_power_8h_1a98c91c03b469de0cf4f53b89a867ee19" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Power_NOTIFYDONE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79" refid="_power_8h_1a98066f45fce59fd38d8edcb6f2ac96fd" refkind="member"><highlight class="preprocessor">#define<sp/>Power_NOTIFYERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)<sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Power<sp/>status<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="_power_8h_1a92eed670a5d7e3d43f612ca0da9d3fe2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Power_SOK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83" refid="_power_8h_1aed2f92a8c72bfa183e14d10a2e35789f" refkind="member"><highlight class="preprocessor">#define<sp/>Power_EFAIL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84" refid="_power_8h_1a200ab87d1e0ffbc4eb3864d18646e0f7" refkind="member"><highlight class="preprocessor">#define<sp/>Power_EINVALIDINPUT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-2)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="85" refid="_power_8h_1a0d24bacb087e8282be2e4394503a429a" refkind="member"><highlight class="preprocessor">#define<sp/>Power_EINVALIDPOINTER<sp/><sp/><sp/><sp/><sp/>(-3)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86" refid="_power_8h_1aa4e7b580b1c9c026036bf53befe5723b" refkind="member"><highlight class="preprocessor">#define<sp/>Power_ECHANGE_NOT_ALLOWED<sp/>(-4)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="87" refid="_power_8h_1a3132904395c5631392bd6301d9a2181e" refkind="member"><highlight class="preprocessor">#define<sp/>Power_EBUSY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-5)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Power<sp/>transition<sp/>states<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="_power_8h_1a01074d8221d330077fbe040b9143e183" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Power_ACTIVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="91" refid="_power_8h_1a6038b3877b09c908834af7d46595b989" refkind="member"><highlight class="preprocessor">#define<sp/>Power_ENTERING_SLEEP<sp/><sp/><sp/><sp/><sp/><sp/>(2U)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92" refid="_power_8h_1a1ea41cdfb6fb053eaed2792c4edf886d" refkind="member"><highlight class="preprocessor">#define<sp/>Power_EXITING_SLEEP<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(3U)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="93" refid="_power_8h_1ad09d75dfaa5d799c4f044df9814db485" refkind="member"><highlight class="preprocessor">#define<sp/>Power_ENTERING_SHUTDOWN<sp/><sp/><sp/>(4U)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="94" refid="_power_8h_1a2b7d4ba49a9418af10c84132a8cbf108" refkind="member"><highlight class="preprocessor">#define<sp/>Power_CHANGING_PERF_LEVEL<sp/>(5U)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="100" refid="_power_8h_1a435fdeb71d13ea6be86f599c9b6a0d78" refkind="member"><highlight class="preprocessor">typedef<sp/>void<sp/>(*Power_PolicyInitFxn)(void);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="_power_8h_1a333038d1e9cd5f93dda7b83f8a1afa8b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_power_8h_1a333038d1e9cd5f93dda7b83f8a1afa8b" kindref="member">Power_PolicyFxn</ref>)(void);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="_power_8h_1ad6c365f54d37429c5bd32181e5dbf463" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_power_8h_1ad6c365f54d37429c5bd32181e5dbf463" kindref="member">Power_NotifyFxn</ref>)(uint_fast16_t<sp/>eventType,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uintptr_t<sp/>eventArg,<sp/>uintptr_t<sp/>clientArg);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="struct_power___notify_obj__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_power___notify_obj__" kindref="compound">Power_NotifyObj_</ref><sp/>{</highlight></codeline>
<codeline lineno="122" refid="struct_power___notify_obj___1acd9100da1229a77a96e16fe88b18198f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_list___elem" kindref="compound">List_Elem</ref><sp/><ref refid="struct_power___notify_obj___1acd9100da1229a77a96e16fe88b18198f" kindref="member">link</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123" refid="struct_power___notify_obj___1adb0fa41aea52ab44984ba3ed2d4181ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint_fast16_t<sp/><ref refid="struct_power___notify_obj___1adb0fa41aea52ab44984ba3ed2d4181ee" kindref="member">eventTypes</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="124" refid="struct_power___notify_obj___1a28e7a53de069cf417f416bde4f0b8ddb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_power_8h_1ad6c365f54d37429c5bd32181e5dbf463" kindref="member">Power_NotifyFxn</ref><sp/><ref refid="struct_power___notify_obj___1a28e7a53de069cf417f416bde4f0b8ddb" kindref="member">notifyFxn</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="125" refid="struct_power___notify_obj___1a66356559d8e7ce45d915f186e259718e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/><ref refid="struct_power___notify_obj___1a66356559d8e7ce45d915f186e259718e" kindref="member">clientArg</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal">}<sp/><ref refid="_power_8h_1a380d08b754e6f3f096349ab5fc464209" kindref="member">Power_NotifyObj</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_power_8h_1acf9706c39bd0fa07ec977dd643e5dd2a" kindref="member">Power_disablePolicy</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_power_8h_1ae8d6092a8fb35b6db52a69a35fcc327f" kindref="member">Power_enablePolicy</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">uint_fast32_t<sp/><ref refid="_power_8h_1a5a014bc499484e3340eed32b2aad9b56" kindref="member">Power_getConstraintMask</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal">int_fast16_t<sp/><ref refid="_power_8h_1a3c4f3e678659b683126eef65aef4400b" kindref="member">Power_getDependencyCount</ref>(uint_fast16_t<sp/>resourceId);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal">uint_fast16_t<sp/><ref refid="_power_8h_1a33830ca68bc594b1f24c7285a62f0475" kindref="member">Power_getPerformanceLevel</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">uint_fast32_t<sp/><ref refid="_power_8h_1a54c4704ee529e55633288b0bd49ad583" kindref="member">Power_getTransitionLatency</ref>(uint_fast16_t<sp/>sleepState,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>uint_fast16_t<sp/>type);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal">uint_fast16_t<sp/><ref refid="_power_8h_1a20509b474f5e68c9d36832199d167b9b" kindref="member">Power_getTransitionState</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_power_8h_1a873219012923300f3b3b958b951a4ea1" kindref="member">Power_idleFunc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal">int_fast16_t<sp/><ref refid="_power_8h_1a3c4e1eab2809636848b2758fb201707c" kindref="member">Power_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal">int_fast16_t<sp/><ref refid="_power_8h_1aa89d120c82d4f23e6d4a337720b6300e" kindref="member">Power_registerNotify</ref>(<ref refid="struct_power___notify_obj__" kindref="compound">Power_NotifyObj</ref><sp/>*pNotifyObj,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_fast16_t<sp/><ref refid="struct_power___notify_obj___1adb0fa41aea52ab44984ba3ed2d4181ee" kindref="member">eventTypes</ref>,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_power_8h_1ad6c365f54d37429c5bd32181e5dbf463" kindref="member">Power_NotifyFxn</ref><sp/><ref refid="struct_power___notify_obj___1a28e7a53de069cf417f416bde4f0b8ddb" kindref="member">notifyFxn</ref>,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uintptr_t<sp/><ref refid="struct_power___notify_obj___1a66356559d8e7ce45d915f186e259718e" kindref="member">clientArg</ref>);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal">int_fast16_t<sp/><ref refid="_power_8h_1acc3b76add2f8fadd70bb747d7dd0f8e8" kindref="member">Power_releaseConstraint</ref>(uint_fast16_t<sp/>constraintId);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal">int_fast16_t<sp/><ref refid="_power_8h_1a74f45b58c200fa042614e4a892f58a2d" kindref="member">Power_releaseDependency</ref>(uint_fast16_t<sp/>resourceId);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal">int_fast16_t<sp/><ref refid="_power_8h_1a45bde4b6fc658e81dc70701e8bdc947a" kindref="member">Power_setConstraint</ref>(uint_fast16_t<sp/>constraintId);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal">int_fast16_t<sp/><ref refid="_power_8h_1a25f2b780b7ea1ff1f515115fe1c2f519" kindref="member">Power_setDependency</ref>(uint_fast16_t<sp/>resourceId);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal">int_fast16_t<sp/><ref refid="_power_8h_1ae40483e9ed7c626a02399996d3a7878a" kindref="member">Power_setPerformanceLevel</ref>(uint_fast16_t<sp/>level);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_power_8h_1aa4af0d238813058bf6146df6021df8cc" kindref="member">Power_setPolicy</ref>(<ref refid="_power_8h_1a333038d1e9cd5f93dda7b83f8a1afa8b" kindref="member">Power_PolicyFxn</ref><sp/>policy);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal">int_fast16_t<sp/><ref refid="_power_8h_1a311d085ba6ecbeea0e279c52995892a5" kindref="member">Power_shutdown</ref>(uint_fast16_t<sp/>shutdownState,</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>uint_fast32_t<sp/>shutdownTime);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal">int_fast16_t<sp/><ref refid="_power_8h_1a45e1e0f3168cc39a2309fce40c3e271d" kindref="member">Power_sleep</ref>(uint_fast16_t<sp/>sleepState);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_power_8h_1ac32c17ce6da099da97957f08ddb000b4" kindref="member">Power_unregisterNotify</ref>(<ref refid="struct_power___notify_obj__" kindref="compound">Power_NotifyObj</ref><sp/>*pNotifyObj);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_Power__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_msp432/source/ti/drivers/Power.h"/>
  </compounddef>
</doxygen>
