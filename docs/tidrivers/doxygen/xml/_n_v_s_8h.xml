<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_n_v_s_8h" kind="file" language="C++">
    <compoundname>NVS.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <includedby refid="_s_p_i_f_f_s_n_v_s_8h" local="no">SPIFFSNVS.h</includedby>
    <incdepgraph>
      <node id="153">
        <label>stdbool.h</label>
      </node>
      <node id="155">
        <label>stdint.h</label>
      </node>
      <node id="154">
        <label>stddef.h</label>
      </node>
      <node id="152">
        <label>NVS.h</label>
        <link refid="_n_v_s_8h"/>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="156">
        <label>NVS.h</label>
        <link refid="_n_v_s_8h"/>
        <childnode refid="157" relation="include">
        </childnode>
      </node>
      <node id="157">
        <label>SPIFFSNVS.h</label>
        <link refid="_s_p_i_f_f_s_n_v_s_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_n_v_s___params" prot="public">NVS_Params</innerclass>
    <innerclass refid="struct_n_v_s___attrs" prot="public">NVS_Attrs</innerclass>
    <innerclass refid="struct_n_v_s___fxn_table" prot="public">NVS_FxnTable</innerclass>
    <innerclass refid="struct_n_v_s___config__" prot="public">NVS_Config_</innerclass>
      <sectiondef kind="user-defined">
      <memberdef kind="define" id="_n_v_s_8h_1afdf449ac94235c5c4b108f5e5e925f03" prot="public" static="no">
        <name>NVS_WRITE_ERASE</name>
        <initializer>(0x1)</initializer>
        <briefdescription>
<para>NVS write flags. </para>        </briefdescription>
        <detaileddescription>
<para>The following flags can be or&apos;d together and passed as a bit mask to NVS_write.</para><para>Erase write flag.</para><para>If <ref refid="_n_v_s_8h_1afdf449ac94235c5c4b108f5e5e925f03" kindref="member">NVS_WRITE_ERASE</ref> is set in the flags passed to <ref refid="_n_v_s_8h_1aae7abe0cb889a6d0cc1858bfc69ab7e0" kindref="member">NVS_write()</ref>, the affected destination flash sectors will be erased prior to the start of the write operation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="342" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="342" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_n_v_s_8h_1a5a4d29a7281f1ad484cc8b7ccc30b363" prot="public" static="no">
        <name>NVS_WRITE_PRE_VERIFY</name>
        <initializer>(0x2)</initializer>
        <briefdescription>
<para>Validate write flag. </para>        </briefdescription>
        <detaileddescription>
<para>If <ref refid="_n_v_s_8h_1a5a4d29a7281f1ad484cc8b7ccc30b363" kindref="member">NVS_WRITE_PRE_VERIFY</ref> is set in the flags passed to <ref refid="_n_v_s_8h_1aae7abe0cb889a6d0cc1858bfc69ab7e0" kindref="member">NVS_write()</ref>, the destination address range will be pre-tested to guarantee that the source data can be successfully written. If <ref refid="_n_v_s_8h_1afdf449ac94235c5c4b108f5e5e925f03" kindref="member">NVS_WRITE_ERASE</ref> is also requested in the write flags, then the <ref refid="_n_v_s_8h_1a5a4d29a7281f1ad484cc8b7ccc30b363" kindref="member">NVS_WRITE_PRE_VERIFY</ref> modifier is ignored. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="352" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_n_v_s_8h_1a04d152372a71d46161f28b4db3163202" prot="public" static="no">
        <name>NVS_WRITE_POST_VERIFY</name>
        <initializer>(0x4)</initializer>
        <briefdescription>
<para>Validate write flag. </para>        </briefdescription>
        <detaileddescription>
<para>If <ref refid="_n_v_s_8h_1a04d152372a71d46161f28b4db3163202" kindref="member">NVS_WRITE_POST_VERIFY</ref> is set in the flags passed to <ref refid="_n_v_s_8h_1aae7abe0cb889a6d0cc1858bfc69ab7e0" kindref="member">NVS_write()</ref>, the destination address range will be tested after the write is finished to verify that the write operation was completed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="361" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="361" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="define" id="_n_v_s_8h_1abaf71a566fbd69fc043956bfc8146153" prot="public" static="no">
        <name>NVS_LOCK_WAIT_FOREVER</name>
        <initializer>(~(0U))</initializer>
        <briefdescription>
<para>Special <ref refid="_n_v_s_8h_1a62d1593df9acb6d3c6446f1719f3bf28" kindref="member">NVS_lock()</ref> timeout values. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_n_v_s_8h_1a62d1593df9acb6d3c6446f1719f3bf28" kindref="member">NVS_lock()</ref> Wait forever define </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="373" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_n_v_s_8h_1ad078d2e244f0c623722b3b9492733e44" prot="public" static="no">
        <name>NVS_LOCK_NO_WAIT</name>
        <initializer>(0U)</initializer>
        <briefdescription>
<para><ref refid="_n_v_s_8h_1a62d1593df9acb6d3c6446f1719f3bf28" kindref="member">NVS_lock()</ref> No wait define. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="378" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="378" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="define" id="_n_v_s_8h_1a85b2420d7270c59d423d1733ed1f708a" prot="public" static="no">
        <name>NVS_REGION_NOT_ADDRESSABLE</name>
        <initializer>((void *)(~(0U)))</initializer>
        <briefdescription>
<para>Special <ref refid="struct_n_v_s___attrs_1a6c36a2b1c3a5cdfae48ac7665b479aca" kindref="member">NVS_Attrs.regionBase</ref> value. </para>        </briefdescription>
        <detaileddescription>
<para>This region is not directly addressable (e.g.,: SPI flash region)</para><para>The <ref refid="struct_n_v_s___attrs_1a6c36a2b1c3a5cdfae48ac7665b479aca" kindref="member">NVS_Attrs.regionBase</ref> field returned by <ref refid="_n_v_s_8h_1ae2b667cddd9531d7a06bb0f9d8fd890f" kindref="member">NVS_getAttrs()</ref> is set to this value by the NVSSPI driver to indicate that the region is not directly addressable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="394" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="394" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___n_v_s___c_o_n_t_r_o_l_1gaa9fa1c41660d17139bce63ff34cd774f" prot="public" static="no">
        <name>NVS_CMD_RESERVED</name>
        <initializer>(32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common NVS_control command code reservation offset. NVS driver implementations should offset command codes with NVS_CMD_RESERVED growing positively</para><para>Example implementation specific command codes: <programlisting><codeline><highlight class="normal">#define<sp/>NVSXYZ_CMD_COMMAND0<sp/><sp/><sp/><sp/><sp/>NVS_CMD_RESERVED<sp/>+<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>NVSXYZ_CMD_COMMAND1<sp/><sp/><sp/><sp/><sp/>NVS_CMD_RESERVED<sp/>+<sp/>1</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="217" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_v_s___c_o_n_t_r_o_l_1gad82fd139152ca14946c80c6c91edb4a0" prot="public" static="no">
        <name>NVS_STATUS_RESERVED</name>
        <initializer>(-32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common NVS_control status code reservation offset. NVS driver implementations should offset status codes with NVS_STATUS_RESERVED growing negatively.</para><para>Example implementation specific status codes: <programlisting><codeline><highlight class="normal">#define<sp/>NVSXYZ_STATUS_ERROR0<sp/><sp/><sp/><sp/>NVS_STATUS_RESERVED<sp/>-<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>NVSXYZ_STATUS_ERROR1<sp/><sp/><sp/><sp/>NVS_STATUS_RESERVED<sp/>-<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>NVSXYZ_STATUS_ERROR2<sp/><sp/><sp/><sp/>NVS_STATUS_RESERVED<sp/>-<sp/>2</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="231" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_v_s___s_t_a_t_u_s_1ga5f3b6583ee909863b86799762dc8b4aa" prot="public" static="no">
        <name>NVS_STATUS_SUCCESS</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>Successful status code returned by: <ref refid="_n_v_s_8h_1a79b9b07b5a9d2c35426c15932c6d7c0e" kindref="member">NVS_control()</ref>, <ref refid="_n_v_s_8h_1a9e058f0724a9c325664f68ecfa2239cb" kindref="member">NVS_read()</ref>, <ref refid="_n_v_s_8h_1aae7abe0cb889a6d0cc1858bfc69ab7e0" kindref="member">NVS_write()</ref>, <ref refid="_n_v_s_8h_1a4f309d160ac4641c89501adc95d170b3" kindref="member">NVS_erase()</ref>, or <ref refid="_n_v_s_8h_1a62d1593df9acb6d3c6446f1719f3bf28" kindref="member">NVS_lock()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>APIs returns NVS_STATUS_SUCCESS if the API was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="248" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_v_s___s_t_a_t_u_s_1ga995c9896630b7a0cd1662e7be9c4cf34" prot="public" static="no">
        <name>NVS_STATUS_ERROR</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>Generic error status code returned by: <ref refid="_n_v_s_8h_1a79b9b07b5a9d2c35426c15932c6d7c0e" kindref="member">NVS_control()</ref>, <ref refid="_n_v_s_8h_1a4f309d160ac4641c89501adc95d170b3" kindref="member">NVS_erase()</ref>, or <ref refid="_n_v_s_8h_1aae7abe0cb889a6d0cc1858bfc69ab7e0" kindref="member">NVS_write()</ref>,. </para>        </briefdescription>
        <detaileddescription>
<para>APIs return NVS_STATUS_ERROR if the API was not executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="257" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_v_s___s_t_a_t_u_s_1gac8aa59663f65af4fa564a3a83cd7d6e1" prot="public" static="no">
        <name>NVS_STATUS_UNDEFINEDCMD</name>
        <initializer>(-2)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_n_v_s_8h_1a79b9b07b5a9d2c35426c15932c6d7c0e" kindref="member">NVS_control()</ref> for undefined command codes. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_n_v_s_8h_1a79b9b07b5a9d2c35426c15932c6d7c0e" kindref="member">NVS_control()</ref> returns <ref refid="group___n_v_s___s_t_a_t_u_s_1gac8aa59663f65af4fa564a3a83cd7d6e1" kindref="member">NVS_STATUS_UNDEFINEDCMD</ref> if the control code is not recognized by the driver implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="266" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_v_s___s_t_a_t_u_s_1ga1b42309ac8efec007159e58382dd4a0c" prot="public" static="no">
        <name>NVS_STATUS_TIMEOUT</name>
        <initializer>(-3)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_n_v_s_8h_1a62d1593df9acb6d3c6446f1719f3bf28" kindref="member">NVS_lock()</ref> </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_n_v_s_8h_1a62d1593df9acb6d3c6446f1719f3bf28" kindref="member">NVS_lock()</ref> will return this value if the <computeroutput>timeout</computeroutput> has expired </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="273" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_v_s___s_t_a_t_u_s_1ga30a816faeeb9a50757055fb6f10189a9" prot="public" static="no">
        <name>NVS_STATUS_INV_OFFSET</name>
        <initializer>(-4)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_n_v_s_8h_1a9e058f0724a9c325664f68ecfa2239cb" kindref="member">NVS_read()</ref>, <ref refid="_n_v_s_8h_1aae7abe0cb889a6d0cc1858bfc69ab7e0" kindref="member">NVS_write()</ref>, or <ref refid="_n_v_s_8h_1a4f309d160ac4641c89501adc95d170b3" kindref="member">NVS_erase()</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Error status code returned if the <computeroutput>offset</computeroutput> argument is invalid (e.g., when offset + bufferSize exceeds the size of the region). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="282" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_v_s___s_t_a_t_u_s_1ga07f2472d1204718531ddf7a369b86ccb" prot="public" static="no">
        <name>NVS_STATUS_INV_ALIGNMENT</name>
        <initializer>(-5)</initializer>
        <briefdescription>
<para>An error status code. </para>        </briefdescription>
        <detaileddescription>
<para>Error status code returned by <ref refid="_n_v_s_8h_1a4f309d160ac4641c89501adc95d170b3" kindref="member">NVS_erase()</ref> if the <computeroutput>offset</computeroutput> argument is not aligned on a flash sector address. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="290" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_v_s___s_t_a_t_u_s_1ga6bdc99317ca872755243d9a76ad1db95" prot="public" static="no">
        <name>NVS_STATUS_INV_SIZE</name>
        <initializer>(-6)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_n_v_s_8h_1a4f309d160ac4641c89501adc95d170b3" kindref="member">NVS_erase()</ref> and <ref refid="_n_v_s_8h_1aae7abe0cb889a6d0cc1858bfc69ab7e0" kindref="member">NVS_write()</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Error status code returned by <ref refid="_n_v_s_8h_1a4f309d160ac4641c89501adc95d170b3" kindref="member">NVS_erase()</ref> if the <computeroutput>size</computeroutput> argument is not a multiple of the flash sector size, or if <computeroutput>offset</computeroutput> + <computeroutput>size</computeroutput> extends past the end of the region. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="299" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_v_s___s_t_a_t_u_s_1gad8da7024d67625daf4347c22d50fdb4b" prot="public" static="no">
        <name>NVS_STATUS_INV_WRITE</name>
        <initializer>(-7)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_n_v_s_8h_1aae7abe0cb889a6d0cc1858bfc69ab7e0" kindref="member">NVS_write()</ref> </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_n_v_s_8h_1aae7abe0cb889a6d0cc1858bfc69ab7e0" kindref="member">NVS_write()</ref> will return this value if <ref refid="_n_v_s_8h_1a5a4d29a7281f1ad484cc8b7ccc30b363" kindref="member">NVS_WRITE_PRE_VERIFY</ref> is requested and a flash location can not be changed to the value desired. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="308" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="308" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_n_v_s_8h_1a00d64340188bed30cc27be46cf8a5aa4" prot="public" static="no">
        <type>struct <ref refid="struct_n_v_s___params" kindref="compound">NVS_Params</ref></type>
        <definition>typedef struct NVS_Params  NVS_Params</definition>
        <argsstring></argsstring>
        <name>NVS_Params</name>
        <briefdescription>
<para>NVS Parameters. </para>        </briefdescription>
        <detaileddescription>
<para>NVS parameters are used with the <ref refid="_n_v_s_8h_1a15488564c98e00aa62400a54dde3d44e" kindref="member">NVS_open()</ref> call. Default values for these parameters are set using <ref refid="_n_v_s_8h_1af7562718a6eed5456d423ef7a16c8598" kindref="member">NVS_Params_init()</ref>.</para><para><simplesect kind="see"><para><ref refid="_n_v_s_8h_1af7562718a6eed5456d423ef7a16c8598" kindref="member">NVS_Params_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="408" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_n_v_s_8h_1a28426a848b1ff2a02474ea663856345f" prot="public" static="no">
        <type>struct <ref refid="struct_n_v_s___attrs" kindref="compound">NVS_Attrs</ref></type>
        <definition>typedef struct NVS_Attrs  NVS_Attrs</definition>
        <argsstring></argsstring>
        <name>NVS_Attrs</name>
        <briefdescription>
<para>NVS attributes. </para>        </briefdescription>
        <detaileddescription>
<para>The address of an <ref refid="struct_n_v_s___attrs" kindref="compound">NVS_Attrs</ref> structure is passed to <ref refid="_n_v_s_8h_1ae2b667cddd9531d7a06bb0f9d8fd890f" kindref="member">NVS_getAttrs()</ref>.</para><para><simplesect kind="see"><para><ref refid="_n_v_s_8h_1ae2b667cddd9531d7a06bb0f9d8fd890f" kindref="member">NVS_getAttrs()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="425" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_n_v_s_8h_1abdc600f33c94c8bd706ad42ccdafcf3d" prot="public" static="no">
        <type>struct <ref refid="struct_n_v_s___config__" kindref="compound">NVS_Config_</ref> *</type>
        <definition>typedef struct NVS_Config_* NVS_Handle</definition>
        <argsstring></argsstring>
        <name>NVS_Handle</name>
        <briefdescription>
<para>A handle that is returned from the <ref refid="_n_v_s_8h_1a15488564c98e00aa62400a54dde3d44e" kindref="member">NVS_open()</ref> call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="430" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_n_v_s_8h_1a82f2a5311bf6dc69d62046fe20c3e108" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* NVS_CloseFxn) (NVS_Handle handle)</definition>
        <argsstring>)(NVS_Handle handle)</argsstring>
        <name>NVS_CloseFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_n_v_s_8h_1a12147fcc41f532802d97c0784c3e30c3" kindref="member">NVS_close()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="436" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_n_v_s_8h_1a80f150226f2b7a76dce36543d2ee635b" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* NVS_ControlFxn) (NVS_Handle handle, uint_fast16_t cmd, uintptr_t arg)</definition>
        <argsstring>)(NVS_Handle handle, uint_fast16_t cmd, uintptr_t arg)</argsstring>
        <name>NVS_ControlFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_n_v_s_8h_1a79b9b07b5a9d2c35426c15932c6d7c0e" kindref="member">NVS_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="442" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_n_v_s_8h_1a20498b8b2109828d0a3be43c1db27518" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* NVS_EraseFxn) (NVS_Handle handle, size_t offset, size_t size)</definition>
        <argsstring>)(NVS_Handle handle, size_t offset, size_t size)</argsstring>
        <name>NVS_EraseFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_n_v_s_8h_1a4f309d160ac4641c89501adc95d170b3" kindref="member">NVS_erase()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="449" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_n_v_s_8h_1a68a18a48c3f49ce6d2f30b7e8931859e" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* NVS_GetAttrsFxn) (NVS_Handle handle, NVS_Attrs *attrs)</definition>
        <argsstring>)(NVS_Handle handle, NVS_Attrs *attrs)</argsstring>
        <name>NVS_GetAttrsFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_n_v_s_8h_1ae2b667cddd9531d7a06bb0f9d8fd890f" kindref="member">NVS_getAttrs()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="456" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="456" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_n_v_s_8h_1ad9de01b5a2f7cee170c2012e33a60f8a" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* NVS_InitFxn) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>NVS_InitFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_n_v_s_8h_1a94e249f718eba502cdf34d098c83209e" kindref="member">NVS_init()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="462" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="462" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_n_v_s_8h_1ab40d7f4d10399ad5dfe51730d1dd0b9a" prot="public" static="no">
        <type><ref refid="_n_v_s_8h_1abdc600f33c94c8bd706ad42ccdafcf3d" kindref="member">NVS_Handle</ref>(*</type>
        <definition>typedef NVS_Handle(* NVS_OpenFxn) (uint_least8_t index, NVS_Params *params)</definition>
        <argsstring>)(uint_least8_t index, NVS_Params *params)</argsstring>
        <name>NVS_OpenFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_n_v_s_8h_1a15488564c98e00aa62400a54dde3d44e" kindref="member">NVS_open()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="468" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="468" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_n_v_s_8h_1a4846926325171c03e9b5cce5b16b6ba7" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* NVS_ReadFxn) (NVS_Handle handle, size_t offset, void *buffer, size_t bufferSize)</definition>
        <argsstring>)(NVS_Handle handle, size_t offset, void *buffer, size_t bufferSize)</argsstring>
        <name>NVS_ReadFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_n_v_s_8h_1a9e058f0724a9c325664f68ecfa2239cb" kindref="member">NVS_read()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="474" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="474" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_n_v_s_8h_1a70430e07ab4927c8943cdadcd4add4bf" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* NVS_WriteFxn) (NVS_Handle handle, size_t offset, void *buffer, size_t bufferSize, uint_fast16_t flags)</definition>
        <argsstring>)(NVS_Handle handle, size_t offset, void *buffer, size_t bufferSize, uint_fast16_t flags)</argsstring>
        <name>NVS_WriteFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_n_v_s_8h_1aae7abe0cb889a6d0cc1858bfc69ab7e0" kindref="member">NVS_write()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="481" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="481" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_n_v_s_8h_1aa726bab3d4fe81260d3fefbb92e93060" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* NVS_LockFxn) (NVS_Handle handle, uint32_t timeout)</definition>
        <argsstring>)(NVS_Handle handle, uint32_t timeout)</argsstring>
        <name>NVS_LockFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_n_v_s_8h_1a62d1593df9acb6d3c6446f1719f3bf28" kindref="member">NVS_lock()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="489" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="489" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_n_v_s_8h_1a45293f34f71f0a7e7c798917207b2874" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* NVS_UnlockFxn) (NVS_Handle handle)</definition>
        <argsstring>)(NVS_Handle handle)</argsstring>
        <name>NVS_UnlockFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_n_v_s_8h_1a01fb843c26ca406c5c9463eae6b0b817" kindref="member">NVS_unlock()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="495" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/NVS.h" bodystart="495" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_n_v_s_8h_1a54257fb6f2f9762bcc8bb3d6ce27cde8" prot="public" static="no">
        <type>struct <ref refid="struct_n_v_s___fxn_table" kindref="compound">NVS_FxnTable</ref></type>
        <definition>typedef struct NVS_FxnTable  NVS_FxnTable</definition>
        <argsstring></argsstring>
        <name>NVS_FxnTable</name>
        <briefdescription>
<para>The definition of an NVS function table that contains the required set of functions to control a specific NVS driver implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="532" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_n_v_s_8h_1a5fc4d942abf495e07fba7f3c0a7da83e" prot="public" static="no">
        <type>struct <ref refid="struct_n_v_s___config__" kindref="compound">NVS_Config_</ref></type>
        <definition>typedef struct NVS_Config_  NVS_Config</definition>
        <argsstring></argsstring>
        <name>NVS_Config</name>
        <briefdescription>
<para>NVS Global configuration. </para>        </briefdescription>
        <detaileddescription>
<para>The NVS_Config structure contains a set of pointers used to characterize the NVS driver implementation.</para><para>This structure needs to be defined before calling <ref refid="_n_v_s_8h_1a94e249f718eba502cdf34d098c83209e" kindref="member">NVS_init()</ref> and it must not be changed thereafter.</para><para><simplesect kind="see"><para><ref refid="_n_v_s_8h_1a94e249f718eba502cdf34d098c83209e" kindref="member">NVS_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="554" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_n_v_s_8h_1a12147fcc41f532802d97c0784c3e30c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NVS_close</definition>
        <argsstring>(NVS_Handle handle)</argsstring>
        <name>NVS_close</name>
        <param>
          <type><ref refid="_n_v_s_8h_1abdc600f33c94c8bd706ad42ccdafcf3d" kindref="member">NVS_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to close an <ref refid="_n_v_s_8h_1abdc600f33c94c8bd706ad42ccdafcf3d" kindref="member">NVS_Handle</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle returned from <ref refid="_n_v_s_8h_1a15488564c98e00aa62400a54dde3d44e" kindref="member">NVS_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_n_v_s_8h_1a15488564c98e00aa62400a54dde3d44e" kindref="member">NVS_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="563" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_n_v_s_8h_1a79b9b07b5a9d2c35426c15932c6d7c0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t NVS_control</definition>
        <argsstring>(NVS_Handle handle, uint_fast16_t cmd, uintptr_t arg)</argsstring>
        <name>NVS_control</name>
        <param>
          <type><ref refid="_n_v_s_8h_1abdc600f33c94c8bd706ad42ccdafcf3d" kindref="member">NVS_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint_fast16_t</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Function performs implementation specific features on a given <ref refid="_n_v_s_8h_1abdc600f33c94c8bd706ad42ccdafcf3d" kindref="member">NVS_Handle</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_n_v_s_8h_1a15488564c98e00aa62400a54dde3d44e" kindref="member">NVS_open()</ref> must be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="_n_v_s_8h_1abdc600f33c94c8bd706ad42ccdafcf3d" kindref="member">NVS_Handle</ref> returned from <ref refid="_n_v_s_8h_1a15488564c98e00aa62400a54dde3d44e" kindref="member">NVS_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>A command value defined by the driver specific implementation</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional read or write argument that is accompanied with <computeroutput>cmd</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Implementation specific return codes. Negative values indicate unsuccessful operations.</para></simplesect>
<simplesect kind="see"><para><ref refid="_n_v_s_8h_1a15488564c98e00aa62400a54dde3d44e" kindref="member">NVS_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="584" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_n_v_s_8h_1a4f309d160ac4641c89501adc95d170b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t NVS_erase</definition>
        <argsstring>(NVS_Handle handle, size_t offset, size_t size)</argsstring>
        <name>NVS_erase</name>
        <param>
          <type><ref refid="_n_v_s_8h_1abdc600f33c94c8bd706ad42ccdafcf3d" kindref="member">NVS_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Erase <computeroutput>size</computeroutput> bytes of the region beginning at <computeroutput>offset</computeroutput> bytes from the base of the region referenced by the <ref refid="_n_v_s_8h_1abdc600f33c94c8bd706ad42ccdafcf3d" kindref="member">NVS_Handle</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Erasing internal flash on most devices can introduce significant interrupt latencies while the erase operation is in in progress. The user may want to surround certain real-time critical code sections with <ref refid="_n_v_s_8h_1a62d1593df9acb6d3c6446f1719f3bf28" kindref="member">NVS_lock()</ref> and <ref refid="_n_v_s_8h_1a01fb843c26ca406c5c9463eae6b0b817" kindref="member">NVS_unlock()</ref> calls in order to prevent uncoordinated flash erase operations from negatively impacting performance.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle returned from <ref refid="_n_v_s_8h_1a15488564c98e00aa62400a54dde3d44e" kindref="member">NVS_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The byte offset into the NVS region to start erasing from (must be erase sector aligned)</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to erase (must be integer multiple of sector size)</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group___n_v_s___s_t_a_t_u_s_1ga5f3b6583ee909863b86799762dc8b4aa" kindref="member">NVS_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___n_v_s___s_t_a_t_u_s_1ga07f2472d1204718531ddf7a369b86ccb" kindref="member">NVS_STATUS_INV_ALIGNMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>offset</computeroutput> is not aligned on a sector boundary </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___n_v_s___s_t_a_t_u_s_1ga30a816faeeb9a50757055fb6f10189a9" kindref="member">NVS_STATUS_INV_OFFSET</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>offset</computeroutput> exceeds region size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___n_v_s___s_t_a_t_u_s_1ga6bdc99317ca872755243d9a76ad1db95" kindref="member">NVS_STATUS_INV_SIZE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>size</computeroutput> or <computeroutput>offset</computeroutput> + <computeroutput>size</computeroutput> exceeds region size, or if <computeroutput>size</computeroutput> is not an integer multiple of the flash sector size. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___n_v_s___s_t_a_t_u_s_1ga995c9896630b7a0cd1662e7be9c4cf34" kindref="member">NVS_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If an internal error occurred erasing the flash. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="616" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_n_v_s_8h_1ae2b667cddd9531d7a06bb0f9d8fd890f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NVS_getAttrs</definition>
        <argsstring>(NVS_Handle handle, NVS_Attrs *attrs)</argsstring>
        <name>NVS_getAttrs</name>
        <param>
          <type><ref refid="_n_v_s_8h_1abdc600f33c94c8bd706ad42ccdafcf3d" kindref="member">NVS_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_n_v_s___attrs" kindref="compound">NVS_Attrs</ref> *</type>
          <declname>attrs</declname>
        </param>
        <briefdescription>
<para>Function to get the NVS attributes. </para>        </briefdescription>
        <detaileddescription>
<para>This function will populate a <ref refid="struct_n_v_s___attrs" kindref="compound">NVS_Attrs</ref> structure with attributes specific to the memory region associated with the <ref refid="_n_v_s_8h_1abdc600f33c94c8bd706ad42ccdafcf3d" kindref="member">NVS_Handle</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle returned from <ref refid="_n_v_s_8h_1a15488564c98e00aa62400a54dde3d44e" kindref="member">NVS_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attrs</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to store attributes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="628" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_n_v_s_8h_1a94e249f718eba502cdf34d098c83209e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NVS_init</definition>
        <argsstring>(void)</argsstring>
        <name>NVS_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to initialize the NVS module. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The NVS_config structure must exist and be persistent before this function can be called. This function must also be called before any other NVS APIs. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="637" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_n_v_s_8h_1a62d1593df9acb6d3c6446f1719f3bf28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t NVS_lock</definition>
        <argsstring>(NVS_Handle handle, uint32_t timeout)</argsstring>
        <name>NVS_lock</name>
        <param>
          <type><ref refid="_n_v_s_8h_1abdc600f33c94c8bd706ad42ccdafcf3d" kindref="member">NVS_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Function to lock the NVS driver. </para>        </briefdescription>
        <detaileddescription>
<para>This function is provided in the event that the user needs to perform some flash related operation not provided by the NVS driver API set or if the user simply needs to block flash operations for a period of time.</para><para>For example, the interrupt latency introduced by an uncoordinated flash write operation could interfere with some critical operation being performed by the application.</para><para><ref refid="_n_v_s_8h_1a62d1593df9acb6d3c6446f1719f3bf28" kindref="member">NVS_lock()</ref> prevents any other thread from initiating read, write, or erase operations while the user is performing an operation which is incompatible with those functions.</para><para>When the application no longer needs to block flash operations by other threads, <ref refid="_n_v_s_8h_1a01fb843c26ca406c5c9463eae6b0b817" kindref="member">NVS_unlock()</ref> must be called to allow NVS write or erase APIs to complete.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle returned from <ref refid="_n_v_s_8h_1a15488564c98e00aa62400a54dde3d44e" kindref="member">NVS_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout (in milliseconds) to wait, or <ref refid="_n_v_s_8h_1abaf71a566fbd69fc043956bfc8146153" kindref="member">NVS_LOCK_WAIT_FOREVER</ref>, <ref refid="_n_v_s_8h_1ad078d2e244f0c623722b3b9492733e44" kindref="member">NVS_LOCK_NO_WAIT</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group___n_v_s___s_t_a_t_u_s_1ga5f3b6583ee909863b86799762dc8b4aa" kindref="member">NVS_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___n_v_s___s_t_a_t_u_s_1ga1b42309ac8efec007159e58382dd4a0c" kindref="member">NVS_STATUS_TIMEOUT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>timeout</computeroutput> has expired. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="667" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_n_v_s_8h_1a15488564c98e00aa62400a54dde3d44e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_n_v_s_8h_1abdc600f33c94c8bd706ad42ccdafcf3d" kindref="member">NVS_Handle</ref></type>
        <definition>NVS_Handle NVS_open</definition>
        <argsstring>(uint_least8_t index, NVS_Params *params)</argsstring>
        <name>NVS_open</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="struct_n_v_s___params" kindref="compound">NVS_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Open an NVS region for reading and writing. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_n_v_s_8h_1a94e249f718eba502cdf34d098c83209e" kindref="member">NVS_init()</ref> was called.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index in the <ref refid="_n_v_s_8h_1a5fc4d942abf495e07fba7f3c0a7da83e" kindref="member">NVS_Config</ref> table of the region to manage.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a parameter region. If NULL, default parameter values will be used.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A non-zero handle on success, else NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="682" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_n_v_s_8h_1af7562718a6eed5456d423ef7a16c8598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NVS_Params_init</definition>
        <argsstring>(NVS_Params *params)</argsstring>
        <name>NVS_Params_init</name>
        <param>
          <type><ref refid="struct_n_v_s___params" kindref="compound">NVS_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize the <ref refid="struct_n_v_s___params" kindref="compound">NVS_Params</ref> struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to <ref refid="struct_n_v_s___params" kindref="compound">NVS_Params</ref> structure for initialization. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="690" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_n_v_s_8h_1a9e058f0724a9c325664f68ecfa2239cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t NVS_read</definition>
        <argsstring>(NVS_Handle handle, size_t offset, void *buffer, size_t bufferSize)</argsstring>
        <name>NVS_read</name>
        <param>
          <type><ref refid="_n_v_s_8h_1abdc600f33c94c8bd706ad42ccdafcf3d" kindref="member">NVS_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufferSize</declname>
        </param>
        <briefdescription>
<para>Read data from the NVS region associated with the <ref refid="_n_v_s_8h_1abdc600f33c94c8bd706ad42ccdafcf3d" kindref="member">NVS_Handle</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle returned from <ref refid="_n_v_s_8h_1a15488564c98e00aa62400a54dde3d44e" kindref="member">NVS_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The byte offset into the NVS region to start reading from.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer to copy the data to.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer (number of bytes to read).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group___n_v_s___s_t_a_t_u_s_1ga5f3b6583ee909863b86799762dc8b4aa" kindref="member">NVS_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___n_v_s___s_t_a_t_u_s_1ga30a816faeeb9a50757055fb6f10189a9" kindref="member">NVS_STATUS_INV_OFFSET</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>offset</computeroutput> + <computeroutput>size</computeroutput> exceed the size of the region. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="708" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_n_v_s_8h_1a01fb843c26ca406c5c9463eae6b0b817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NVS_unlock</definition>
        <argsstring>(NVS_Handle handle)</argsstring>
        <name>NVS_unlock</name>
        <param>
          <type><ref refid="_n_v_s_8h_1abdc600f33c94c8bd706ad42ccdafcf3d" kindref="member">NVS_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to unlock the NVS driver. </para>        </briefdescription>
        <detaileddescription>
<para>This function allows NVS write and erase operations to proceed after being temporarily inhibited by a call to <ref refid="_n_v_s_8h_1a62d1593df9acb6d3c6446f1719f3bf28" kindref="member">NVS_lock()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle returned from <ref refid="_n_v_s_8h_1a15488564c98e00aa62400a54dde3d44e" kindref="member">NVS_open()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="719" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_n_v_s_8h_1aae7abe0cb889a6d0cc1858bfc69ab7e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t NVS_write</definition>
        <argsstring>(NVS_Handle handle, size_t offset, void *buffer, size_t bufferSize, uint_fast16_t flags)</argsstring>
        <name>NVS_write</name>
        <param>
          <type><ref refid="_n_v_s_8h_1abdc600f33c94c8bd706ad42ccdafcf3d" kindref="member">NVS_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufferSize</declname>
        </param>
        <param>
          <type>uint_fast16_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Write data to the NVS region associated with the <ref refid="_n_v_s_8h_1abdc600f33c94c8bd706ad42ccdafcf3d" kindref="member">NVS_Handle</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Writing to internal flash on most devices can introduce significant interrupt latencies while the write operation is in in progress. The user may want to surround certain real-time critical code sections with <ref refid="_n_v_s_8h_1a62d1593df9acb6d3c6446f1719f3bf28" kindref="member">NVS_lock()</ref> and <ref refid="_n_v_s_8h_1a01fb843c26ca406c5c9463eae6b0b817" kindref="member">NVS_unlock()</ref> calls in order to prevent uncoordinated flash write operations from negatively impacting performance.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle returned from <ref refid="_n_v_s_8h_1a15488564c98e00aa62400a54dde3d44e" kindref="member">NVS_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The byte offset into the NVS region to start writing.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer containing data to write to the NVS region.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer (number of bytes to write).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Write flags (<ref refid="_n_v_s_8h_1afdf449ac94235c5c4b108f5e5e925f03" kindref="member">NVS_WRITE_ERASE</ref>, <ref refid="_n_v_s_8h_1a5a4d29a7281f1ad484cc8b7ccc30b363" kindref="member">NVS_WRITE_PRE_VERIFY</ref>, <ref refid="_n_v_s_8h_1a04d152372a71d46161f28b4db3163202" kindref="member">NVS_WRITE_POST_VERIFY</ref>).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group___n_v_s___s_t_a_t_u_s_1ga5f3b6583ee909863b86799762dc8b4aa" kindref="member">NVS_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___n_v_s___s_t_a_t_u_s_1ga995c9896630b7a0cd1662e7be9c4cf34" kindref="member">NVS_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If the internal flash write operation failed, or if <ref refid="_n_v_s_8h_1a04d152372a71d46161f28b4db3163202" kindref="member">NVS_WRITE_POST_VERIFY</ref> was requested and the destination flash range does not match the source <computeroutput>buffer</computeroutput> data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___n_v_s___s_t_a_t_u_s_1ga30a816faeeb9a50757055fb6f10189a9" kindref="member">NVS_STATUS_INV_OFFSET</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>offset</computeroutput> + <computeroutput>size</computeroutput> exceed the size of the region. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___n_v_s___s_t_a_t_u_s_1gad8da7024d67625daf4347c22d50fdb4b" kindref="member">NVS_STATUS_INV_WRITE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If <ref refid="_n_v_s_8h_1a5a4d29a7281f1ad484cc8b7ccc30b363" kindref="member">NVS_WRITE_PRE_VERIFY</ref> is requested and the destination flash address range cannot be change to the values desired. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___n_v_s___s_t_a_t_u_s_1ga07f2472d1204718531ddf7a369b86ccb" kindref="member">NVS_STATUS_INV_ALIGNMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If <ref refid="_n_v_s_8h_1afdf449ac94235c5c4b108f5e5e925f03" kindref="member">NVS_WRITE_ERASE</ref> is requested and <computeroutput>offset</computeroutput> is not aligned on a sector boundary</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This call may lock a region to ensure atomic access to the region. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h" line="761" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Non-Volatile Storage driver interface. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para>To use the NVS driver, ensure that the correct driver library for your device is linked in and include this header file as follows: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/NVS.h&gt;</highlight></codeline>
</programlisting></para><para>This module serves as the main interface for applications. Its purpose is to redirect the NVS APIs to specific driver implementations which are specified using a pointer to a <ref refid="struct_n_v_s___fxn_table" kindref="compound">NVS_FxnTable</ref>.</para><para><heading level="1">Overview</heading>
</para><para>The NVS module allows you to manage non-volatile memory. Using the NVS APIs, you can read and write data from and to persistent storage.</para><para>Each NVS object manages a region of non-volatile memory. The size is specified in the device specific driver&apos;s hardware attributes. A sector is the smallest unit of non-volatile storage that can be erased at one time. The size of the sector, or sector size, is hardware specific and may be meaningless for some non-volatile storage hardware. For flash memory devices, the region must be aligned with the sector size. That is, the region must start on a sector boundary. Additionally, the overall size of the region must be an integer multiple of the sector size.</para><para><heading level="1">Thread Safety</heading>
</para><para>All NVS APIs are globally thread safe. Consequently, only one write, erase, or read in the case of SPI flash operation is allowed to be performed at a time, even for distinct NVS regions. Threads initiating new NVS writes or erases will block until any current operation completes.</para><para><heading level="1">Interrupt Latency During Flash Operations</heading>
</para><para>When writing to or erasing internal flash, interrupts must be disabled to avoid executing code in flash while the flash is being reprogrammed. This constraint is met internally by the driver. User code does not need to safeguard against this.</para><para>Care must be taken by the user to not perform flash write or erase operations during latency critical phases of an application. See the <ref refid="_n_v_s_8h_1a62d1593df9acb6d3c6446f1719f3bf28" kindref="member">NVS_lock()</ref> and <ref refid="_n_v_s_8h_1a01fb843c26ca406c5c9463eae6b0b817" kindref="member">NVS_unlock()</ref> API descriptions for more information.</para><para><heading level="1">Usage</heading>
</para><para>The NVS driver interface provides device independent APIs, data types, and macros. The following code example opens an NVS region instance, writes a string into it, then prints the string after reading it back into a local buffer, and also prints the string from its directly addressable location in flash memory.</para><para><programlisting><codeline><highlight class="normal">NVS_Handle<sp/>rHandle;</highlight></codeline>
<codeline><highlight class="normal">NVS_Attrs<sp/>regionAttrs;</highlight></codeline>
<codeline><highlight class="normal">NVS_Params<sp/>nvsParams;</highlight></codeline>
<codeline><highlight class="normal">uint_fast16_t<sp/>status;</highlight></codeline>
<codeline><highlight class="normal">char<sp/>buf[32];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>the<sp/>NVS<sp/>driver</highlight></codeline>
<codeline><highlight class="normal">NVS_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Open<sp/>the<sp/>NVS<sp/>region<sp/>specified<sp/>by<sp/>the<sp/>0<sp/>element<sp/>in<sp/>the<sp/>NVS_config[]</highlight></codeline>
<codeline><highlight class="normal">//<sp/>array<sp/>defined<sp/>in<sp/>Board.c.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Use<sp/>default<sp/>NVS_Params<sp/>to<sp/>open<sp/>this<sp/>memory<sp/>region,<sp/>hence<sp/>NULL</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">rHandle<sp/>=<sp/>NVS_open(Board_NVSINTERNAL,<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>confirm<sp/>that<sp/>the<sp/>NVS<sp/>region<sp/>opened<sp/>properly</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(rHandle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Error<sp/>opening<sp/>NVS<sp/>driver</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>fetch<sp/>the<sp/>generic<sp/>NVS<sp/>region<sp/>attributes</highlight></codeline>
<codeline><highlight class="normal">NVS_getAttrs(rHandle,<sp/>&amp;regionAttrs);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>erase<sp/>the<sp/>first<sp/>sector<sp/>of<sp/>the<sp/>NVS<sp/>region</highlight></codeline>
<codeline><highlight class="normal">status<sp/>=<sp/>NVS_erase(rHandle,<sp/>0,<sp/>regionAttrs.sectorSize);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(status<sp/>!=<sp/>NVS_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Error<sp/>handling<sp/>code</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>write<sp/>&quot;Hello&quot;<sp/>to<sp/>the<sp/>base<sp/>address<sp/>of<sp/>region<sp/>0,<sp/>verify<sp/>after<sp/>write</highlight></codeline>
<codeline><highlight class="normal">status<sp/>=<sp/>NVS_write(rHandle,<sp/>0,<sp/>&quot;Hello&quot;,<sp/>strlen(&quot;Hello&quot;)+1,<sp/>NVS_POST_VERIFY);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(status<sp/>!=<sp/>NVS_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Error<sp/>handling<sp/>code</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>copy<sp/>&quot;Hello&quot;<sp/>from<sp/>region0<sp/>into<sp/>local<sp/>&apos;buf&apos;</highlight></codeline>
<codeline><highlight class="normal">status<sp/>=<sp/>NVS_read(rHandle,<sp/>0,<sp/>buf,<sp/>strlen(&quot;Hello&quot;)+1);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(status<sp/>!=<sp/>NVS_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Error<sp/>handling<sp/>code</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>print<sp/>string<sp/>from<sp/>fetched<sp/>NVS<sp/>storage</highlight></codeline>
<codeline><highlight class="normal">System_printf(&quot;%s\n&quot;,<sp/>buf);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>print<sp/>string<sp/>using<sp/>direct<sp/>address<sp/>reference<sp/>if<sp/>valid</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(regionAttrs.regionBase<sp/>!=<sp/>NVS_REGION_NOT_ADDRESSABLE)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>System_printf(&quot;%s\n&quot;,<sp/>regionAttrs.regionBase);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>close<sp/>the<sp/>region</highlight></codeline>
<codeline><highlight class="normal">NVS_close(rHandle);</highlight></codeline>
</programlisting></para><para>Details for the example code above are described in the following subsections.</para><para><heading level="3">NVS Driver Configuration</heading>
</para><para>In order to use the NVS APIs, the application is required to provide device-specific NVS configuration in the Board.c file. The NVS driver interface defines a configuration data structure, <ref refid="_n_v_s_8h_1a5fc4d942abf495e07fba7f3c0a7da83e" kindref="member">NVS_Config</ref>.</para><para>The application must declare an array of <ref refid="_n_v_s_8h_1a5fc4d942abf495e07fba7f3c0a7da83e" kindref="member">NVS_Config</ref> elements, named <computeroutput>NVS_config</computeroutput>[]. Each element of <computeroutput>NVS_config</computeroutput>[] is populated with pointers to a device specific NVS driver implementation&apos;s function table, driver object, and hardware attributes. The hardware attributes define properties such as the NVS region&apos;s base address and size, Each element in <computeroutput>NVS_config</computeroutput>[] corresponds to a NVS instance, and none of the elements should have NULL pointers.</para><para>You will need to check the device-specific NVS driver implementation&apos;s header file for example configuration. Please also refer to the Board.c file of any of the provided examples to see the NVS configuration.</para><para><heading level="3">Initializing the NVS Driver</heading>
</para><para><ref refid="_n_v_s_8h_1a94e249f718eba502cdf34d098c83209e" kindref="member">NVS_init()</ref> must be called before any other NVS APIs. This function calls the device implementation&apos;s NVS initialization function, for each element of <computeroutput>NVS_config</computeroutput>[].</para><para><heading level="3">Opening the NVS Driver</heading>
</para><para>Opening a NVS requires four steps:<orderedlist>
<listitem><para>Optionally create and initialize a <ref refid="struct_n_v_s___params" kindref="compound">NVS_Params</ref> structure.</para></listitem><listitem><para>Fill in the desired parameters.</para></listitem><listitem><para>Call <ref refid="_n_v_s_8h_1a15488564c98e00aa62400a54dde3d44e" kindref="member">NVS_open()</ref>, passing the index of the NVS region in the <ref refid="_n_v_s_8h_1a5fc4d942abf495e07fba7f3c0a7da83e" kindref="member">NVS_Config</ref> structure, and the address of the <ref refid="struct_n_v_s___params" kindref="compound">NVS_Params</ref> structure.</para></listitem><listitem><para>Check that the <ref refid="_n_v_s_8h_1abdc600f33c94c8bd706ad42ccdafcf3d" kindref="member">NVS_Handle</ref> returned by <ref refid="_n_v_s_8h_1a15488564c98e00aa62400a54dde3d44e" kindref="member">NVS_open()</ref> is non-NULL, and save it. The handle will be used to read and write to the NVS you just opened.</para></listitem></orderedlist>
</para><para><simplesect kind="note"><para>Each NVS index can only be opened exclusively. Calling <ref refid="_n_v_s_8h_1a15488564c98e00aa62400a54dde3d44e" kindref="member">NVS_open()</ref> multiple times with the same index will result in an error. The index can be re-used if <ref refid="_n_v_s_8h_1a12147fcc41f532802d97c0784c3e30c3" kindref="member">NVS_close()</ref> is called first. </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2018,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*!****************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>NVS.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>Non-Volatile<sp/>Storage<sp/>driver<sp/>interface</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/>To<sp/>use<sp/>the<sp/>NVS<sp/>driver,<sp/>ensure<sp/>that<sp/>the<sp/>correct<sp/>driver<sp/>library<sp/>for<sp/>your</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>device<sp/>is<sp/>linked<sp/>in<sp/>and<sp/>include<sp/>this<sp/>header<sp/>file<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/NVS.h&gt;</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>module<sp/>serves<sp/>as<sp/>the<sp/>main<sp/>interface<sp/>for<sp/>applications.<sp/>Its<sp/>purpose</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/>is<sp/>to<sp/>redirect<sp/>the<sp/>NVS<sp/>APIs<sp/>to<sp/>specific<sp/>driver<sp/>implementations</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/>which<sp/>are<sp/>specified<sp/>using<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>#NVS_FxnTable.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Overview<sp/>#</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>NVS<sp/>module<sp/>allows<sp/>you<sp/>to<sp/>manage<sp/>non-volatile<sp/>memory.<sp/><sp/>Using<sp/>the</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/>NVS<sp/>APIs,<sp/>you<sp/>can<sp/>read<sp/>and<sp/>write<sp/>data<sp/>from<sp/>and<sp/>to<sp/>persistent<sp/>storage.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/>Each<sp/>NVS<sp/>object<sp/>manages<sp/>a<sp/>region<sp/>of<sp/>non-volatile<sp/>memory.<sp/>The<sp/>size<sp/>is</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/>specified<sp/>in<sp/>the<sp/>device<sp/>specific<sp/>driver&apos;s<sp/>hardware<sp/>attributes.<sp/>A<sp/>sector</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/>is<sp/>the<sp/>smallest<sp/>unit<sp/>of<sp/>non-volatile<sp/>storage<sp/>that<sp/>can<sp/>be<sp/>erased<sp/>at</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/>one<sp/>time.<sp/>The<sp/>size<sp/>of<sp/>the<sp/>sector,<sp/>or<sp/>sector<sp/>size,<sp/>is<sp/>hardware<sp/>specific<sp/>and</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/>may<sp/>be<sp/>meaningless<sp/>for<sp/>some<sp/>non-volatile<sp/>storage<sp/>hardware.<sp/>For<sp/>flash</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/>memory<sp/>devices,<sp/>the<sp/>region<sp/>must<sp/>be<sp/>aligned<sp/>with<sp/>the<sp/>sector<sp/>size.<sp/>That<sp/>is,</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>region<sp/>must<sp/>start<sp/>on<sp/>a<sp/>sector<sp/>boundary.<sp/>Additionally,<sp/>the<sp/>overall<sp/>size</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/>of<sp/>the<sp/>region<sp/>must<sp/>be<sp/>an<sp/>integer<sp/>multiple<sp/>of<sp/>the<sp/>sector<sp/>size.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Thread<sp/>Safety<sp/>#</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/>All<sp/>NVS<sp/>APIs<sp/>are<sp/>globally<sp/>thread<sp/>safe.<sp/>Consequently,<sp/>only<sp/>one<sp/>write,</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/>erase,<sp/>or<sp/>read<sp/>in<sp/>the<sp/>case<sp/>of<sp/>SPI<sp/>flash<sp/>operation<sp/>is<sp/>allowed<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/>performed<sp/>at<sp/>a<sp/>time,<sp/>even<sp/>for<sp/>distinct<sp/>NVS<sp/>regions.<sp/>Threads<sp/>initiating</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/><sp/>new<sp/>NVS<sp/>writes<sp/>or<sp/>erases<sp/>will<sp/>block<sp/>until<sp/>any<sp/>current<sp/>operation<sp/>completes.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Interrupt<sp/>Latency<sp/>During<sp/>Flash<sp/>Operations<sp/>#</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/>When<sp/>writing<sp/>to<sp/>or<sp/>erasing<sp/>internal<sp/>flash,<sp/>interrupts<sp/>must<sp/>be<sp/>disabled</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/>to<sp/>avoid<sp/>executing<sp/>code<sp/>in<sp/>flash<sp/>while<sp/>the<sp/>flash<sp/>is<sp/>being<sp/>reprogrammed.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>constraint<sp/>is<sp/>met<sp/>internally<sp/>by<sp/>the<sp/>driver.<sp/>User<sp/>code<sp/>does<sp/>not<sp/>need</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/>to<sp/>safeguard<sp/>against<sp/>this.</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/>Care<sp/>must<sp/>be<sp/>taken<sp/>by<sp/>the<sp/>user<sp/>to<sp/>not<sp/>perform<sp/>flash<sp/>write<sp/>or<sp/>erase</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/>operations<sp/>during<sp/>latency<sp/>critical<sp/>phases<sp/>of<sp/>an<sp/>application.<sp/>See<sp/>the</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/><sp/>NVS_lock()<sp/>and<sp/>NVS_unlock()<sp/>API<sp/>descriptions<sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Usage<sp/>#</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>NVS<sp/>driver<sp/>interface<sp/>provides<sp/>device<sp/>independent<sp/>APIs,<sp/>data<sp/>types,</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>macros.<sp/><sp/>The<sp/>following<sp/>code<sp/>example<sp/>opens<sp/>an<sp/>NVS<sp/>region<sp/>instance,</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/>writes<sp/>a<sp/>string<sp/>into<sp/>it,<sp/>then<sp/>prints<sp/>the<sp/>string<sp/>after<sp/>reading<sp/>it<sp/>back</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/>into<sp/>a<sp/>local<sp/>buffer,<sp/>and<sp/>also<sp/>prints<sp/>the<sp/>string<sp/>from<sp/>its<sp/>directly</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/>addressable<sp/>location<sp/>in<sp/>flash<sp/>memory.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>NVS_Handle<sp/>rHandle;</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>NVS_Attrs<sp/>regionAttrs;</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>NVS_Params<sp/>nvsParams;</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>uint_fast16_t<sp/>status;</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>char<sp/>buf[32];</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>the<sp/>NVS<sp/>driver</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>NVS_init();</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>Open<sp/>the<sp/>NVS<sp/>region<sp/>specified<sp/>by<sp/>the<sp/>0<sp/>element<sp/>in<sp/>the<sp/>NVS_config[]</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>array<sp/>defined<sp/>in<sp/>Board.c.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>Use<sp/>default<sp/>NVS_Params<sp/>to<sp/>open<sp/>this<sp/>memory<sp/>region,<sp/>hence<sp/>NULL</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>rHandle<sp/>=<sp/>NVS_open(Board_NVSINTERNAL,<sp/>NULL);</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>confirm<sp/>that<sp/>the<sp/>NVS<sp/>region<sp/>opened<sp/>properly</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>if<sp/>(rHandle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Error<sp/>opening<sp/>NVS<sp/>driver</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>fetch<sp/>the<sp/>generic<sp/>NVS<sp/>region<sp/>attributes</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>NVS_getAttrs(rHandle,<sp/>&amp;regionAttrs);</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>erase<sp/>the<sp/>first<sp/>sector<sp/>of<sp/>the<sp/>NVS<sp/>region</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>status<sp/>=<sp/>NVS_erase(rHandle,<sp/>0,<sp/>regionAttrs.sectorSize);</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>if<sp/>(status<sp/>!=<sp/>NVS_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Error<sp/>handling<sp/>code</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>write<sp/>&quot;Hello&quot;<sp/>to<sp/>the<sp/>base<sp/>address<sp/>of<sp/>region<sp/>0,<sp/>verify<sp/>after<sp/>write</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>status<sp/>=<sp/>NVS_write(rHandle,<sp/>0,<sp/>&quot;Hello&quot;,<sp/>strlen(&quot;Hello&quot;)+1,<sp/>NVS_POST_VERIFY);</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>if<sp/>(status<sp/>!=<sp/>NVS_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Error<sp/>handling<sp/>code</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>copy<sp/>&quot;Hello&quot;<sp/>from<sp/>region0<sp/>into<sp/>local<sp/>&apos;buf&apos;</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>status<sp/>=<sp/>NVS_read(rHandle,<sp/>0,<sp/>buf,<sp/>strlen(&quot;Hello&quot;)+1);</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>if<sp/>(status<sp/>!=<sp/>NVS_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Error<sp/>handling<sp/>code</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>print<sp/>string<sp/>from<sp/>fetched<sp/>NVS<sp/>storage</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>System_printf(&quot;%s\n&quot;,<sp/>buf);</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>print<sp/>string<sp/>using<sp/>direct<sp/>address<sp/>reference<sp/>if<sp/>valid</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>if<sp/>(regionAttrs.regionBase<sp/>!=<sp/>NVS_REGION_NOT_ADDRESSABLE)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>System_printf(&quot;%s\n&quot;,<sp/>regionAttrs.regionBase);</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>close<sp/>the<sp/>region</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>NVS_close(rHandle);</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/><sp/>Details<sp/>for<sp/>the<sp/>example<sp/>code<sp/>above<sp/>are<sp/>described<sp/>in<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/><sp/>subsections.</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>NVS<sp/>Driver<sp/>Configuration<sp/>#</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/><sp/>In<sp/>order<sp/>to<sp/>use<sp/>the<sp/>NVS<sp/>APIs,<sp/>the<sp/>application<sp/>is<sp/>required</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/><sp/>to<sp/>provide<sp/>device-specific<sp/>NVS<sp/>configuration<sp/>in<sp/>the<sp/>Board.c<sp/>file.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>NVS<sp/>driver<sp/>interface<sp/>defines<sp/>a<sp/>configuration<sp/>data<sp/>structure,</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/><sp/>#NVS_Config.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>application<sp/>must<sp/>declare<sp/>an<sp/>array<sp/>of<sp/>#NVS_Config<sp/>elements,<sp/>named</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/><sp/>\p<sp/>NVS_config[].<sp/><sp/>Each<sp/>element<sp/>of<sp/>\p<sp/>NVS_config[]<sp/>is<sp/>populated<sp/>with</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/><sp/>pointers<sp/>to<sp/>a<sp/>device<sp/>specific<sp/>NVS<sp/>driver<sp/>implementation&apos;s<sp/>function</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/><sp/>table,<sp/>driver<sp/>object,<sp/>and<sp/>hardware<sp/>attributes.<sp/><sp/>The<sp/>hardware<sp/>attributes</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/><sp/>define<sp/>properties<sp/>such<sp/>as<sp/>the<sp/>NVS<sp/>region&apos;s<sp/>base<sp/>address<sp/>and<sp/>size,</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/><sp/>Each<sp/>element<sp/>in<sp/>\p<sp/>NVS_config[]<sp/>corresponds<sp/>to<sp/>a<sp/>NVS<sp/>instance,<sp/>and<sp/>none</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/><sp/>of<sp/>the<sp/>elements<sp/>should<sp/>have<sp/>NULL<sp/>pointers.</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/><sp/>You<sp/>will<sp/>need<sp/>to<sp/>check<sp/>the<sp/>device-specific<sp/>NVS<sp/>driver<sp/>implementation&apos;s</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/><sp/>header<sp/>file<sp/>for<sp/>example<sp/>configuration.<sp/><sp/>Please<sp/>also<sp/>refer<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/><sp/>Board.c<sp/>file<sp/>of<sp/>any<sp/>of<sp/>the<sp/>provided<sp/>examples<sp/>to<sp/>see<sp/>the<sp/>NVS<sp/>configuration.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Initializing<sp/>the<sp/>NVS<sp/>Driver<sp/>#</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/><sp/>NVS_init()<sp/>must<sp/>be<sp/>called<sp/>before<sp/>any<sp/>other<sp/>NVS<sp/>APIs.<sp/><sp/>This<sp/>function</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/><sp/>calls<sp/>the<sp/>device<sp/>implementation&apos;s<sp/>NVS<sp/>initialization<sp/>function,<sp/>for<sp/>each</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/><sp/>element<sp/>of<sp/>\p<sp/>NVS_config[].</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Opening<sp/>the<sp/>NVS<sp/>Driver<sp/>#</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/><sp/>Opening<sp/>a<sp/>NVS<sp/>requires<sp/>four<sp/>steps:</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/><sp/>1.<sp/><sp/>Optionally<sp/>create<sp/>and<sp/>initialize<sp/>a<sp/>#NVS_Params<sp/>structure.</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/><sp/>2.<sp/><sp/>Fill<sp/>in<sp/>the<sp/>desired<sp/>parameters.</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/><sp/>3.<sp/><sp/>Call<sp/>NVS_open(),<sp/>passing<sp/>the<sp/>index<sp/>of<sp/>the<sp/>NVS<sp/>region<sp/>in<sp/>the<sp/>#NVS_Config</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>structure,<sp/>and<sp/>the<sp/>address<sp/>of<sp/>the<sp/>#NVS_Params<sp/>structure.</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/><sp/>4.<sp/><sp/>Check<sp/>that<sp/>the<sp/>#NVS_Handle<sp/>returned<sp/>by<sp/>NVS_open()<sp/>is<sp/>non-NULL,</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>save<sp/>it.<sp/><sp/>The<sp/>handle<sp/>will<sp/>be<sp/>used<sp/>to<sp/>read<sp/>and<sp/>write<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>NVS<sp/>you<sp/>just<sp/>opened.</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/><sp/>\note<sp/>Each<sp/>NVS<sp/>index<sp/>can<sp/>only<sp/>be<sp/>opened<sp/>exclusively.<sp/>Calling<sp/>NVS_open()</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/><sp/>multiple<sp/>times<sp/>with<sp/>the<sp/>same<sp/>index<sp/>will<sp/>result<sp/>in<sp/>an<sp/>error.<sp/>The<sp/>index<sp/>can</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/><sp/>be<sp/>re-used<sp/>if<sp/>NVS_close()<sp/>is<sp/>called<sp/>first.</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_NVS__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_NVS__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="group___n_v_s___c_o_n_t_r_o_l_1gaa9fa1c41660d17139bce63ff34cd774f" refkind="member"><highlight class="preprocessor">#define<sp/>NVS_CMD_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="group___n_v_s___c_o_n_t_r_o_l_1gad82fd139152ca14946c80c6c91edb4a0" refkind="member"><highlight class="preprocessor">#define<sp/>NVS_STATUS_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="group___n_v_s___s_t_a_t_u_s_1ga5f3b6583ee909863b86799762dc8b4aa" refkind="member"><highlight class="preprocessor">#define<sp/>NVS_STATUS_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="257" refid="group___n_v_s___s_t_a_t_u_s_1ga995c9896630b7a0cd1662e7be9c4cf34" refkind="member"><highlight class="preprocessor">#define<sp/>NVS_STATUS_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="group___n_v_s___s_t_a_t_u_s_1gac8aa59663f65af4fa564a3a83cd7d6e1" refkind="member"><highlight class="preprocessor">#define<sp/>NVS_STATUS_UNDEFINEDCMD<sp/><sp/><sp/><sp/><sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="group___n_v_s___s_t_a_t_u_s_1ga1b42309ac8efec007159e58382dd4a0c" refkind="member"><highlight class="preprocessor">#define<sp/>NVS_STATUS_TIMEOUT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="282" refid="group___n_v_s___s_t_a_t_u_s_1ga30a816faeeb9a50757055fb6f10189a9" refkind="member"><highlight class="preprocessor">#define<sp/>NVS_STATUS_INV_OFFSET<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="group___n_v_s___s_t_a_t_u_s_1ga07f2472d1204718531ddf7a369b86ccb" refkind="member"><highlight class="preprocessor">#define<sp/>NVS_STATUS_INV_ALIGNMENT<sp/><sp/><sp/><sp/>(-5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="group___n_v_s___s_t_a_t_u_s_1ga6bdc99317ca872755243d9a76ad1db95" refkind="member"><highlight class="preprocessor">#define<sp/>NVS_STATUS_INV_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="group___n_v_s___s_t_a_t_u_s_1gad8da7024d67625daf4347c22d50fdb4b" refkind="member"><highlight class="preprocessor">#define<sp/>NVS_STATUS_INV_WRITE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="comment">/*<sp/>Add<sp/>NVS_CMD_&lt;commands&gt;<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="_n_v_s_8h_1afdf449ac94235c5c4b108f5e5e925f03" refkind="member"><highlight class="preprocessor">#define<sp/>NVS_WRITE_ERASE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="_n_v_s_8h_1a5a4d29a7281f1ad484cc8b7ccc30b363" refkind="member"><highlight class="preprocessor">#define<sp/>NVS_WRITE_PRE_VERIFY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="361" refid="_n_v_s_8h_1a04d152372a71d46161f28b4db3163202" refkind="member"><highlight class="preprocessor">#define<sp/>NVS_WRITE_POST_VERIFY<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="_n_v_s_8h_1abaf71a566fbd69fc043956bfc8146153" refkind="member"><highlight class="preprocessor">#define<sp/>NVS_LOCK_WAIT_FOREVER<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(~(0U))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="378" refid="_n_v_s_8h_1ad078d2e244f0c623722b3b9492733e44" refkind="member"><highlight class="preprocessor">#define<sp/>NVS_LOCK_NO_WAIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="394" refid="_n_v_s_8h_1a85b2420d7270c59d423d1733ed1f708a" refkind="member"><highlight class="preprocessor">#define<sp/>NVS_REGION_NOT_ADDRESSABLE<sp/><sp/>((void<sp/>*)(~(0U)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="406" refid="struct_n_v_s___params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_n_v_s___params" kindref="compound">NVS_Params</ref><sp/>{</highlight></codeline>
<codeline lineno="407" refid="struct_n_v_s___params_1a348c8fdf3758e5ea7a65212d0b917687" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_n_v_s___params_1a348c8fdf3758e5ea7a65212d0b917687" kindref="member">custom</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="408"><highlight class="normal">}<sp/><ref refid="_n_v_s_8h_1a00d64340188bed30cc27be46cf8a5aa4" kindref="member">NVS_Params</ref>;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="struct_n_v_s___attrs" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_n_v_s___attrs" kindref="compound">NVS_Attrs</ref><sp/>{</highlight></codeline>
<codeline lineno="418" refid="struct_n_v_s___attrs_1a6c36a2b1c3a5cdfae48ac7665b479aca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>*<ref refid="struct_n_v_s___attrs_1a6c36a2b1c3a5cdfae48ac7665b479aca" kindref="member">regionBase</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="422" refid="struct_n_v_s___attrs_1ad15dd254ec5ce79e82dd3eb3e6e25fe7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><ref refid="struct_n_v_s___attrs_1ad15dd254ec5ce79e82dd3eb3e6e25fe7" kindref="member">regionSize</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="423" refid="struct_n_v_s___attrs_1a8d341bb3f922bae7c50600f301564774" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><ref refid="struct_n_v_s___attrs_1a8d341bb3f922bae7c50600f301564774" kindref="member">sectorSize</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="425"><highlight class="normal">}<sp/><ref refid="_n_v_s_8h_1a28426a848b1ff2a02474ea663856345f" kindref="member">NVS_Attrs</ref>;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="_n_v_s_8h_1abdc600f33c94c8bd706ad42ccdafcf3d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_n_v_s___config__" kindref="compound">NVS_Config_</ref><sp/>*<ref refid="_n_v_s_8h_1abdc600f33c94c8bd706ad42ccdafcf3d" kindref="member">NVS_Handle</ref>;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="436" refid="_n_v_s_8h_1a82f2a5311bf6dc69d62046fe20c3e108" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_n_v_s_8h_1a82f2a5311bf6dc69d62046fe20c3e108" kindref="member">NVS_CloseFxn</ref>)<sp/>(NVS_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="442" refid="_n_v_s_8h_1a80f150226f2b7a76dce36543d2ee635b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_n_v_s_8h_1a80f150226f2b7a76dce36543d2ee635b" kindref="member">NVS_ControlFxn</ref>)<sp/>(NVS_Handle<sp/>handle,<sp/>uint_fast16_t<sp/>cmd,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uintptr_t<sp/>arg);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="449" refid="_n_v_s_8h_1a20498b8b2109828d0a3be43c1db27518" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_n_v_s_8h_1a20498b8b2109828d0a3be43c1db27518" kindref="member">NVS_EraseFxn</ref>)<sp/>(NVS_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="456" refid="_n_v_s_8h_1a68a18a48c3f49ce6d2f30b7e8931859e" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_n_v_s_8h_1a68a18a48c3f49ce6d2f30b7e8931859e" kindref="member">NVS_GetAttrsFxn</ref>)<sp/>(NVS_Handle<sp/>handle,<sp/><ref refid="struct_n_v_s___attrs" kindref="compound">NVS_Attrs</ref><sp/>*attrs);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="462" refid="_n_v_s_8h_1ad9de01b5a2f7cee170c2012e33a60f8a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_n_v_s_8h_1ad9de01b5a2f7cee170c2012e33a60f8a" kindref="member">NVS_InitFxn</ref>)<sp/>(void);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="468" refid="_n_v_s_8h_1ab40d7f4d10399ad5dfe51730d1dd0b9a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_n_v_s_8h_1abdc600f33c94c8bd706ad42ccdafcf3d" kindref="member">NVS_Handle</ref><sp/>(*<ref refid="_n_v_s_8h_1ab40d7f4d10399ad5dfe51730d1dd0b9a" kindref="member">NVS_OpenFxn</ref>)<sp/>(uint_least8_t<sp/>index,<sp/><ref refid="struct_n_v_s___params" kindref="compound">NVS_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="474" refid="_n_v_s_8h_1a4846926325171c03e9b5cce5b16b6ba7" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_n_v_s_8h_1a4846926325171c03e9b5cce5b16b6ba7" kindref="member">NVS_ReadFxn</ref>)<sp/>(NVS_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bufferSize);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="481" refid="_n_v_s_8h_1a70430e07ab4927c8943cdadcd4add4bf" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_n_v_s_8h_1a70430e07ab4927c8943cdadcd4add4bf" kindref="member">NVS_WriteFxn</ref>)<sp/>(NVS_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bufferSize,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_fast16_t<sp/>flags);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="489" refid="_n_v_s_8h_1aa726bab3d4fe81260d3fefbb92e93060" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_n_v_s_8h_1aa726bab3d4fe81260d3fefbb92e93060" kindref="member">NVS_LockFxn</ref>)<sp/>(NVS_Handle<sp/>handle,<sp/>uint32_t<sp/>timeout);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="495" refid="_n_v_s_8h_1a45293f34f71f0a7e7c798917207b2874" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_n_v_s_8h_1a45293f34f71f0a7e7c798917207b2874" kindref="member">NVS_UnlockFxn</ref>)<sp/>(NVS_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="502" refid="struct_n_v_s___fxn_table" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_n_v_s___fxn_table" kindref="compound">NVS_FxnTable</ref><sp/>{</highlight></codeline>
<codeline lineno="504" refid="struct_n_v_s___fxn_table_1ad52c763811aad3bb099f2c92c794d26d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_n_v_s_8h_1a82f2a5311bf6dc69d62046fe20c3e108" kindref="member">NVS_CloseFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_n_v_s___fxn_table_1ad52c763811aad3bb099f2c92c794d26d" kindref="member">closeFxn</ref>;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="507" refid="struct_n_v_s___fxn_table_1a1a5e20488f0b701ea0980bd17228022c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_n_v_s_8h_1a80f150226f2b7a76dce36543d2ee635b" kindref="member">NVS_ControlFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_n_v_s___fxn_table_1a1a5e20488f0b701ea0980bd17228022c" kindref="member">controlFxn</ref>;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="510" refid="struct_n_v_s___fxn_table_1a638a6cf443ca76532ba9b7b564379de2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_n_v_s_8h_1a20498b8b2109828d0a3be43c1db27518" kindref="member">NVS_EraseFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_n_v_s___fxn_table_1a638a6cf443ca76532ba9b7b564379de2" kindref="member">eraseFxn</ref>;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="513" refid="struct_n_v_s___fxn_table_1a7d1f0f2c1dd51aa90cecccd178638531" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_n_v_s_8h_1a68a18a48c3f49ce6d2f30b7e8931859e" kindref="member">NVS_GetAttrsFxn</ref><sp/><sp/><sp/><sp/><sp/><ref refid="struct_n_v_s___fxn_table_1a7d1f0f2c1dd51aa90cecccd178638531" kindref="member">getAttrsFxn</ref>;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="516" refid="struct_n_v_s___fxn_table_1a8e59ff1f3109c7b04194f176df155555" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_n_v_s_8h_1ad9de01b5a2f7cee170c2012e33a60f8a" kindref="member">NVS_InitFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_n_v_s___fxn_table_1a8e59ff1f3109c7b04194f176df155555" kindref="member">initFxn</ref>;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="struct_n_v_s___fxn_table_1a2b5a1e3491a985d786210a26221dd9e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_n_v_s_8h_1aa726bab3d4fe81260d3fefbb92e93060" kindref="member">NVS_LockFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_n_v_s___fxn_table_1a2b5a1e3491a985d786210a26221dd9e7" kindref="member">lockFxn</ref>;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="522" refid="struct_n_v_s___fxn_table_1a41667ec87600c340a861475f916feb1b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_n_v_s_8h_1ab40d7f4d10399ad5dfe51730d1dd0b9a" kindref="member">NVS_OpenFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_n_v_s___fxn_table_1a41667ec87600c340a861475f916feb1b" kindref="member">openFxn</ref>;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="525" refid="struct_n_v_s___fxn_table_1a33828cc4c1c845e5a7f95440e79a4e94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_n_v_s_8h_1a4846926325171c03e9b5cce5b16b6ba7" kindref="member">NVS_ReadFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_n_v_s___fxn_table_1a33828cc4c1c845e5a7f95440e79a4e94" kindref="member">readFxn</ref>;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="528" refid="struct_n_v_s___fxn_table_1afae868b5c2f52df1dcd840f0d4876966" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_n_v_s_8h_1a45293f34f71f0a7e7c798917207b2874" kindref="member">NVS_UnlockFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_n_v_s___fxn_table_1afae868b5c2f52df1dcd840f0d4876966" kindref="member">unlockFxn</ref>;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="531" refid="struct_n_v_s___fxn_table_1a67cbdb1f87bf99c91079da45aa0150a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_n_v_s_8h_1a70430e07ab4927c8943cdadcd4add4bf" kindref="member">NVS_WriteFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_n_v_s___fxn_table_1a67cbdb1f87bf99c91079da45aa0150a3" kindref="member">writeFxn</ref>;</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}<sp/><ref refid="_n_v_s_8h_1a54257fb6f2f9762bcc8bb3d6ce27cde8" kindref="member">NVS_FxnTable</ref>;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="545" refid="struct_n_v_s___config__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_n_v_s___config__" kindref="compound">NVS_Config_</ref><sp/>{</highlight></codeline>
<codeline lineno="547" refid="struct_n_v_s___config___1ade295be230bf42b6140ce89757c92c7b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_n_v_s___fxn_table" kindref="compound">NVS_FxnTable</ref><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_n_v_s___config___1ade295be230bf42b6140ce89757c92c7b" kindref="member">fxnTablePtr</ref>;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="550" refid="struct_n_v_s___config___1a1b7be7029b10ca1babf1afc824494352" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_n_v_s___config___1a1b7be7029b10ca1babf1afc824494352" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="553" refid="struct_n_v_s___config___1acc2f91b7a436df48b14e67e936aaa0a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_n_v_s___config___1acc2f91b7a436df48b14e67e936aaa0a8" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="554"><highlight class="normal">}<sp/><ref refid="_n_v_s_8h_1a5fc4d942abf495e07fba7f3c0a7da83e" kindref="member">NVS_Config</ref>;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_n_v_s_8h_1a12147fcc41f532802d97c0784c3e30c3" kindref="member">NVS_close</ref>(NVS_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_n_v_s_8h_1a79b9b07b5a9d2c35426c15932c6d7c0e" kindref="member">NVS_control</ref>(NVS_Handle<sp/>handle,<sp/>uint_fast16_t<sp/>cmd,<sp/>uintptr_t<sp/>arg);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_n_v_s_8h_1a4f309d160ac4641c89501adc95d170b3" kindref="member">NVS_erase</ref>(NVS_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_n_v_s_8h_1ae2b667cddd9531d7a06bb0f9d8fd890f" kindref="member">NVS_getAttrs</ref>(NVS_Handle<sp/>handle,<sp/><ref refid="struct_n_v_s___attrs" kindref="compound">NVS_Attrs</ref><sp/>*attrs);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_n_v_s_8h_1a94e249f718eba502cdf34d098c83209e" kindref="member">NVS_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_n_v_s_8h_1a62d1593df9acb6d3c6446f1719f3bf28" kindref="member">NVS_lock</ref>(NVS_Handle<sp/>handle,<sp/>uint32_t<sp/>timeout);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>NVS_Handle<sp/><ref refid="_n_v_s_8h_1a15488564c98e00aa62400a54dde3d44e" kindref="member">NVS_open</ref>(uint_least8_t<sp/>index,<sp/><ref refid="struct_n_v_s___params" kindref="compound">NVS_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_n_v_s_8h_1af7562718a6eed5456d423ef7a16c8598" kindref="member">NVS_Params_init</ref>(<ref refid="struct_n_v_s___params" kindref="compound">NVS_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_n_v_s_8h_1a9e058f0724a9c325664f68ecfa2239cb" kindref="member">NVS_read</ref>(NVS_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bufferSize);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_n_v_s_8h_1a01fb843c26ca406c5c9463eae6b0b817" kindref="member">NVS_unlock</ref>(NVS_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_n_v_s_8h_1aae7abe0cb889a6d0cc1858bfc69ab7e0" kindref="member">NVS_write</ref>(NVS_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bufferSize,<sp/>uint_fast16_t<sp/>flags);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined<sp/>(__cplusplus)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_NVS__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_msp432/source/ti/drivers/NVS.h"/>
  </compounddef>
</doxygen>
