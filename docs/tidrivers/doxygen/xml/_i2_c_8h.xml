<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_i2_c_8h" kind="file" language="C++">
    <compoundname>I2C.h</compoundname>
    <includedby refid="_i2_c_m_s_p432_8h" local="no">I2CMSP432.h</includedby>
    <invincdepgraph>
      <node id="107">
        <label>I2C.h</label>
        <link refid="_i2_c_8h"/>
        <childnode refid="108" relation="include">
        </childnode>
      </node>
      <node id="108">
        <label>I2CMSP432.h</label>
        <link refid="_i2_c_m_s_p432_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_i2_c___transaction" prot="public">I2C_Transaction</innerclass>
    <innerclass refid="struct_i2_c___params" prot="public">I2C_Params</innerclass>
    <innerclass refid="struct_i2_c___fxn_table__" prot="public">I2C_FxnTable_</innerclass>
    <innerclass refid="struct_i2_c___config__" prot="public">I2C_Config_</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___i2_c___s_t_a_t_u_s_1gaa0bcf3acd26ac82bd8ff91daba2c78c4" prot="public" static="no">
        <name>I2C_STATUS_SUCCESS</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>Successful status code returned by <ref refid="_i2_c_8h_1a4c74b1b9f8e76ac22bec7608491cb223" kindref="member">I2C_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_i2_c_8h_1a4c74b1b9f8e76ac22bec7608491cb223" kindref="member">I2C_control()</ref> returns <ref refid="group___i2_c___s_t_a_t_u_s_1gaa0bcf3acd26ac82bd8ff91daba2c78c4" kindref="member">I2C_STATUS_SUCCESS</ref> if the control code was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h" line="336" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2C.h" bodystart="336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___s_t_a_t_u_s_1ga7323fe57c39c46d0da9910e17f5f0b06" prot="public" static="no">
        <name>I2C_STATUS_ERROR</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>Generic error status code returned by <ref refid="_i2_c_8h_1a4c74b1b9f8e76ac22bec7608491cb223" kindref="member">I2C_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_i2_c_8h_1a4c74b1b9f8e76ac22bec7608491cb223" kindref="member">I2C_control()</ref> returns <ref refid="group___i2_c___s_t_a_t_u_s_1ga7323fe57c39c46d0da9910e17f5f0b06" kindref="member">I2C_STATUS_ERROR</ref> if the control code was not executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h" line="344" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2C.h" bodystart="344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___s_t_a_t_u_s_1ga11c31c9869ed2441789205d9e5967d66" prot="public" static="no">
        <name>I2C_STATUS_UNDEFINEDCMD</name>
        <initializer>(-2)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_i2_c_8h_1a4c74b1b9f8e76ac22bec7608491cb223" kindref="member">I2C_control()</ref> for undefined command codes. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_i2_c_8h_1a4c74b1b9f8e76ac22bec7608491cb223" kindref="member">I2C_control()</ref> returns <ref refid="group___i2_c___s_t_a_t_u_s_1ga11c31c9869ed2441789205d9e5967d66" kindref="member">I2C_STATUS_UNDEFINEDCMD</ref> if the control code is not recognized by the driver implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h" line="353" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2C.h" bodystart="353" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26" prot="public" static="no">
        <name>I2C_TransferMode</name>
        <enumvalue id="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26abe065350be2a0ae5c9beb24624626c75" prot="public">
          <name>I2C_MODE_BLOCKING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>In <ref refid="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26abe065350be2a0ae5c9beb24624626c75" kindref="member">I2C_MODE_BLOCKING</ref>, calls to <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref> block until the <ref refid="struct_i2_c___transaction" kindref="compound">I2C_Transaction</ref> completes. Other threads calling <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref> while a transaction is in progress are also placed into a blocked state. If multiple threads are blocked, the thread with the highest priority will be unblocked first. This implies that arbitration will not be executed in chronological order.</para><para><simplesect kind="note"><para>When using <ref refid="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26abe065350be2a0ae5c9beb24624626c75" kindref="member">I2C_MODE_BLOCKING</ref>, <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref> must be called from a thread context. </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26a129731a7edeb285f43a54b2cf9f5ac72" prot="public">
          <name>I2C_MODE_CALLBACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>In <ref refid="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26a129731a7edeb285f43a54b2cf9f5ac72" kindref="member">I2C_MODE_CALLBACK</ref>, calls to <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref> return immediately. The application&apos;s callback function, <ref refid="struct_i2_c___params_1a57edf1b900368904779d0c57a73cf047" kindref="member">I2C_Params.transferCallbackFxn</ref>, is called when the transaction is complete. Sequential calls to <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref> will place <ref refid="struct_i2_c___transaction" kindref="compound">I2C_Transaction</ref> structures into an internal queue. Queued transactions are automatically started after the previous transaction has completed. This queuing occurs regardless of any error state from previous transactions. The transactions are always executed in chronological order. The <ref refid="struct_i2_c___params_1a57edf1b900368904779d0c57a73cf047" kindref="member">I2C_Params.transferCallbackFxn</ref> function will be called asynchronously as each transaction is completed. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Return behavior of I2C_Transfer() specified in the <ref refid="struct_i2_c___params" kindref="compound">I2C_Params</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This enumeration defines the return behaviors for a call to <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref>.</para><para><simplesect kind="see"><para><ref refid="struct_i2_c___params" kindref="compound">I2C_Params</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h" line="457" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2C.h" bodystart="457" bodyend="484"/>
      </memberdef>
      <memberdef kind="enum" id="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbe" prot="public" static="no">
        <name>I2C_BitRate</name>
        <enumvalue id="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbea966fd2df13b3a9825615c50335cf1987" prot="public">
          <name>I2C_100kHz</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>I2C Standard-mode. Up to 100 kbit/s. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbea83cc3750242e6ae9194cd7ed94f764d9" prot="public">
          <name>I2C_400kHz</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>I2C Fast-mode. Up to 400 kbit/s. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbea38a2e32ba65eb0f67b928d181242befa" prot="public">
          <name>I2C_1000kHz</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>I2C Fast-mode Plus. Up to 1Mbit/s. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbea37abd9be14a25ed731f14694922ee7d4" prot="public">
          <name>I2C_3330kHz</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>I2C High-speed mode. Up to 3.4Mbit/s. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbea0c1376dab54ab817b76de1513b5707fb" prot="public">
          <name>I2C_3400kHz</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>I2C High-speed mode. Up to 3.4Mbit/s. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Bit rate for an I2C driver instance specified in the <ref refid="struct_i2_c___params" kindref="compound">I2C_Params</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This enumeration defines the bit rates used with an <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref>.</para><para><simplesect kind="note"><para>You must check that the device specific implementation supports the desired <ref refid="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbe" kindref="member">I2C_BitRate</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h" line="518" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2C.h" bodystart="518" bodyend="524"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_i2_c_8h_1a1d8718f847129c7aa61dd1c264d8a13c" prot="public" static="no">
        <type>struct <ref refid="struct_i2_c___config__" kindref="compound">I2C_Config_</ref> *</type>
        <definition>typedef struct I2C_Config_* I2C_Handle</definition>
        <argsstring></argsstring>
        <name>I2C_Handle</name>
        <briefdescription>
<para>A handle that is returned from an <ref refid="_i2_c_8h_1a2db3461e1e956d9b86af414da2fb05f6" kindref="member">I2C_open()</ref> call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h" line="373" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2C.h" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_8h_1adaa5c99b7c23a00bac52d15a2469764e" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* I2C_CallbackFxn) (I2C_Handle handle, I2C_Transaction *transaction, bool transferStatus)</definition>
        <argsstring>)(I2C_Handle handle, I2C_Transaction *transaction, bool transferStatus)</argsstring>
        <name>I2C_CallbackFxn</name>
        <briefdescription>
<para>The definition of a callback function. </para>        </briefdescription>
        <detaileddescription>
<para>When operating in <ref refid="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26a129731a7edeb285f43a54b2cf9f5ac72" kindref="member">I2C_MODE_CALLBACK</ref>, the callback function is called when an <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref> completes. The application is responsible for declaring an <ref refid="_i2_c_8h_1adaa5c99b7c23a00bac52d15a2469764e" kindref="member">I2C_CallbackFxn</ref> function and providing a pointer in <ref refid="struct_i2_c___params_1a57edf1b900368904779d0c57a73cf047" kindref="member">I2C_Params.transferCallbackFxn</ref>.</para><para><simplesect kind="warning"><para>The callback function is called from an interrupt context.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">handle</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="_i2_c_8h_1a1d8718f847129c7aa61dd1c264d8a13c" kindref="member">I2C_Handle</ref> used with the initial call to <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">transaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="struct_i2_c___transaction" kindref="compound">I2C_Transaction</ref> structure used with the initial call to <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref>. This structure also contains the custom argument specified by <computeroutput>transaction.arg</computeroutput>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">transferStatus</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean indicating if the I2C transaction was successful. If <computeroutput>true</computeroutput>, the transaction was successful. If <computeroutput>false</computeroutput>, the transaction failed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h" line="507" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2C.h" bodystart="507" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_8h_1a7a829a2a0fd594c50e93c3e55c7d04aa" prot="private" static="no">
        <type>void(*</type>
        <definition>typedef void(* I2C_CancelFxn) (I2C_Handle handle)</definition>
        <argsstring>)(I2C_Handle handle)</argsstring>
        <name>I2C_CancelFxn</name>
        <briefdescription>
<para>A function pointer to a driver-specific implementation of <ref refid="_i2_c_8h_1a8cad0c04a9eca0fffc0ffe5586a5179b" kindref="member">I2C_cancel()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h" line="559" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2C.h" bodystart="559" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_8h_1a083200108e980a0ef61e458f0b9fb9e7" prot="private" static="no">
        <type>void(*</type>
        <definition>typedef void(* I2C_CloseFxn) (I2C_Handle handle)</definition>
        <argsstring>)(I2C_Handle handle)</argsstring>
        <name>I2C_CloseFxn</name>
        <briefdescription>
<para>A function pointer to a driver-specific implementation of <ref refid="_i2_c_8h_1a12c86d89a687f2ee1eb980d99c32326d" kindref="member">I2C_close()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h" line="566" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2C.h" bodystart="566" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_8h_1a2b3563e0ae9a6ce2be82bdc938ae5218" prot="private" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* I2C_ControlFxn) (I2C_Handle handle, uint_fast16_t cmd, void *controlArg)</definition>
        <argsstring>)(I2C_Handle handle, uint_fast16_t cmd, void *controlArg)</argsstring>
        <name>I2C_ControlFxn</name>
        <briefdescription>
<para>A function pointer to a driver-specific implementation of <ref refid="_i2_c_8h_1a4c74b1b9f8e76ac22bec7608491cb223" kindref="member">I2C_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h" line="573" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2C.h" bodystart="573" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_8h_1adfb2451c8a1ce70402e43e4743c5fedf" prot="private" static="no">
        <type>void(*</type>
        <definition>typedef void(* I2C_InitFxn) (I2C_Handle handle)</definition>
        <argsstring>)(I2C_Handle handle)</argsstring>
        <name>I2C_InitFxn</name>
        <briefdescription>
<para>A function pointer to a driver-specific implementation of <ref refid="_i2_c_8h_1a9ff51ddf1d325776fef90cce0223772b" kindref="member">I2C_init()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h" line="581" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2C.h" bodystart="581" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_8h_1add24fcdaaf1bdef1521ce2489bf1d80e" prot="private" static="no">
        <type><ref refid="_i2_c_8h_1a1d8718f847129c7aa61dd1c264d8a13c" kindref="member">I2C_Handle</ref>(*</type>
        <definition>typedef I2C_Handle(* I2C_OpenFxn) (I2C_Handle handle, I2C_Params *params)</definition>
        <argsstring>)(I2C_Handle handle, I2C_Params *params)</argsstring>
        <name>I2C_OpenFxn</name>
        <briefdescription>
<para>A function pointer to a driver-specific implementation of <ref refid="_i2_c_8h_1a2db3461e1e956d9b86af414da2fb05f6" kindref="member">I2C_open()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h" line="588" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2C.h" bodystart="588" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_8h_1aa785484e689c79262f98208689fecd38" prot="private" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* I2C_TransferFxn) (I2C_Handle handle, I2C_Transaction *transaction)</definition>
        <argsstring>)(I2C_Handle handle, I2C_Transaction *transaction)</argsstring>
        <name>I2C_TransferFxn</name>
        <briefdescription>
<para>A function pointer to a driver-specific implementation of <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h" line="595" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2C.h" bodystart="595" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_8h_1a58fd875c3596b3856b6f1aebbceb3085" prot="public" static="no">
        <type>struct <ref refid="struct_i2_c___fxn_table__" kindref="compound">I2C_FxnTable_</ref></type>
        <definition>typedef struct I2C_FxnTable_  I2C_FxnTable</definition>
        <argsstring></argsstring>
        <name>I2C_FxnTable</name>
        <briefdescription>
<para>The definition of an I2C function table that contains the required set of functions to control a specific I2C driver implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h" line="610" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_8h_1ae43e4c7b224a8cc37764acb792182453" prot="public" static="no">
        <type>struct <ref refid="struct_i2_c___config__" kindref="compound">I2C_Config_</ref></type>
        <definition>typedef struct I2C_Config_  I2C_Config</definition>
        <argsstring></argsstring>
        <name>I2C_Config</name>
        <briefdescription>
<para>I2C driver&apos;s custom <ref refid="index_1driver_configuration" kindref="member">configuration</ref> structure. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="_i2_c_8h_1a9ff51ddf1d325776fef90cce0223772b" kindref="member">I2C_init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_c_8h_1a2db3461e1e956d9b86af414da2fb05f6" kindref="member">I2C_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h" line="630" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_i2_c_8h_1a8cad0c04a9eca0fffc0ffe5586a5179b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_cancel</definition>
        <argsstring>(I2C_Handle handle)</argsstring>
        <name>I2C_cancel</name>
        <param>
          <type><ref refid="_i2_c_8h_1a1d8718f847129c7aa61dd1c264d8a13c" kindref="member">I2C_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Cancels all I2C transfers. </para>        </briefdescription>
        <detaileddescription>
<para>This function will cancel asynchronous <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref> operations, and is applicable only for <ref refid="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26a129731a7edeb285f43a54b2cf9f5ac72" kindref="member">I2C_MODE_CALLBACK</ref> mode. The in progress transfer, as well as any queued transfers, will be canceled. The individual callback functions for each transfer will be called in chronological order. The callback functions are called in the same context as the <ref refid="_i2_c_8h_1a8cad0c04a9eca0fffc0ffe5586a5179b" kindref="member">I2C_cancel()</ref>.</para><para><simplesect kind="pre"><para>I2C_Transfer() has been called.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="_i2_c_8h_1a1d8718f847129c7aa61dd1c264d8a13c" kindref="member">I2C_Handle</ref> returned from <ref refid="_i2_c_8h_1a2db3461e1e956d9b86af414da2fb05f6" kindref="member">I2C_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Different I2C slave devices will behave differently when an in-progress transfer fails and needs to be canceled. The slave may need to be reset, or there may be other slave-specific steps that can be used to successfully resume communication.</para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26a129731a7edeb285f43a54b2cf9f5ac72" kindref="member">I2C_MODE_CALLBACK</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h" line="653" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_c_8h_1a12c86d89a687f2ee1eb980d99c32326d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_close</definition>
        <argsstring>(I2C_Handle handle)</argsstring>
        <name>I2C_close</name>
        <param>
          <type><ref refid="_i2_c_8h_1a1d8718f847129c7aa61dd1c264d8a13c" kindref="member">I2C_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to close an I2C driver instance. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_i2_c_8h_1a2db3461e1e956d9b86af414da2fb05f6" kindref="member">I2C_open()</ref> has been called.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="_i2_c_8h_1a1d8718f847129c7aa61dd1c264d8a13c" kindref="member">I2C_Handle</ref> returned from <ref refid="_i2_c_8h_1a2db3461e1e956d9b86af414da2fb05f6" kindref="member">I2C_open()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h" line="662" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_c_8h_1a4c74b1b9f8e76ac22bec7608491cb223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t I2C_control</definition>
        <argsstring>(I2C_Handle handle, uint_fast16_t cmd, void *controlArg)</argsstring>
        <name>I2C_control</name>
        <param>
          <type><ref refid="_i2_c_8h_1a1d8718f847129c7aa61dd1c264d8a13c" kindref="member">I2C_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint_fast16_t</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>controlArg</declname>
        </param>
        <briefdescription>
<para>Function performs implementation specific features on a driver instance. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_i2_c_8h_1a2db3461e1e956d9b86af414da2fb05f6" kindref="member">I2C_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="_i2_c_8h_1a1d8718f847129c7aa61dd1c264d8a13c" kindref="member">I2C_Handle</ref> returned from <ref refid="_i2_c_8h_1a2db3461e1e956d9b86af414da2fb05f6" kindref="member">I2C_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>A command value defined by the device specific implementation</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">controlArg</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional R/W (read/write) argument that is accompanied with <computeroutput>cmd</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Implementation specific return codes. Negative values indicate unsuccessful operations.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group___i2_c___s_t_a_t_u_s_1gaa0bcf3acd26ac82bd8ff91daba2c78c4" kindref="member">I2C_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The call was successful. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___i2_c___s_t_a_t_u_s_1ga11c31c9869ed2441789205d9e5967d66" kindref="member">I2C_STATUS_UNDEFINEDCMD</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>cmd</computeroutput> value is not supported by the device specific implementation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h" line="685" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_c_8h_1a9ff51ddf1d325776fef90cce0223772b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_init</definition>
        <argsstring>(void)</argsstring>
        <name>I2C_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to initialize the I2C driver. </para>        </briefdescription>
        <detaileddescription>
<para>This function must also be called before any otherI2C driver APIs. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h" line="693" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_c_8h_1a2db3461e1e956d9b86af414da2fb05f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_i2_c_8h_1a1d8718f847129c7aa61dd1c264d8a13c" kindref="member">I2C_Handle</ref></type>
        <definition>I2C_Handle I2C_open</definition>
        <argsstring>(uint_least8_t index, I2C_Params *params)</argsstring>
        <name>I2C_open</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="struct_i2_c___params" kindref="compound">I2C_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Open an I2C driver instance. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_i2_c_8h_1a9ff51ddf1d325776fef90cce0223772b" kindref="member">I2C_init()</ref> has been called.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index in the <computeroutput>I2C_Config</computeroutput>[] array.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an initialized <ref refid="struct_i2_c___params" kindref="compound">I2C_Params</ref> structure. If NULL, the default <ref refid="struct_i2_c___params" kindref="compound">I2C_Params</ref> values are used.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <ref refid="_i2_c_8h_1a1d8718f847129c7aa61dd1c264d8a13c" kindref="member">I2C_Handle</ref> on success, or <computeroutput>NULL</computeroutput> on an error.</para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_c_8h_1a9ff51ddf1d325776fef90cce0223772b" kindref="member">I2C_init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_c_8h_1a12c86d89a687f2ee1eb980d99c32326d" kindref="member">I2C_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h" line="710" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_c_8h_1ab11636302074d67180207ab81ceb323c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_Params_init</definition>
        <argsstring>(I2C_Params *params)</argsstring>
        <name>I2C_Params_init</name>
        <param>
          <type><ref refid="struct_i2_c___params" kindref="compound">I2C_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Initialize an <ref refid="struct_i2_c___params" kindref="compound">I2C_Params</ref> structure to its default values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to <ref refid="struct_i2_c___params" kindref="compound">I2C_Params</ref> structure for initialization.</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults values are: <itemizedlist>
<listitem><para><ref refid="struct_i2_c___params_1a79c5c51380ffbdb21df1dff6cb57de0e" kindref="member">I2C_Params.transferMode</ref> = <ref refid="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26abe065350be2a0ae5c9beb24624626c75" kindref="member">I2C_MODE_BLOCKING</ref> </para></listitem>
<listitem><para><ref refid="struct_i2_c___params_1a57edf1b900368904779d0c57a73cf047" kindref="member">I2C_Params.transferCallbackFxn</ref> = <computeroutput>NULL</computeroutput> </para></listitem>
<listitem><para><ref refid="struct_i2_c___params_1ad31857f6dbedb77c60c92cc8cd8cde0c" kindref="member">I2C_Params.bitRate</ref> = <ref refid="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbea966fd2df13b3a9825615c50335cf1987" kindref="member">I2C_100kHz</ref> </para></listitem>
<listitem><para><ref refid="struct_i2_c___params_1a2416cc06d853e6cc24e1f294dfebb194" kindref="member">I2C_Params.custom</ref> = <computeroutput>NULL</computeroutput> </para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h" line="724" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool I2C_transfer</definition>
        <argsstring>(I2C_Handle handle, I2C_Transaction *transaction)</argsstring>
        <name>I2C_transfer</name>
        <param>
          <type><ref refid="_i2_c_8h_1a1d8718f847129c7aa61dd1c264d8a13c" kindref="member">I2C_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_i2_c___transaction" kindref="compound">I2C_Transaction</ref> *</type>
          <declname>transaction</declname>
        </param>
        <briefdescription>
<para>Perform an I2C transaction with an I2C slave peripheral. </para>        </briefdescription>
        <detaileddescription>
<para>This function will perform an I2C transfer, as specified by an <ref refid="struct_i2_c___transaction" kindref="compound">I2C_Transaction</ref> structure.</para><para><simplesect kind="note"><para>When using <ref refid="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26abe065350be2a0ae5c9beb24624626c75" kindref="member">I2C_MODE_BLOCKING</ref>, this must be called from a thread context.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="_i2_c_8h_1a1d8718f847129c7aa61dd1c264d8a13c" kindref="member">I2C_Handle</ref> returned from <ref refid="_i2_c_8h_1a2db3461e1e956d9b86af414da2fb05f6" kindref="member">I2C_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">transaction</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an <ref refid="struct_i2_c___transaction" kindref="compound">I2C_Transaction</ref>. The application is responsible for allocating and initializing an <ref refid="struct_i2_c___transaction" kindref="compound">I2C_Transaction</ref> structure prior to passing it to I2C_Transfer(). This structure must persist in memory unmodified until the transfer is complete.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><ref refid="struct_i2_c___transaction" kindref="compound">I2C_Transaction</ref> structures cannot be re-used until the previous transaction has completed.</para></simplesect>
<simplesect kind="return"><para>In <ref refid="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26abe065350be2a0ae5c9beb24624626c75" kindref="member">I2C_MODE_BLOCKING</ref>: <computeroutput>true</computeroutput> for a successful transfer; <computeroutput>false</computeroutput> for an error (for example, an I2C bus fault (NACK)).</para></simplesect>
<simplesect kind="return"><para>In <ref refid="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26a129731a7edeb285f43a54b2cf9f5ac72" kindref="member">I2C_MODE_CALLBACK</ref>: always <computeroutput>true</computeroutput>. The <ref refid="_i2_c_8h_1adaa5c99b7c23a00bac52d15a2469764e" kindref="member">I2C_CallbackFxn</ref> <computeroutput>bool</computeroutput> argument will be <computeroutput>true</computeroutput> to indicate success, and <computeroutput>false</computeroutput> to indicate an error.</para></simplesect>
<simplesect kind="pre"><para><ref refid="_i2_c_8h_1a2db3461e1e956d9b86af414da2fb05f6" kindref="member">I2C_open()</ref> has been called.</para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_c_8h_1a2db3461e1e956d9b86af414da2fb05f6" kindref="member">I2C_open()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="struct_i2_c___transaction" kindref="compound">I2C_Transaction</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h" line="757" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Inter-Integrated Circuit (I2C) Driver. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para><anchor id="_i2_c_8h_1ti_drivers_I2C_Overview"/><heading level="1">Overview</heading>
</para><para>The I2C driver is designed to operate as an I2C master and will not function as an I2C slave. Multi-master arbitration is not supported; therefore, this driver assumes it is the only I2C master on the bus. This I2C driver&apos;s API set provides the ability to transmit and receive data over an I2C bus between the I2C master and I2C slave(s). The application is responsible for manipulating and interpreting the data.</para><para><hruler/>
 <anchor id="_i2_c_8h_1ti_drivers_I2C_Usage"/><heading level="1">Usage</heading>
</para><para>This section provides a basic <ref refid="_i2_c_8h_1ti_drivers_I2C_Synopsis" kindref="member">usage summary</ref> and a set of <ref refid="_i2_c_8h_1ti_drivers_I2C_Examples" kindref="member">examples</ref> in the form of commented code fragments. Detailed descriptions of the I2C APIs and their effect are provided in subsequent sections.</para><para><anchor id="_i2_c_8h_1ti_drivers_I2C_Synopsis"/><heading level="2">Synopsis</heading>
</para><para><anchor id="_i2_c_8h_1ti_drivers_I2C_Synopsis_Code"/><programlisting><codeline><highlight class="normal">//<sp/>Import<sp/>I2C<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/I2C.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Define<sp/>name<sp/>for<sp/>an<sp/>index<sp/>of<sp/>an<sp/>I2C<sp/>bus</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>SENSORS<sp/>0</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Define<sp/>the<sp/>slave<sp/>address<sp/>of<sp/>device<sp/>on<sp/>the<sp/>SENSORS<sp/>bus</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OPT_ADDR<sp/>0x47</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>One-time<sp/>init<sp/>of<sp/>I2C<sp/>driver</highlight></codeline>
<codeline><highlight class="normal">I2C_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>initialize<sp/>optional<sp/>I2C<sp/>bus<sp/>parameters</highlight></codeline>
<codeline><highlight class="normal">I2C_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal">I2C_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">params.bitRate<sp/>=<sp/>I2C_400kHz;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Open<sp/>I2C<sp/>bus<sp/>for<sp/>usage</highlight></codeline>
<codeline><highlight class="normal">I2C_Handle<sp/>i2cHandle<sp/>=<sp/>I2C_open(SENSORS,<sp/>&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>slave<sp/>address<sp/>of<sp/>transaction</highlight></codeline>
<codeline><highlight class="normal">I2C_Transaction<sp/>transaction<sp/>=<sp/>{0};</highlight></codeline>
<codeline><highlight class="normal">transaction.slaveAddress<sp/>=<sp/>OPT_ADDR;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Read<sp/>from<sp/>I2C<sp/>slave<sp/>device</highlight></codeline>
<codeline><highlight class="normal">transaction.readBuf<sp/>=<sp/>data;</highlight></codeline>
<codeline><highlight class="normal">transaction.readCount<sp/>=<sp/>sizeof(data);</highlight></codeline>
<codeline><highlight class="normal">transaction.writeCount<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">I2C_transfer(i2cHandle,<sp/>&amp;transaction);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Write<sp/>to<sp/>I2C<sp/>slave<sp/>device</highlight></codeline>
<codeline><highlight class="normal">transaction.writeBuf<sp/>=<sp/>command;</highlight></codeline>
<codeline><highlight class="normal">transaction.writeCount<sp/>=<sp/>sizeof(command);</highlight></codeline>
<codeline><highlight class="normal">transaction.readCount<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">I2C_transfer(i2cHandle,<sp/>&amp;transaction);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Close<sp/>I2C</highlight></codeline>
<codeline><highlight class="normal">I2C_close(i2cHandle);</highlight></codeline>
</programlisting></para><para><anchor id="_i2_c_8h_1ti_drivers_I2C_Examples"/><heading level="2">Examples</heading>
</para><para><itemizedlist>
<listitem><para><ref refid="_i2_c_8h_1ti_drivers_I2C_Example_open" kindref="member">Getting an I2C bus handle</ref> </para></listitem>
<listitem><para><ref refid="_i2_c_8h_1ti_drivers_I2C_Example_write3bytes" kindref="member">Sending 3 bytes</ref> </para></listitem>
<listitem><para><ref refid="_i2_c_8h_1ti_drivers_I2C_Example_read5bytes" kindref="member">Reading 5 bytes</ref> </para></listitem>
<listitem><para><ref refid="_i2_c_8h_1ti_drivers_I2C_Example_writeread" kindref="member">Writing then reading in a single transaction</ref> </para></listitem>
<listitem><para><ref refid="_i2_c_8h_1ti_drivers_I2C_Example_callback" kindref="member">Using Callback mode</ref></para></listitem>
</itemizedlist>
<anchor id="_i2_c_8h_1ti_drivers_I2C_Example_open"/><heading level="2">Opening the I2C Driver</heading>
</para><para>After calling <ref refid="_i2_c_8h_1a9ff51ddf1d325776fef90cce0223772b" kindref="member">I2C_init()</ref>, the application can open an I2C instance by calling <ref refid="_i2_c_8h_1a2db3461e1e956d9b86af414da2fb05f6" kindref="member">I2C_open()</ref>.The following code example opens an I2C instance with default parameters by passing <computeroutput>NULL</computeroutput> for the <ref refid="struct_i2_c___params" kindref="compound">I2C_Params</ref> argument.</para><para><programlisting><codeline><highlight class="normal">I2C_Handle<sp/>i2cHandle;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">i2cHandle<sp/>=<sp/>I2C_open(0,<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(i2cHandle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Error<sp/>opening<sp/>I2C</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(1)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><anchor id="_i2_c_8h_1ti_drivers_I2C_Example_write3bytes"/><heading level="2">Sending three bytes of data.</heading>
</para><para><programlisting><codeline><highlight class="normal">I2C_Transaction<sp/>i2cTransaction<sp/>=<sp/>{0};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>writeBuffer[3];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">writeBuffer[0]<sp/>=<sp/>0xAB;</highlight></codeline>
<codeline><highlight class="normal">writeBuffer[1]<sp/>=<sp/>0xCD;</highlight></codeline>
<codeline><highlight class="normal">writeBuffer[2]<sp/>=<sp/>0xEF;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">i2cTransaction.slaveAddress<sp/>=<sp/>0x50;</highlight></codeline>
<codeline><highlight class="normal">i2cTransaction.writeBuf<sp/>=<sp/>writeBuffer;</highlight></codeline>
<codeline><highlight class="normal">i2cTransaction.writeCount<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal">i2cTransaction.readBuf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">i2cTransaction.readCount<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>=<sp/>I2C_transfer(i2cHandle,<sp/>&amp;i2cTransaction);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(status<sp/>==<sp/>false)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Unsuccessful<sp/>I2C<sp/>transfer</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><anchor id="_i2_c_8h_1ti_drivers_I2C_Example_read5bytes"/><heading level="2">Reading five bytes of data.</heading>
</para><para><programlisting><codeline><highlight class="normal">I2C_Transaction<sp/>i2cTransaction<sp/>=<sp/>{0};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>readBuffer[5];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">i2cTransaction.slaveAddress<sp/>=<sp/>0x50;</highlight></codeline>
<codeline><highlight class="normal">i2cTransaction.writeBuf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">i2cTransaction.writeCount<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">i2cTransaction.readBuf<sp/>=<sp/>readBuffer;</highlight></codeline>
<codeline><highlight class="normal">i2cTransaction.readCount<sp/>=<sp/>5;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>=<sp/>I2C_transfer(i2cHandle,<sp/>&amp;i2cTransaction);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(status<sp/>==<sp/>false)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Unsuccessful<sp/>I2C<sp/>transfer</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><anchor id="_i2_c_8h_1ti_drivers_I2C_Example_writeread"/><heading level="2">Writing two bytes and reading four bytes in a single transaction.</heading>
</para><para><programlisting><codeline><highlight class="normal">I2C_Transaction<sp/>i2cTransaction<sp/>=<sp/>{0};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>readBuffer[4];</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>writeBuffer[2];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">writeBuffer[0]<sp/>=<sp/>0xAB;</highlight></codeline>
<codeline><highlight class="normal">writeBuffer[1]<sp/>=<sp/>0xCD;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">i2cTransaction.slaveAddress<sp/>=<sp/>0x50;</highlight></codeline>
<codeline><highlight class="normal">i2cTransaction.writeBuf<sp/>=<sp/>writeBuffer;</highlight></codeline>
<codeline><highlight class="normal">i2cTransaction.writeCount<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal">i2cTransaction.readBuf<sp/>=<sp/>readBuffer;</highlight></codeline>
<codeline><highlight class="normal">i2cTransaction.readCount<sp/>=<sp/>4;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>=<sp/>I2C_transfer(i2cHandle,<sp/>&amp;i2cTransaction);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(status<sp/>==<sp/>false)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Unsuccessful<sp/>I2C<sp/>transfer</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><anchor id="_i2_c_8h_1ti_drivers_I2C_Example_callback"/><heading level="2">Using callback mode</heading>
</para><para>This final example shows usage of <ref refid="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26a129731a7edeb285f43a54b2cf9f5ac72" kindref="member">I2C_MODE_CALLBACK</ref>, with queuing of multiple transactions. Because multiple transactions are simultaneously queued, separate <ref refid="struct_i2_c___transaction" kindref="compound">I2C_Transaction</ref> structures must be used. Each <ref refid="struct_i2_c___transaction" kindref="compound">I2C_Transaction</ref> will contain a custom application argument of a semaphore handle. The <ref refid="struct_i2_c___transaction_1a29ec65addac2d4ef5d1235c2329e2fc1" kindref="member">I2C_Transaction.arg</ref> will point to the semaphore handle. When the callback function is called, the <ref refid="struct_i2_c___transaction_1a29ec65addac2d4ef5d1235c2329e2fc1" kindref="member">I2C_Transaction.arg</ref> is checked for <computeroutput>NULL</computeroutput>. If this value is not <computeroutput>NULL</computeroutput>, then it can be assumed the <computeroutput>arg</computeroutput> is pointing to a valid semaphore handle. The semaphore handle is then used to call <computeroutput>sem_post()</computeroutput>. Hypothetically, this can be used to signal transaction completion to the task(s) that queued the transaction(s).</para><para><programlisting><codeline><highlight class="normal">void<sp/>callbackFxn(I2C_Handle<sp/>handle,<sp/>I2C_Transaction<sp/>*msg,<sp/>bool<sp/>status)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(status<sp/>==<sp/>false)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//transaction<sp/>failed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>for<sp/>a<sp/>semaphore<sp/>handle</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(msg-&gt;arg<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Perform<sp/>a<sp/>semaphore<sp/>post</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sem_post((sem_t<sp/>*)<sp/>(msg-&gt;arg));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Snippets of the thread code that initiates the transactions are shown below. Note the use of multiple <ref refid="struct_i2_c___transaction" kindref="compound">I2C_Transaction</ref> structures. The handle of the semaphore to be posted is specified via <computeroutput>i2cTransaction2.arg</computeroutput>. <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref> is called three times to initiate each transaction. Since callback mode is used, these functions return immediately. After the transactions have been queued, other work can be done. Eventually, <computeroutput>sem_wait()</computeroutput> is called causing the thread to block until the transaction completes. When the transaction completes, the application&apos;s callback function, <computeroutput>callbackFxn</computeroutput> will be called. Once <ref refid="_i2_c_8h_1adaa5c99b7c23a00bac52d15a2469764e" kindref="member">I2C_CallbackFxn</ref> posts the semaphore, the thread will be unblocked and can resume execution.</para><para><programlisting><codeline><highlight class="normal">void<sp/>thread(arg0,<sp/>arg1)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_Transaction<sp/>i2cTransaction0<sp/>=<sp/>{0};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_Transaction<sp/>i2cTransaction1<sp/>=<sp/>{0};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_Transaction<sp/>i2cTransaction2<sp/>=<sp/>{0};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2cTransaction0.arg<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2cTransaction1.arg<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2cTransaction2.arg<sp/>=<sp/>semaphoreHandle;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_transfer(i2c,<sp/>&amp;i2cTransaction0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_transfer(i2c,<sp/>&amp;i2cTransaction1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_transfer(i2c,<sp/>&amp;i2cTransaction2);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sem_wait(semaphoreHandle);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><hruler/>
 <anchor id="_i2_c_8h_1ti_drivers_I2C_Configuration"/><heading level="1">Configuration</heading>
</para><para>Refer to the <ref refid="index_1driver_configuration" kindref="member">Driver&apos;s Configuration</ref> section for driver configuration information. <hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2019,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*!****************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>Inter-Integrated<sp/>Circuit<sp/>(I2C)<sp/>Driver</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2C_Overview</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Overview</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>I2C<sp/>driver<sp/>is<sp/>designed<sp/>to<sp/>operate<sp/>as<sp/>an<sp/>I2C<sp/>master<sp/>and<sp/>will<sp/>not</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/>function<sp/>as<sp/>an<sp/>I2C<sp/>slave.<sp/>Multi-master<sp/>arbitration<sp/>is<sp/>not<sp/>supported;</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/>therefore,<sp/>this<sp/>driver<sp/>assumes<sp/>it<sp/>is<sp/>the<sp/>only<sp/>I2C<sp/>master<sp/>on<sp/>the<sp/>bus.</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>I2C<sp/>driver&apos;s<sp/>API<sp/>set<sp/>provides<sp/>the<sp/>ability<sp/>to<sp/>transmit<sp/>and<sp/>receive</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/>data<sp/>over<sp/>an<sp/>I2C<sp/>bus<sp/>between<sp/>the<sp/>I2C<sp/>master<sp/>and<sp/>I2C<sp/>slave(s).<sp/>The</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/>application<sp/>is<sp/>responsible<sp/>for<sp/>manipulating<sp/>and<sp/>interpreting<sp/>the<sp/>data.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2C_Usage</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Usage</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>section<sp/>provides<sp/>a<sp/>basic<sp/>@ref<sp/>ti_drivers_I2C_Synopsis</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/>&quot;usage<sp/>summary&quot;<sp/>and<sp/>a<sp/>set<sp/>of<sp/>@ref<sp/>ti_drivers_I2C_Examples<sp/>&quot;examples&quot;</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/>in<sp/>the<sp/>form<sp/>of<sp/>commented<sp/>code<sp/>fragments.<sp/>Detailed<sp/>descriptions<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/>I2C<sp/>APIs<sp/>and<sp/>their<sp/>effect<sp/>are<sp/>provided<sp/>in<sp/>subsequent<sp/>sections.</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2C_Synopsis</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Synopsis<sp/>#</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2C_Synopsis_Code</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Import<sp/>I2C<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/I2C.h&gt;</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Define<sp/>name<sp/>for<sp/>an<sp/>index<sp/>of<sp/>an<sp/>I2C<sp/>bus</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/>#define<sp/>SENSORS<sp/>0</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Define<sp/>the<sp/>slave<sp/>address<sp/>of<sp/>device<sp/>on<sp/>the<sp/>SENSORS<sp/>bus</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/>#define<sp/>OPT_ADDR<sp/>0x47</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>One-time<sp/>init<sp/>of<sp/>I2C<sp/>driver</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/>I2C_init();</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>initialize<sp/>optional<sp/>I2C<sp/>bus<sp/>parameters</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/><sp/>I2C_Params<sp/>params;</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/>I2C_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/>params.bitRate<sp/>=<sp/>I2C_400kHz;</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Open<sp/>I2C<sp/>bus<sp/>for<sp/>usage</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/><sp/>I2C_Handle<sp/>i2cHandle<sp/>=<sp/>I2C_open(SENSORS,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Initialize<sp/>slave<sp/>address<sp/>of<sp/>transaction</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/>I2C_Transaction<sp/>transaction<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/>transaction.slaveAddress<sp/>=<sp/>OPT_ADDR;</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Read<sp/>from<sp/>I2C<sp/>slave<sp/>device</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/>transaction.readBuf<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/>transaction.readCount<sp/>=<sp/>sizeof(data);</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/>transaction.writeCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/>I2C_transfer(i2cHandle,<sp/>&amp;transaction);</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Write<sp/>to<sp/>I2C<sp/>slave<sp/>device</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/>transaction.writeBuf<sp/>=<sp/>command;</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/>transaction.writeCount<sp/>=<sp/>sizeof(command);</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/>transaction.readCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/>I2C_transfer(i2cHandle,<sp/>&amp;transaction);</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Close<sp/>I2C</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/>I2C_close(i2cHandle);</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2C_Examples</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Examples</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>@ref<sp/>ti_drivers_I2C_Example_open<sp/>&quot;Getting<sp/>an<sp/>I2C<sp/>bus<sp/>handle&quot;</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>@ref<sp/>ti_drivers_I2C_Example_write3bytes<sp/>&quot;Sending<sp/>3<sp/>bytes&quot;</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>@ref<sp/>ti_drivers_I2C_Example_read5bytes<sp/>&quot;Reading<sp/>5<sp/>bytes&quot;</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>@ref<sp/>ti_drivers_I2C_Example_writeread<sp/>&quot;Writing<sp/>then<sp/>reading<sp/>in<sp/>a<sp/>single<sp/>transaction&quot;</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>@ref<sp/>ti_drivers_I2C_Example_callback<sp/>&quot;Using<sp/>Callback<sp/>mode&quot;</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2C_Example_open</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Opening<sp/>the<sp/>I2C<sp/>Driver</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/><sp/>After<sp/>calling<sp/>I2C_init(),<sp/>the<sp/>application<sp/>can<sp/>open<sp/>an<sp/>I2C<sp/>instance<sp/>by</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/><sp/>calling<sp/>I2C_open().The<sp/>following<sp/>code<sp/>example<sp/>opens<sp/>an<sp/>I2C<sp/>instance<sp/>with</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/><sp/>default<sp/>parameters<sp/>by<sp/>passing<sp/>@p<sp/>NULL<sp/>for<sp/>the<sp/>#I2C_Params<sp/>argument.</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/><sp/>I2C_Handle<sp/>i2cHandle;</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/><sp/>i2cHandle<sp/>=<sp/>I2C_open(0,<sp/>NULL);</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(i2cHandle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Error<sp/>opening<sp/>I2C</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(1)<sp/>{}</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2C_Example_write3bytes</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Sending<sp/>three<sp/>bytes<sp/>of<sp/>data.</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/><sp/>I2C_Transaction<sp/>i2cTransaction<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>writeBuffer[3];</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/><sp/>writeBuffer[0]<sp/>=<sp/>0xAB;</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/><sp/>writeBuffer[1]<sp/>=<sp/>0xCD;</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/><sp/>writeBuffer[2]<sp/>=<sp/>0xEF;</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/><sp/>i2cTransaction.slaveAddress<sp/>=<sp/>0x50;</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/><sp/>i2cTransaction.writeBuf<sp/>=<sp/>writeBuffer;</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/><sp/>i2cTransaction.writeCount<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/><sp/>i2cTransaction.readBuf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/><sp/>i2cTransaction.readCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/><sp/>status<sp/>=<sp/>I2C_transfer(i2cHandle,<sp/>&amp;i2cTransaction);</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(status<sp/>==<sp/>false)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Unsuccessful<sp/>I2C<sp/>transfer</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2C_Example_read5bytes</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Reading<sp/>five<sp/>bytes<sp/>of<sp/>data.</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/><sp/>I2C_Transaction<sp/>i2cTransaction<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>readBuffer[5];</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/><sp/>i2cTransaction.slaveAddress<sp/>=<sp/>0x50;</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/><sp/>i2cTransaction.writeBuf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/><sp/>i2cTransaction.writeCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/><sp/>i2cTransaction.readBuf<sp/>=<sp/>readBuffer;</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/><sp/>i2cTransaction.readCount<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/><sp/>status<sp/>=<sp/>I2C_transfer(i2cHandle,<sp/>&amp;i2cTransaction);</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(status<sp/>==<sp/>false)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Unsuccessful<sp/>I2C<sp/>transfer</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2C_Example_writeread</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Writing<sp/>two<sp/>bytes<sp/>and<sp/>reading<sp/>four<sp/>bytes<sp/>in<sp/>a<sp/>single<sp/>transaction.</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/><sp/>I2C_Transaction<sp/>i2cTransaction<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>readBuffer[4];</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>writeBuffer[2];</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/><sp/>writeBuffer[0]<sp/>=<sp/>0xAB;</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/><sp/>writeBuffer[1]<sp/>=<sp/>0xCD;</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/><sp/>i2cTransaction.slaveAddress<sp/>=<sp/>0x50;</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/><sp/>i2cTransaction.writeBuf<sp/>=<sp/>writeBuffer;</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/><sp/>i2cTransaction.writeCount<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/><sp/>i2cTransaction.readBuf<sp/>=<sp/>readBuffer;</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/><sp/>i2cTransaction.readCount<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/><sp/>status<sp/>=<sp/>I2C_transfer(i2cHandle,<sp/>&amp;i2cTransaction);</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(status<sp/>==<sp/>false)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Unsuccessful<sp/>I2C<sp/>transfer</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2C_Example_callback</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Using<sp/>callback<sp/>mode</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>final<sp/>example<sp/>shows<sp/>usage<sp/>of<sp/>#I2C_MODE_CALLBACK,<sp/>with<sp/>queuing</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/><sp/>of<sp/>multiple<sp/>transactions.<sp/>Because<sp/>multiple<sp/>transactions<sp/>are<sp/>simultaneously</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/><sp/>queued,<sp/>separate<sp/>#I2C_Transaction<sp/>structures<sp/>must<sp/>be<sp/>used.<sp/>Each</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/><sp/>#I2C_Transaction<sp/>will<sp/>contain<sp/>a<sp/>custom<sp/>application<sp/>argument<sp/>of<sp/>a</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/><sp/>semaphore<sp/>handle.<sp/>The<sp/>#I2C_Transaction.arg<sp/>will<sp/>point<sp/>to<sp/>the<sp/>semaphore</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/><sp/>handle.<sp/>When<sp/>the<sp/>callback<sp/>function<sp/>is<sp/>called,<sp/>the<sp/>#I2C_Transaction.arg<sp/>is</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/><sp/>checked<sp/>for<sp/>@p<sp/>NULL.<sp/>If<sp/>this<sp/>value<sp/>is<sp/>not<sp/>@p<sp/>NULL,<sp/>then<sp/>it<sp/>can<sp/>be<sp/>assumed</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>@p<sp/>arg<sp/>is<sp/>pointing<sp/>to<sp/>a<sp/>valid<sp/>semaphore<sp/>handle.<sp/>The<sp/>semaphore<sp/>handle</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/><sp/>is<sp/>then<sp/>used<sp/>to<sp/>call<sp/>@p<sp/>sem_post().<sp/>Hypothetically,<sp/>this<sp/>can<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/><sp/>signal<sp/>transaction<sp/>completion<sp/>to<sp/>the<sp/>task(s)<sp/>that<sp/>queued<sp/>the</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/><sp/>transaction(s).</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/><sp/>void<sp/>callbackFxn(I2C_Handle<sp/>handle,<sp/>I2C_Transaction<sp/>*msg,<sp/>bool<sp/>status)</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(status<sp/>==<sp/>false)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//transaction<sp/>failed</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>for<sp/>a<sp/>semaphore<sp/>handle</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(msg-&gt;arg<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Perform<sp/>a<sp/>semaphore<sp/>post</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sem_post((sem_t<sp/>*)<sp/>(msg-&gt;arg));</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/><sp/>Snippets<sp/>of<sp/>the<sp/>thread<sp/>code<sp/>that<sp/>initiates<sp/>the<sp/>transactions<sp/>are<sp/>shown<sp/>below.</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/><sp/>Note<sp/>the<sp/>use<sp/>of<sp/>multiple<sp/>#I2C_Transaction<sp/>structures.<sp/>The<sp/>handle<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/><sp/>semaphore<sp/>to<sp/>be<sp/>posted<sp/>is<sp/>specified<sp/>via<sp/>@p<sp/>i2cTransaction2.arg.</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/><sp/>I2C_transfer()<sp/>is<sp/>called<sp/>three<sp/>times<sp/>to<sp/>initiate<sp/>each<sp/>transaction.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/><sp/>Since<sp/>callback<sp/>mode<sp/>is<sp/>used,<sp/>these<sp/>functions<sp/>return<sp/>immediately.<sp/>After</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>transactions<sp/>have<sp/>been<sp/>queued,<sp/>other<sp/>work<sp/>can<sp/>be<sp/>done.<sp/>Eventually,</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/><sp/>@p<sp/>sem_wait()<sp/>is<sp/>called<sp/>causing<sp/>the<sp/>thread<sp/>to<sp/>block<sp/>until<sp/>the<sp/>transaction</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/><sp/>completes.<sp/>When<sp/>the<sp/>transaction<sp/>completes,<sp/>the<sp/>application&apos;s<sp/>callback</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/><sp/>function,<sp/>@p<sp/>callbackFxn<sp/>will<sp/>be<sp/>called.<sp/>Once<sp/>#I2C_CallbackFxn<sp/>posts<sp/>the</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/><sp/>semaphore,<sp/>the<sp/>thread<sp/>will<sp/>be<sp/>unblocked<sp/>and<sp/>can<sp/>resume<sp/>execution.</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/><sp/>void<sp/>thread(arg0,<sp/>arg1)</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2C_Transaction<sp/>i2cTransaction0<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2C_Transaction<sp/>i2cTransaction1<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2C_Transaction<sp/>i2cTransaction2<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2cTransaction0.arg<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2cTransaction1.arg<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2cTransaction2.arg<sp/>=<sp/>semaphoreHandle;</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2C_transfer(i2c,<sp/>&amp;i2cTransaction0);</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2C_transfer(i2c,<sp/>&amp;i2cTransaction1);</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2C_transfer(i2c,<sp/>&amp;i2cTransaction2);</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>sem_wait(semaphoreHandle);</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2C_Configuration</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Configuration</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/><sp/>Refer<sp/>to<sp/>the<sp/>@ref<sp/>driver_configuration<sp/>&quot;Driver&apos;s<sp/>Configuration&quot;<sp/>section</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/><sp/>for<sp/>driver<sp/>configuration<sp/>information.</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>******************************************************************************</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_I2C__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_I2C__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight></codeline>
<codeline lineno="282"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="preprocessor">#define<sp/>I2C_CMD_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="preprocessor">#define<sp/>I2C_STATUS_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="336" refid="group___i2_c___s_t_a_t_u_s_1gaa0bcf3acd26ac82bd8ff91daba2c78c4" refkind="member"><highlight class="preprocessor">#define<sp/>I2C_STATUS_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="344" refid="group___i2_c___s_t_a_t_u_s_1ga7323fe57c39c46d0da9910e17f5f0b06" refkind="member"><highlight class="preprocessor">#define<sp/>I2C_STATUS_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="353" refid="group___i2_c___s_t_a_t_u_s_1ga11c31c9869ed2441789205d9e5967d66" refkind="member"><highlight class="preprocessor">#define<sp/>I2C_STATUS_UNDEFINEDCMD<sp/><sp/><sp/><sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="comment">/*<sp/>Add<sp/>I2C_CMD_&lt;commands&gt;<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="_i2_c_8h_1a1d8718f847129c7aa61dd1c264d8a13c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_i2_c___config__" kindref="compound">I2C_Config_</ref><sp/>*<ref refid="_i2_c_8h_1a1d8718f847129c7aa61dd1c264d8a13c" kindref="member">I2C_Handle</ref>;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="380" refid="struct_i2_c___transaction" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="385" refid="struct_i2_c___transaction_1aa3490c2af4b443a7a4ec13f57aec6d20" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_i2_c___transaction_1aa3490c2af4b443a7a4ec13f57aec6d20" kindref="member">writeBuf</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="401" refid="struct_i2_c___transaction_1a08959a9f098163d02d6002e73b3a4606" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_c___transaction_1a08959a9f098163d02d6002e73b3a4606" kindref="member">writeCount</ref>;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="407" refid="struct_i2_c___transaction_1a804b918d5cb08bb75a39866d0b89e01e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_i2_c___transaction_1a804b918d5cb08bb75a39866d0b89e01e" kindref="member">readBuf</ref>;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="421" refid="struct_i2_c___transaction_1a2085d4c943f0d8617365b7c427e6a0de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_c___transaction_1a2085d4c943f0d8617365b7c427e6a0de" kindref="member">readCount</ref>;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="struct_i2_c___transaction_1a2e5c027c6f243f7169305f86bb2ab6e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint_least8_t<sp/><ref refid="struct_i2_c___transaction_1a2e5c027c6f243f7169305f86bb2ab6e0" kindref="member">slaveAddress</ref>;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="441" refid="struct_i2_c___transaction_1a29ec65addac2d4ef5d1235c2329e2fc1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_i2_c___transaction_1a29ec65addac2d4ef5d1235c2329e2fc1" kindref="member">arg</ref>;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*nextPtr;</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}<sp/><ref refid="struct_i2_c___transaction" kindref="compound">I2C_Transaction</ref>;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="457" refid="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="469" refid="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26abe065350be2a0ae5c9beb24624626c75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26abe065350be2a0ae5c9beb24624626c75" kindref="member">I2C_MODE_BLOCKING</ref>,</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="483" refid="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26a129731a7edeb285f43a54b2cf9f5ac72" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26a129731a7edeb285f43a54b2cf9f5ac72" kindref="member">I2C_MODE_CALLBACK</ref></highlight></codeline>
<codeline lineno="484"><highlight class="normal">}<sp/><ref refid="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26" kindref="member">I2C_TransferMode</ref>;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="507" refid="_i2_c_8h_1adaa5c99b7c23a00bac52d15a2469764e" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_i2_c_8h_1adaa5c99b7c23a00bac52d15a2469764e" kindref="member">I2C_CallbackFxn</ref>)(I2C_Handle<sp/>handle,<sp/><ref refid="struct_i2_c___transaction" kindref="compound">I2C_Transaction</ref><sp/>*transaction,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>transferStatus);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="518" refid="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbe" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="519" refid="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbea966fd2df13b3a9825615c50335cf1987" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbea966fd2df13b3a9825615c50335cf1987" kindref="member">I2C_100kHz</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="520" refid="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbea83cc3750242e6ae9194cd7ed94f764d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbea83cc3750242e6ae9194cd7ed94f764d9" kindref="member">I2C_400kHz</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>1,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="521" refid="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbea38a2e32ba65eb0f67b928d181242befa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbea38a2e32ba65eb0f67b928d181242befa" kindref="member">I2C_1000kHz</ref><sp/><sp/><sp/><sp/>=<sp/>2,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="522" refid="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbea37abd9be14a25ed731f14694922ee7d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbea37abd9be14a25ed731f14694922ee7d4" kindref="member">I2C_3330kHz</ref><sp/><sp/><sp/><sp/>=<sp/>3,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="523" refid="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbea0c1376dab54ab817b76de1513b5707fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbea0c1376dab54ab817b76de1513b5707fb" kindref="member">I2C_3400kHz</ref><sp/><sp/><sp/><sp/>=<sp/>3,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="524"><highlight class="normal">}<sp/><ref refid="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbe" kindref="member">I2C_BitRate</ref>;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="534" refid="struct_i2_c___params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="536" refid="struct_i2_c___params_1a79c5c51380ffbdb21df1dff6cb57de0e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_TransferMode<sp/><ref refid="struct_i2_c___params_1a79c5c51380ffbdb21df1dff6cb57de0e" kindref="member">transferMode</ref>;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="542" refid="struct_i2_c___params_1a57edf1b900368904779d0c57a73cf047" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_8h_1adaa5c99b7c23a00bac52d15a2469764e" kindref="member">I2C_CallbackFxn</ref><sp/><ref refid="struct_i2_c___params_1a57edf1b900368904779d0c57a73cf047" kindref="member">transferCallbackFxn</ref>;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="548" refid="struct_i2_c___params_1ad31857f6dbedb77c60c92cc8cd8cde0c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbe" kindref="member">I2C_BitRate</ref><sp/><ref refid="struct_i2_c___params_1ad31857f6dbedb77c60c92cc8cd8cde0c" kindref="member">bitRate</ref>;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="551" refid="struct_i2_c___params_1a2416cc06d853e6cc24e1f294dfebb194" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_i2_c___params_1a2416cc06d853e6cc24e1f294dfebb194" kindref="member">custom</ref>;</highlight></codeline>
<codeline lineno="552"><highlight class="normal">}<sp/><ref refid="struct_i2_c___params" kindref="compound">I2C_Params</ref>;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*I2C_CancelFxn)<sp/>(I2C_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*I2C_CloseFxn)<sp/>(I2C_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*I2C_ControlFxn)<sp/>(I2C_Handle<sp/>handle,<sp/>uint_fast16_t<sp/>cmd,</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*controlArg);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*I2C_InitFxn)<sp/>(I2C_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_i2_c_8h_1a1d8718f847129c7aa61dd1c264d8a13c" kindref="member">I2C_Handle</ref><sp/>(*I2C_OpenFxn)<sp/>(I2C_Handle<sp/>handle,<sp/><ref refid="struct_i2_c___params" kindref="compound">I2C_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(*I2C_TransferFxn)<sp/>(I2C_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_i2_c___transaction" kindref="compound">I2C_Transaction</ref><sp/>*transaction);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="603" refid="struct_i2_c___fxn_table__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_i2_c___fxn_table__" kindref="compound">I2C_FxnTable_</ref><sp/>{</highlight></codeline>
<codeline lineno="604" refid="struct_i2_c___fxn_table___1a8cadbe830929fa9a54461448e471d359" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_CancelFxn<sp/><sp/><sp/>cancelFxn;</highlight></codeline>
<codeline lineno="605" refid="struct_i2_c___fxn_table___1af53a791f92401f932164b46c4f36c64b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_CloseFxn<sp/><sp/><sp/><sp/>closeFxn;</highlight></codeline>
<codeline lineno="606" refid="struct_i2_c___fxn_table___1a64329bef0f93df5f00ab40ebbff55781" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_ControlFxn<sp/><sp/>controlFxn;</highlight></codeline>
<codeline lineno="607" refid="struct_i2_c___fxn_table___1a1cf1cb27dbc1b6df32f4539fa673ff47" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_InitFxn<sp/><sp/><sp/><sp/><sp/>initFxn;</highlight></codeline>
<codeline lineno="608" refid="struct_i2_c___fxn_table___1a729b2903401dbfe7b39dd57e21a113bd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_OpenFxn<sp/><sp/><sp/><sp/><sp/>openFxn;</highlight></codeline>
<codeline lineno="609" refid="struct_i2_c___fxn_table___1acbc284ea2ca7877265e72167f716f3c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_TransferFxn<sp/>transferFxn;</highlight></codeline>
<codeline lineno="610"><highlight class="normal">}<sp/><ref refid="_i2_c_8h_1a58fd875c3596b3856b6f1aebbceb3085" kindref="member">I2C_FxnTable</ref>;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="619" refid="struct_i2_c___config__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_i2_c___config__" kindref="compound">I2C_Config_</ref><sp/>{</highlight></codeline>
<codeline lineno="622" refid="struct_i2_c___config___1a635dcef77b14e153ffb35e270cd46886" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_i2_c___fxn_table__" kindref="compound">I2C_FxnTable</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_i2_c___config___1a635dcef77b14e153ffb35e270cd46886" kindref="member">fxnTablePtr</ref>;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="625" refid="struct_i2_c___config___1a8bdac95426bbb6b46559fab1e81898ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_i2_c___config___1a8bdac95426bbb6b46559fab1e81898ba" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="629" refid="struct_i2_c___config___1af4722d351fb7137a34166e047a4f96bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_i2_c___config___1af4722d351fb7137a34166e047a4f96bc" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="630"><highlight class="normal">}<sp/><ref refid="_i2_c_8h_1ae43e4c7b224a8cc37764acb792182453" kindref="member">I2C_Config</ref>;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_i2_c_8h_1a8cad0c04a9eca0fffc0ffe5586a5179b" kindref="member">I2C_cancel</ref>(I2C_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_i2_c_8h_1a12c86d89a687f2ee1eb980d99c32326d" kindref="member">I2C_close</ref>(I2C_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_i2_c_8h_1a4c74b1b9f8e76ac22bec7608491cb223" kindref="member">I2C_control</ref>(I2C_Handle<sp/>handle,<sp/>uint_fast16_t<sp/>cmd,</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*controlArg);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_i2_c_8h_1a9ff51ddf1d325776fef90cce0223772b" kindref="member">I2C_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>I2C_Handle<sp/><ref refid="_i2_c_8h_1a2db3461e1e956d9b86af414da2fb05f6" kindref="member">I2C_open</ref>(uint_least8_t<sp/>index,<sp/><ref refid="struct_i2_c___params" kindref="compound">I2C_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_i2_c_8h_1ab11636302074d67180207ab81ceb323c" kindref="member">I2C_Params_init</ref>(<ref refid="struct_i2_c___params" kindref="compound">I2C_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer</ref>(I2C_Handle<sp/>handle,<sp/><ref refid="struct_i2_c___transaction" kindref="compound">I2C_Transaction</ref><sp/>*transaction);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_I2C__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_msp432/source/ti/drivers/I2C.h"/>
  </compounddef>
</doxygen>
