<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_a_d_c_8h" kind="file" language="C++">
    <compoundname>ADC.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdint.h</includes>
    <includedby refid="_a_d_c_m_s_p432_8h" local="no">ADCMSP432.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="0">
        <label>ADC.h</label>
        <link refid="_a_d_c_8h"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>ADC.h</label>
        <link refid="_a_d_c_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ADCMSP432.h</label>
        <link refid="_a_d_c_m_s_p432_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_a_d_c___params" prot="public">ADC_Params</innerclass>
    <innerclass refid="struct_a_d_c___fxn_table" prot="public">ADC_FxnTable</innerclass>
    <innerclass refid="struct_a_d_c___config" prot="public">ADC_Config</innerclass>
      <sectiondef kind="user-defined">
      <memberdef kind="define" id="group___a_d_c___c_o_n_t_r_o_l_1gaee02c8883a7e443d36ea47f9696730ec" prot="public" static="no">
        <name>ADC_STATUS_SUCCESS</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>Successful status code returned by <ref refid="_a_d_c_8h_1af4be7e5e4f5cc931f4501a542d689c32" kindref="member">ADC_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_a_d_c_8h_1af4be7e5e4f5cc931f4501a542d689c32" kindref="member">ADC_control()</ref> returns ADC_STATUS_SUCCESS if the control code was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="211" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___c_o_n_t_r_o_l_1ga33ce323c3bbdc8a3f4e018f99a92b09d" prot="public" static="no">
        <name>ADC_STATUS_ERROR</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>Generic error status code returned by <ref refid="_a_d_c_8h_1af4be7e5e4f5cc931f4501a542d689c32" kindref="member">ADC_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_a_d_c_8h_1af4be7e5e4f5cc931f4501a542d689c32" kindref="member">ADC_control()</ref> returns ADC_STATUS_ERROR if the control code was not executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="219" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___c_o_n_t_r_o_l_1ga704a8cd95bdee94b0f61f06566062e8c" prot="public" static="no">
        <name>ADC_STATUS_UNDEFINEDCMD</name>
        <initializer>(-2)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_a_d_c_8h_1af4be7e5e4f5cc931f4501a542d689c32" kindref="member">ADC_control()</ref> for undefined command codes. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_a_d_c_8h_1af4be7e5e4f5cc931f4501a542d689c32" kindref="member">ADC_control()</ref> returns ADC_STATUS_UNDEFINEDCMD if the control code is not recognized by the driver implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="228" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="_a_d_c_8h_1ab9f0fda9cf7e26636cee5817789f0030" prot="public" static="no">
        <name>ADC_convertRawToMicroVolts</name>
        <initializer><ref refid="_a_d_c_8h_1aa1cd6feaa85ea5409dbe1769586bff20" kindref="member">ADC_convertToMicroVolts</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para><ref refid="_a_d_c_8h_1ab9f0fda9cf7e26636cee5817789f0030" kindref="member">ADC_convertRawToMicroVolts()</ref> is succeeded by <ref refid="_a_d_c_8h_1aa1cd6feaa85ea5409dbe1769586bff20" kindref="member">ADC_convertToMicroVolts()</ref>. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="166" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___c_o_n_t_r_o_l_1ga1850e2c1e2791103d1102917d1e5b01b" prot="public" static="no">
        <name>ADC_CMD_RESERVED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common ADC_control command code reservation offset. ADC driver implementations should offset command codes with ADC_CMD_RESERVED growing positively</para><para>Example implementation specific command codes: <programlisting><codeline><highlight class="normal">#define<sp/>ADCXYZ_CMD_COMMAND0<sp/><sp/><sp/><sp/><sp/><sp/>ADC_CMD_RESERVED<sp/>+<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADCXYZ_CMD_COMMAND1<sp/><sp/><sp/><sp/><sp/><sp/>ADC_CMD_RESERVED<sp/>+<sp/>1</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="186" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___c_o_n_t_r_o_l_1ga5a8bd7786df22349b1a5434f48b08581" prot="public" static="no">
        <name>ADC_STATUS_RESERVED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common ADC_control status code reservation offset. ADC driver implementations should offset status codes with ADC_STATUS_RESERVED growing negatively.</para><para>Example implementation specific status codes: <programlisting><codeline><highlight class="normal">#define<sp/>ADCXYZ_STATUS_ERROR0<sp/><sp/><sp/><sp/><sp/>ADC_STATUS_RESERVED<sp/>-<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADCXYZ_STATUS_ERROR1<sp/><sp/><sp/><sp/><sp/>ADC_STATUS_RESERVED<sp/>-<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADCXYZ_STATUS_ERROR2<sp/><sp/><sp/><sp/><sp/>ADC_STATUS_RESERVED<sp/>-<sp/>2</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="201" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_a_d_c_8h_1ac98b1222559c172df43505d672e1376c" prot="public" static="no">
        <type>struct <ref refid="struct_a_d_c___config" kindref="compound">ADC_Config</ref> *</type>
        <definition>typedef struct ADC_Config* ADC_Handle</definition>
        <argsstring></argsstring>
        <name>ADC_Handle</name>
        <briefdescription>
<para>A handle that is returned from an <ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref> call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="248" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_8h_1a42f6ff234d06fb71647510e04be8a3bf" prot="private" static="no">
        <type>void(*</type>
        <definition>typedef void(* ADC_CloseFxn) (ADC_Handle handle)</definition>
        <argsstring>)(ADC_Handle handle)</argsstring>
        <name>ADC_CloseFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_8h_1adb49f74bdef5e3e45ee5de306c5dfc08" kindref="member">ADC_close()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="275" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_8h_1af9c178e22b377d9cf5eb7d2a1a072f12" prot="private" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* ADC_ControlFxn) (ADC_Handle handle, uint_fast16_t cmd, void *arg)</definition>
        <argsstring>)(ADC_Handle handle, uint_fast16_t cmd, void *arg)</argsstring>
        <name>ADC_ControlFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_8h_1af4be7e5e4f5cc931f4501a542d689c32" kindref="member">ADC_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="282" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_8h_1a552f2f752fbfc1b2af7551e55e392a42" prot="private" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* ADC_ConvertFxn) (ADC_Handle handle, uint16_t *value)</definition>
        <argsstring>)(ADC_Handle handle, uint16_t *value)</argsstring>
        <name>ADC_ConvertFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of ADC_ConvertFxn(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="290" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_8h_1a2b16c6506209f209811e29909c11b19f" prot="private" static="no">
        <type>uint32_t(*</type>
        <definition>typedef uint32_t(* ADC_ConvertToMicroVoltsFxn) (ADC_Handle handle, uint16_t adcValue)</definition>
        <argsstring>)(ADC_Handle handle, uint16_t adcValue)</argsstring>
        <name>ADC_ConvertToMicroVoltsFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_8h_1aa1cd6feaa85ea5409dbe1769586bff20" kindref="member">ADC_convertToMicroVolts()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="297" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_8h_1af5f90e5268e88d0bb56d40d53542b1da" prot="private" static="no">
        <type>void(*</type>
        <definition>typedef void(* ADC_InitFxn) (ADC_Handle handle)</definition>
        <argsstring>)(ADC_Handle handle)</argsstring>
        <name>ADC_InitFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_8h_1a4b4a2ddcb45df0c8497c47d4ed800e2a" kindref="member">ADC_init()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="305" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_8h_1a753af5a6a07905e109bbdecb785ac44d" prot="private" static="no">
        <type><ref refid="_a_d_c_8h_1ac98b1222559c172df43505d672e1376c" kindref="member">ADC_Handle</ref>(*</type>
        <definition>typedef ADC_Handle(* ADC_OpenFxn) (ADC_Handle handle, ADC_Params *params)</definition>
        <argsstring>)(ADC_Handle handle, ADC_Params *params)</argsstring>
        <name>ADC_OpenFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="312" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_8h_1af334849657f87b79a31392f89828299a" prot="public" static="no">
        <type>struct <ref refid="struct_a_d_c___config" kindref="compound">ADC_Config</ref></type>
        <definition>typedef struct ADC_Config  ADC_Config</definition>
        <argsstring></argsstring>
        <name>ADC_Config</name>
        <briefdescription>
<para>ADC driver&apos;s custom <ref refid="index_1driver_configuration" kindref="member">configuration</ref> structure. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="_a_d_c_8h_1a4b4a2ddcb45df0c8497c47d4ed800e2a" kindref="member">ADC_init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="357" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_a_d_c_8h_1adb49f74bdef5e3e45ee5de306c5dfc08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_close</definition>
        <argsstring>(ADC_Handle handle)</argsstring>
        <name>ADC_close</name>
        <param>
          <type><ref refid="_a_d_c_8h_1ac98b1222559c172df43505d672e1376c" kindref="member">ADC_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to close an ADC driver instance. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="_a_d_c_8h_1ac98b1222559c172df43505d672e1376c" kindref="member">ADC_Handle</ref> returned from <ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="366" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_8h_1af4be7e5e4f5cc931f4501a542d689c32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t ADC_control</definition>
        <argsstring>(ADC_Handle handle, uint_fast16_t cmd, void *arg)</argsstring>
        <name>ADC_control</name>
        <param>
          <type><ref refid="_a_d_c_8h_1ac98b1222559c172df43505d672e1376c" kindref="member">ADC_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint_fast16_t</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Function performs implementation specific features on a driver instance. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="_a_d_c_8h_1ac98b1222559c172df43505d672e1376c" kindref="member">ADC_Handle</ref> returned from <ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>A command value defined by the device specific implementation</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">arg</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional R/W (read/write) argument that is accompanied with <computeroutput>cmd</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Implementation specific return codes. Negative values indicate unsuccessful operations.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group___a_d_c___c_o_n_t_r_o_l_1gaee02c8883a7e443d36ea47f9696730ec" kindref="member">ADC_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The call was successful. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___a_d_c___c_o_n_t_r_o_l_1ga704a8cd95bdee94b0f61f06566062e8c" kindref="member">ADC_STATUS_UNDEFINEDCMD</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>cmd</computeroutput> value is not supported by the device specific implementation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="389" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_8h_1afcac5582b8be42a7740091d150aef05c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t ADC_convert</definition>
        <argsstring>(ADC_Handle handle, uint16_t *value)</argsstring>
        <name>ADC_convert</name>
        <param>
          <type><ref refid="_a_d_c_8h_1ac98b1222559c172df43505d672e1376c" kindref="member">ADC_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function to perform an ADC conversion. </para>        </briefdescription>
        <detaileddescription>
<para>Function to perform a single channel sample conversion.</para><para><simplesect kind="pre"><para><ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref> has been called</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="_a_d_c_8h_1ac98b1222559c172df43505d672e1376c" kindref="member">ADC_Handle</ref> returned from <ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a uint16_t to store the conversion result</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group___a_d_c___c_o_n_t_r_o_l_1gaee02c8883a7e443d36ea47f9696730ec" kindref="member">ADC_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The conversion was successful. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___a_d_c___c_o_n_t_r_o_l_1ga33ce323c3bbdc8a3f4e018f99a92b09d" kindref="member">ADC_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The conversion failed and <computeroutput>value</computeroutput> is invalid.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_a_d_c_8h_1aa1cd6feaa85ea5409dbe1769586bff20" kindref="member">ADC_convertToMicroVolts()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="409" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_8h_1aa1cd6feaa85ea5409dbe1769586bff20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ADC_convertToMicroVolts</definition>
        <argsstring>(ADC_Handle handle, uint16_t adcValue)</argsstring>
        <name>ADC_convertToMicroVolts</name>
        <param>
          <type><ref refid="_a_d_c_8h_1ac98b1222559c172df43505d672e1376c" kindref="member">ADC_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>adcValue</declname>
        </param>
        <briefdescription>
<para>Function to convert a raw ADC sample into microvolts. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_a_d_c_8h_1afcac5582b8be42a7740091d150aef05c" kindref="member">ADC_convert()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="_a_d_c_8h_1ac98b1222559c172df43505d672e1376c" kindref="member">ADC_Handle</ref> returned from <ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">adcValue</parametername>
</parameternamelist>
<parameterdescription>
<para>A sampling result return from <ref refid="_a_d_c_8h_1afcac5582b8be42a7740091d150aef05c" kindref="member">ADC_convert()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>adcValue</computeroutput> converted into microvolts</para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_8h_1afcac5582b8be42a7740091d150aef05c" kindref="member">ADC_convert()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="424" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_8h_1a4b4a2ddcb45df0c8497c47d4ed800e2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_init</definition>
        <argsstring>(void)</argsstring>
        <name>ADC_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to initialize the ADC driver. </para>        </briefdescription>
        <detaileddescription>
<para>This function must also be called before any other ADC driver APIs. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="432" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_a_d_c_8h_1ac98b1222559c172df43505d672e1376c" kindref="member">ADC_Handle</ref></type>
        <definition>ADC_Handle ADC_open</definition>
        <argsstring>(uint_least8_t index, ADC_Params *params)</argsstring>
        <name>ADC_open</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="struct_a_d_c___params" kindref="compound">ADC_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize the ADC peripheral. </para>        </briefdescription>
        <detaileddescription>
<para>Function to initialize the ADC peripheral specified by the particular index value.</para><para><simplesect kind="pre"><para><ref refid="_a_d_c_8h_1a4b4a2ddcb45df0c8497c47d4ed800e2a" kindref="member">ADC_init()</ref> has been called</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index in the <computeroutput><ref refid="struct_a_d_c___config" kindref="compound">ADC_Config</ref></computeroutput>[] array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an initialized <ref refid="struct_a_d_c___params" kindref="compound">ADC_Params</ref> structure. If NULL, the default <ref refid="struct_a_d_c___params" kindref="compound">ADC_Params</ref> values are used.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <ref refid="_a_d_c_8h_1ac98b1222559c172df43505d672e1376c" kindref="member">ADC_Handle</ref> on success or NULL on error.</para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_8h_1a4b4a2ddcb45df0c8497c47d4ed800e2a" kindref="member">ADC_init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_8h_1adb49f74bdef5e3e45ee5de306c5dfc08" kindref="member">ADC_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="451" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_8h_1a21df1c0987f5cecb660581ae081c4dc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_Params_init</definition>
        <argsstring>(ADC_Params *params)</argsstring>
        <name>ADC_Params_init</name>
        <param>
          <type><ref refid="struct_a_d_c___params" kindref="compound">ADC_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Initialize an <ref refid="struct_a_d_c___params" kindref="compound">ADC_Params</ref> structure to its default values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an <ref refid="struct_a_d_c___params" kindref="compound">ADC_Params</ref> structure.</para></parameterdescription>
</parameteritem>
</parameterlist>
Default values are: <itemizedlist>
<listitem><para><ref refid="struct_a_d_c___params_1a62c67d0ad10066d4e30e67d648937a32" kindref="member">ADC_Params.custom</ref> = NULL </para></listitem>
<listitem><para><ref refid="struct_a_d_c___params_1afcfab4dda63383c2dcf0bb21fe519c53" kindref="member">ADC_Params.isProtected</ref> = true </para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="462" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Analog to Digital Conversion (ADC) Input Driver. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para><anchor id="_a_d_c_8h_1ti_drivers_ADC_Overview"/><heading level="1">Overview</heading>
</para><para>The ADC driver allows you to manage an Analog to Digital peripheral via simple and portable APIs. This driver supports sampling and converting raw values into microvolts.</para><para><hruler/>
 <anchor id="_a_d_c_8h_1ti_drivers_ADC_Usage"/><heading level="1">Usage</heading>
</para><para>This documentation provides a basic <ref refid="_a_d_c_8h_1ti_drivers_ADC_Synopsis" kindref="member">usage summary</ref> and a set of <ref refid="_a_d_c_8h_1ti_drivers_ADC_Examples" kindref="member">examples</ref> in the form of commented code fragments. Detailed descriptions of the APIs are provided in subsequent sections.</para><para><anchor id="_a_d_c_8h_1ti_drivers_ADC_Synopsis"/><heading level="2">Synopsis</heading>
</para><para><anchor id="_a_d_c_8h_1ti_drivers_ADC_Synopsis_Code"/><programlisting><codeline><highlight class="normal">//<sp/>Import<sp/>ADC<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/ADC.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Define<sp/>name<sp/>for<sp/>ADC<sp/>channel<sp/>index</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>THERMOCOUPLE_OUT<sp/><sp/>0</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>One-time<sp/>init<sp/>of<sp/>ADC<sp/>driver</highlight></codeline>
<codeline><highlight class="normal">ADC_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>initialize<sp/>optional<sp/>ADC<sp/>parameters</highlight></codeline>
<codeline><highlight class="normal">ADC_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal">ADC_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">params.isProtected<sp/>=<sp/>true;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Open<sp/>ADC<sp/>channels<sp/>for<sp/>usage</highlight></codeline>
<codeline><highlight class="normal">ADC_Handle<sp/>adcHandle<sp/>=<sp/>ADC_open(THERMOCOUPLE_OUT,<sp/>&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Sample<sp/>the<sp/>analog<sp/>output<sp/>from<sp/>the<sp/>Thermocouple</highlight></codeline>
<codeline><highlight class="normal">ADC_convert(adcHandle,<sp/>&amp;result);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Convert<sp/>the<sp/>sample<sp/>to<sp/>microvolts</highlight></codeline>
<codeline><highlight class="normal">resultUv<sp/>=<sp/>ADC_convertToMicroVolts(adcHandle,<sp/>result);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ADC_close(adcHandle);</highlight></codeline>
</programlisting></para><para><hruler/>
 <anchor id="_a_d_c_8h_1ti_drivers_ADC_Examples"/><heading level="1">Examples</heading>
</para><para><itemizedlist>
<listitem><para><ref refid="_a_d_c_8h_1ti_drivers_ADC_Examples_open" kindref="member">Opening an ADC instance</ref> </para></listitem>
<listitem><para><ref refid="_a_d_c_8h_1ti_drivers_ADC_Examples_convert" kindref="member">Taking an ADC sample</ref> </para></listitem>
<listitem><para><ref refid="_a_d_c_8h_1ti_drivers_ADC_Examples_convert_microvolts" kindref="member">Converting a sample to microvolts</ref></para></listitem>
</itemizedlist>
<anchor id="_a_d_c_8h_1ti_drivers_ADC_Examples_open"/><heading level="2">Opening an ADC instance</heading>
</para><para><programlisting><codeline><highlight class="normal">ADC_Handle<sp/>adc;</highlight></codeline>
<codeline><highlight class="normal">ADC_Params<sp/>params;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ADC_Params_init(&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">adc<sp/>=<sp/>ADC_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(adc<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>ADC_open()<sp/>failed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(1)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><anchor id="_a_d_c_8h_1ti_drivers_ADC_Examples_convert"/><heading level="2">Taking an ADC sample</heading>
</para><para>An ADC conversion with an ADC peripheral is started by calling <ref refid="_a_d_c_8h_1afcac5582b8be42a7740091d150aef05c" kindref="member">ADC_convert()</ref>. The result value is returned by <ref refid="_a_d_c_8h_1afcac5582b8be42a7740091d150aef05c" kindref="member">ADC_convert()</ref> once the conversion is finished.</para><para><programlisting><codeline><highlight class="normal">int_fast16_t<sp/>res;</highlight></codeline>
<codeline><highlight class="normal">uint_fast16_t<sp/>adcValue;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">res<sp/>=<sp/>ADC_convert(adc,<sp/>&amp;adcValue);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(res<sp/>==<sp/>ADC_STATUS_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>print(adcValue);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><anchor id="_a_d_c_8h_1ti_drivers_ADC_Examples_convert_microvolts"/><heading level="2">Converting a sample to microvolts</heading>
</para><para>The result value returned by <ref refid="_a_d_c_8h_1afcac5582b8be42a7740091d150aef05c" kindref="member">ADC_convert()</ref> is a raw value. The following uses <ref refid="_a_d_c_8h_1aa1cd6feaa85ea5409dbe1769586bff20" kindref="member">ADC_convertToMicroVolts()</ref> to convert the raw value into microvolts. <programlisting><codeline><highlight class="normal">int_fast16_t<sp/>res;</highlight></codeline>
<codeline><highlight class="normal">uint_fast16_t<sp/>adcValue;</highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>adcValueUv;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">res<sp/>=<sp/>ADC_convert(adc,<sp/>&amp;adcValue);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(res<sp/>==<sp/>ADC_STATUS_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>adcValueUv<sp/>=<sp/>ADC_convertToMicroVolts(adc,<sp/>adcValue);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><hruler/>
 <anchor id="_a_d_c_8h_1ti_drivers_ADC_Configuration"/><heading level="1">Configuration</heading>
</para><para>Refer to the <ref refid="index_1driver_configuration" kindref="member">Driver&apos;s Configuration</ref> section for driver configuration information. <hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016-2019,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*!****************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADC.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>Analog<sp/>to<sp/>Digital<sp/>Conversion<sp/>(ADC)<sp/>Input<sp/>Driver</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_ADC_Overview</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Overview</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>ADC<sp/>driver<sp/>allows<sp/>you<sp/>to<sp/>manage<sp/>an<sp/>Analog<sp/>to<sp/>Digital<sp/>peripheral<sp/>via</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/>simple<sp/>and<sp/>portable<sp/>APIs.<sp/>This<sp/>driver<sp/>supports<sp/>sampling<sp/>and<sp/>converting</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/>raw<sp/>values<sp/>into<sp/>microvolts.</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_ADC_Usage</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Usage</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>documentation<sp/>provides<sp/>a<sp/>basic<sp/>@ref<sp/>ti_drivers_ADC_Synopsis</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/>&quot;usage<sp/>summary&quot;<sp/>and<sp/>a<sp/>set<sp/>of<sp/>@ref<sp/>ti_drivers_ADC_Examples<sp/>&quot;examples&quot;</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/>in<sp/>the<sp/>form<sp/>of<sp/>commented<sp/>code<sp/>fragments.<sp/>Detailed<sp/>descriptions<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/>APIs<sp/>are<sp/>provided<sp/>in<sp/>subsequent<sp/>sections.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_ADC_Synopsis</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Synopsis</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_ADC_Synopsis_Code</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Import<sp/>ADC<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/ADC.h&gt;</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Define<sp/>name<sp/>for<sp/>ADC<sp/>channel<sp/>index</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/>#define<sp/>THERMOCOUPLE_OUT<sp/><sp/>0</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>One-time<sp/>init<sp/>of<sp/>ADC<sp/>driver</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/>ADC_init();</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>initialize<sp/>optional<sp/>ADC<sp/>parameters</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/>ADC_Params<sp/>params;</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/>ADC_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/>params.isProtected<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Open<sp/>ADC<sp/>channels<sp/>for<sp/>usage</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/>ADC_Handle<sp/>adcHandle<sp/>=<sp/>ADC_open(THERMOCOUPLE_OUT,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Sample<sp/>the<sp/>analog<sp/>output<sp/>from<sp/>the<sp/>Thermocouple</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/>ADC_convert(adcHandle,<sp/>&amp;result);</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Convert<sp/>the<sp/>sample<sp/>to<sp/>microvolts</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/><sp/>resultUv<sp/>=<sp/>ADC_convertToMicroVolts(adcHandle,<sp/>result);</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/>ADC_close(adcHandle);</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_ADC_Examples</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Examples</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>@ref<sp/>ti_drivers_ADC_Examples_open<sp/>&quot;Opening<sp/>an<sp/>ADC<sp/>instance&quot;</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>@ref<sp/>ti_drivers_ADC_Examples_convert<sp/>&quot;Taking<sp/>an<sp/>ADC<sp/>sample&quot;</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>@ref<sp/>ti_drivers_ADC_Examples_convert_microvolts<sp/>&quot;Converting<sp/>a<sp/>sample<sp/>to<sp/>microvolts&quot;</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_ADC_Examples_open</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Opening<sp/>an<sp/>ADC<sp/>instance</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/>ADC_Handle<sp/>adc;</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/><sp/>ADC_Params<sp/>params;</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/>ADC_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/>adc<sp/>=<sp/>ADC_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(adc<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>ADC_open()<sp/>failed</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(1)<sp/>{}</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_ADC_Examples_convert</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Taking<sp/>an<sp/>ADC<sp/>sample</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/>An<sp/>ADC<sp/>conversion<sp/>with<sp/>an<sp/>ADC<sp/>peripheral<sp/>is<sp/>started<sp/>by<sp/>calling</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/>ADC_convert().<sp/>The<sp/>result<sp/>value<sp/>is<sp/>returned<sp/>by<sp/>ADC_convert()</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/><sp/>once<sp/>the<sp/>conversion<sp/>is<sp/>finished.</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/><sp/>int_fast16_t<sp/>res;</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/><sp/>uint_fast16_t<sp/>adcValue;</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/><sp/>res<sp/>=<sp/>ADC_convert(adc,<sp/>&amp;adcValue);</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(res<sp/>==<sp/>ADC_STATUS_SUCCESS)</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>print(adcValue);</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_ADC_Examples_convert_microvolts</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Converting<sp/>a<sp/>sample<sp/>to<sp/>microvolts</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>result<sp/>value<sp/>returned<sp/>by<sp/>ADC_convert()<sp/>is<sp/>a<sp/>raw<sp/>value.<sp/>The</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/><sp/>following<sp/>uses<sp/>ADC_convertToMicroVolts()<sp/>to<sp/>convert<sp/>the<sp/>raw<sp/>value</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/><sp/>into<sp/>microvolts.</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/><sp/>int_fast16_t<sp/>res;</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/><sp/>uint_fast16_t<sp/>adcValue;</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/><sp/>uint32_t<sp/>adcValueUv;</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/><sp/>res<sp/>=<sp/>ADC_convert(adc,<sp/>&amp;adcValue);</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(res<sp/>==<sp/>ADC_STATUS_SUCCESS)</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>adcValueUv<sp/>=<sp/>ADC_convertToMicroVolts(adc,<sp/>adcValue);</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_ADC_Configuration</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Configuration</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/><sp/>Refer<sp/>to<sp/>the<sp/>@ref<sp/>driver_configuration<sp/>&quot;Driver&apos;s<sp/>Configuration&quot;<sp/>section</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/><sp/>for<sp/>driver<sp/>configuration<sp/>information.</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>******************************************************************************</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_ADC__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_ADC__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="_a_d_c_8h_1ab9f0fda9cf7e26636cee5817789f0030" refkind="member"><highlight class="preprocessor">#define<sp/>ADC_convertRawToMicroVolts<sp/>ADC_convertToMicroVolts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="group___a_d_c___c_o_n_t_r_o_l_1ga1850e2c1e2791103d1102917d1e5b01b" refkind="member"><highlight class="preprocessor">#define<sp/>ADC_CMD_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="group___a_d_c___c_o_n_t_r_o_l_1ga5a8bd7786df22349b1a5434f48b08581" refkind="member"><highlight class="preprocessor">#define<sp/>ADC_STATUS_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="group___a_d_c___c_o_n_t_r_o_l_1gaee02c8883a7e443d36ea47f9696730ec" refkind="member"><highlight class="preprocessor">#define<sp/>ADC_STATUS_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="group___a_d_c___c_o_n_t_r_o_l_1ga33ce323c3bbdc8a3f4e018f99a92b09d" refkind="member"><highlight class="preprocessor">#define<sp/>ADC_STATUS_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="group___a_d_c___c_o_n_t_r_o_l_1ga704a8cd95bdee94b0f61f06566062e8c" refkind="member"><highlight class="preprocessor">#define<sp/>ADC_STATUS_UNDEFINEDCMD<sp/><sp/><sp/><sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="comment">/*<sp/>Add<sp/>ADC_CMD_&lt;commands&gt;<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="_a_d_c_8h_1ac98b1222559c172df43505d672e1376c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_d_c___config" kindref="compound">ADC_Config</ref><sp/><sp/><sp/><sp/><sp/>*<ref refid="_a_d_c_8h_1ac98b1222559c172df43505d672e1376c" kindref="member">ADC_Handle</ref>;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="struct_a_d_c___params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="259" refid="struct_a_d_c___params_1a62c67d0ad10066d4e30e67d648937a32" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*<ref refid="struct_a_d_c___params_1a62c67d0ad10066d4e30e67d648937a32" kindref="member">custom</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="261" refid="struct_a_d_c___params_1afcfab4dda63383c2dcf0bb21fe519c53" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c___params_1afcfab4dda63383c2dcf0bb21fe519c53" kindref="member">isProtected</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="268"><highlight class="normal">}<sp/><ref refid="struct_a_d_c___params" kindref="compound">ADC_Params</ref>;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*ADC_CloseFxn)<sp/>(ADC_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*ADC_ControlFxn)<sp/>(ADC_Handle<sp/>handle,<sp/>uint_fast16_t<sp/>cmd,</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*ADC_ConvertFxn)<sp/>(ADC_Handle<sp/>handle,<sp/>uint16_t<sp/>*value);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/>(*ADC_ConvertToMicroVoltsFxn)<sp/>(ADC_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>adcValue);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*ADC_InitFxn)<sp/>(ADC_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_a_d_c_8h_1ac98b1222559c172df43505d672e1376c" kindref="member">ADC_Handle</ref><sp/>(*ADC_OpenFxn)<sp/>(ADC_Handle<sp/>handle,<sp/><ref refid="struct_a_d_c___params" kindref="compound">ADC_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="319" refid="struct_a_d_c___fxn_table" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="321" refid="struct_a_d_c___fxn_table_1ae7aebe8cc8f3493502e3dceecb688c32" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ADC_CloseFxn<sp/><sp/><sp/><sp/><sp/><sp/>closeFxn;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="struct_a_d_c___fxn_table_1af92f7867301c8edd125436ca66e16877" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ADC_ControlFxn<sp/><sp/><sp/><sp/>controlFxn;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="struct_a_d_c___fxn_table_1ac7255105d1eca815a45714ff0d2186cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ADC_ConvertFxn<sp/><sp/><sp/><sp/>convertFxn;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="330" refid="struct_a_d_c___fxn_table_1a35a09bfb36dd7b17a419a34ed0ac76ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ADC_ConvertToMicroVoltsFxn<sp/>convertToMicroVolts;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="333" refid="struct_a_d_c___fxn_table_1a5b2882d28b0e4a8c8d7bb2ed741380e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ADC_InitFxn<sp/><sp/><sp/><sp/><sp/><sp/><sp/>initFxn;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="336" refid="struct_a_d_c___fxn_table_1aa74579528b7be192281bf5c23e6dcf03" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ADC_OpenFxn<sp/><sp/><sp/><sp/><sp/><sp/><sp/>openFxn;</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}<sp/><ref refid="struct_a_d_c___fxn_table" kindref="compound">ADC_FxnTable</ref>;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="struct_a_d_c___config" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_d_c___config" kindref="compound">ADC_Config</ref><sp/>{</highlight></codeline>
<codeline lineno="349" refid="struct_a_d_c___config_1a3ca1098e17a4748a0f6dc64382cea00d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c___fxn_table" kindref="compound">ADC_FxnTable</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_a_d_c___config_1a3ca1098e17a4748a0f6dc64382cea00d" kindref="member">fxnTablePtr</ref>;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="struct_a_d_c___config_1acf3784052a071ffab8a3f1dd9b334c02" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_a_d_c___config_1acf3784052a071ffab8a3f1dd9b334c02" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="struct_a_d_c___config_1a485e9d57b2d43a4b7dde68972f88dd2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_a_d_c___config_1a485e9d57b2d43a4b7dde68972f88dd2b" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}<sp/><ref refid="_a_d_c_8h_1af334849657f87b79a31392f89828299a" kindref="member">ADC_Config</ref>;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_d_c_8h_1adb49f74bdef5e3e45ee5de306c5dfc08" kindref="member">ADC_close</ref>(ADC_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_a_d_c_8h_1af4be7e5e4f5cc931f4501a542d689c32" kindref="member">ADC_control</ref>(ADC_Handle<sp/>handle,<sp/>uint_fast16_t<sp/>cmd,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_a_d_c_8h_1afcac5582b8be42a7740091d150aef05c" kindref="member">ADC_convert</ref>(ADC_Handle<sp/>handle,<sp/>uint16_t<sp/>*value);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="_a_d_c_8h_1aa1cd6feaa85ea5409dbe1769586bff20" kindref="member">ADC_convertToMicroVolts</ref>(ADC_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>adcValue);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_d_c_8h_1a4b4a2ddcb45df0c8497c47d4ed800e2a" kindref="member">ADC_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ADC_Handle<sp/><ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open</ref>(uint_least8_t<sp/>index,<sp/><ref refid="struct_a_d_c___params" kindref="compound">ADC_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_d_c_8h_1a21df1c0987f5cecb660581ae081c4dc7" kindref="member">ADC_Params_init</ref>(<ref refid="struct_a_d_c___params" kindref="compound">ADC_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_ADC__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h"/>
  </compounddef>
</doxygen>
