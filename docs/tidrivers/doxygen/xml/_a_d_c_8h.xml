<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_a_d_c_8h" kind="file" language="C++">
    <compoundname>ADC.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdint.h</includes>
    <includedby refid="_a_d_c_m_s_p432_8h" local="no">ADCMSP432.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="0">
        <label>ADC.h</label>
        <link refid="_a_d_c_8h"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>ADC.h</label>
        <link refid="_a_d_c_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ADCMSP432.h</label>
        <link refid="_a_d_c_m_s_p432_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_a_d_c___params__" prot="public">ADC_Params_</innerclass>
    <innerclass refid="struct_a_d_c___fxn_table__" prot="public">ADC_FxnTable_</innerclass>
    <innerclass refid="struct_a_d_c___config__" prot="public">ADC_Config_</innerclass>
      <sectiondef kind="user-defined">
      <memberdef kind="define" id="group___a_d_c___c_o_n_t_r_o_l_1gaee02c8883a7e443d36ea47f9696730ec" prot="public" static="no">
        <name>ADC_STATUS_SUCCESS</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>Successful status code returned by <ref refid="_a_d_c_8h_1af4be7e5e4f5cc931f4501a542d689c32" kindref="member">ADC_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_a_d_c_8h_1af4be7e5e4f5cc931f4501a542d689c32" kindref="member">ADC_control()</ref> returns ADC_STATUS_SUCCESS if the control code was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="170" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___c_o_n_t_r_o_l_1ga33ce323c3bbdc8a3f4e018f99a92b09d" prot="public" static="no">
        <name>ADC_STATUS_ERROR</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>Generic error status code returned by <ref refid="_a_d_c_8h_1af4be7e5e4f5cc931f4501a542d689c32" kindref="member">ADC_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_a_d_c_8h_1af4be7e5e4f5cc931f4501a542d689c32" kindref="member">ADC_control()</ref> returns ADC_STATUS_ERROR if the control code was not executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="178" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___c_o_n_t_r_o_l_1ga704a8cd95bdee94b0f61f06566062e8c" prot="public" static="no">
        <name>ADC_STATUS_UNDEFINEDCMD</name>
        <initializer>(-2)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_a_d_c_8h_1af4be7e5e4f5cc931f4501a542d689c32" kindref="member">ADC_control()</ref> for undefined command codes. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_a_d_c_8h_1af4be7e5e4f5cc931f4501a542d689c32" kindref="member">ADC_control()</ref> returns ADC_STATUS_UNDEFINEDCMD if the control code is not recognized by the driver implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="187" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="_a_d_c_8h_1ab9f0fda9cf7e26636cee5817789f0030" prot="public" static="no">
        <name>ADC_convertRawToMicroVolts</name>
        <initializer><ref refid="_a_d_c_8h_1aa1cd6feaa85ea5409dbe1769586bff20" kindref="member">ADC_convertToMicroVolts</ref></initializer>
        <briefdescription>
<para>Define to support deprecated API ADC_convertRawToMicroVolts. </para>        </briefdescription>
        <detaileddescription>
<para>It is succeeded by the generic ADC_convertToMicroVolts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="127" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___c_o_n_t_r_o_l_1ga1850e2c1e2791103d1102917d1e5b01b" prot="public" static="no">
        <name>ADC_CMD_RESERVED</name>
        <initializer>(32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common ADC_control command code reservation offset. ADC driver implementations should offset command codes with ADC_CMD_RESERVED growing positively</para><para>Example implementation specific command codes: <programlisting><codeline><highlight class="normal">#define<sp/>ADCXYZ_CMD_COMMAND0<sp/><sp/><sp/><sp/><sp/><sp/>ADC_CMD_RESERVED<sp/>+<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADCXYZ_CMD_COMMAND1<sp/><sp/><sp/><sp/><sp/><sp/>ADC_CMD_RESERVED<sp/>+<sp/>1</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="146" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___c_o_n_t_r_o_l_1ga5a8bd7786df22349b1a5434f48b08581" prot="public" static="no">
        <name>ADC_STATUS_RESERVED</name>
        <initializer>(-32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common ADC_control status code reservation offset. ADC driver implementations should offset status codes with ADC_STATUS_RESERVED growing negatively.</para><para>Example implementation specific status codes: <programlisting><codeline><highlight class="normal">#define<sp/>ADCXYZ_STATUS_ERROR0<sp/><sp/><sp/><sp/><sp/>ADC_STATUS_RESERVED<sp/>-<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADCXYZ_STATUS_ERROR1<sp/><sp/><sp/><sp/><sp/>ADC_STATUS_RESERVED<sp/>-<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADCXYZ_STATUS_ERROR2<sp/><sp/><sp/><sp/><sp/>ADC_STATUS_RESERVED<sp/>-<sp/>2</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="160" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_a_d_c_8h_1a7447d17264445ab6285ddab2bb794582" prot="public" static="no">
        <type>struct <ref refid="struct_a_d_c___config__" kindref="compound">ADC_Config_</ref> *</type>
        <definition>typedef struct ADC_Config_* ADC_Handle</definition>
        <argsstring></argsstring>
        <name>ADC_Handle</name>
        <briefdescription>
<para>A handle that is returned from a <ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref> call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="207" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_8h_1ae51280ff4e4f8a9d265888566dd750f4" prot="public" static="no">
        <type>struct <ref refid="struct_a_d_c___params__" kindref="compound">ADC_Params_</ref></type>
        <definition>typedef struct ADC_Params_  ADC_Params</definition>
        <argsstring></argsstring>
        <name>ADC_Params</name>
        <briefdescription>
<para>ADC Parameters. </para>        </briefdescription>
        <detaileddescription>
<para>ADC parameters are used to with the <ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref> call. Only custom argument is supported in the parameters. Default values for these parameters are set using <ref refid="_a_d_c_8h_1a21df1c0987f5cecb660581ae081c4dc7" kindref="member">ADC_Params_init()</ref>.</para><para><simplesect kind="see"><para><ref refid="_a_d_c_8h_1a21df1c0987f5cecb660581ae081c4dc7" kindref="member">ADC_Params_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="228" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_8h_1a42f6ff234d06fb71647510e04be8a3bf" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ADC_CloseFxn) (ADC_Handle handle)</definition>
        <argsstring>)(ADC_Handle handle)</argsstring>
        <name>ADC_CloseFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_8h_1adb49f74bdef5e3e45ee5de306c5dfc08" kindref="member">ADC_close()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="234" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_8h_1af9c178e22b377d9cf5eb7d2a1a072f12" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* ADC_ControlFxn) (ADC_Handle handle, uint_fast16_t cmd, void *arg)</definition>
        <argsstring>)(ADC_Handle handle, uint_fast16_t cmd, void *arg)</argsstring>
        <name>ADC_ControlFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_8h_1af4be7e5e4f5cc931f4501a542d689c32" kindref="member">ADC_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="240" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_8h_1a552f2f752fbfc1b2af7551e55e392a42" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* ADC_ConvertFxn) (ADC_Handle handle, uint16_t *value)</definition>
        <argsstring>)(ADC_Handle handle, uint16_t *value)</argsstring>
        <name>ADC_ConvertFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_8h_1a552f2f752fbfc1b2af7551e55e392a42" kindref="member">ADC_ConvertFxn()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="247" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_8h_1a2b16c6506209f209811e29909c11b19f" prot="public" static="no">
        <type>uint32_t(*</type>
        <definition>typedef uint32_t(* ADC_ConvertToMicroVoltsFxn) (ADC_Handle handle, uint16_t adcValue)</definition>
        <argsstring>)(ADC_Handle handle, uint16_t adcValue)</argsstring>
        <name>ADC_ConvertToMicroVoltsFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_8h_1aa1cd6feaa85ea5409dbe1769586bff20" kindref="member">ADC_convertToMicroVolts()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="253" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_8h_1af5f90e5268e88d0bb56d40d53542b1da" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ADC_InitFxn) (ADC_Handle handle)</definition>
        <argsstring>)(ADC_Handle handle)</argsstring>
        <name>ADC_InitFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_8h_1a4b4a2ddcb45df0c8497c47d4ed800e2a" kindref="member">ADC_init()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="260" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_8h_1a753af5a6a07905e109bbdecb785ac44d" prot="public" static="no">
        <type><ref refid="_a_d_c_8h_1a7447d17264445ab6285ddab2bb794582" kindref="member">ADC_Handle</ref>(*</type>
        <definition>typedef ADC_Handle(* ADC_OpenFxn) (ADC_Handle handle, ADC_Params *params)</definition>
        <argsstring>)(ADC_Handle handle, ADC_Params *params)</argsstring>
        <name>ADC_OpenFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="266" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/ADC.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_8h_1a83289c397fba93cf5ec98c40397ffdff" prot="public" static="no">
        <type>struct <ref refid="struct_a_d_c___fxn_table__" kindref="compound">ADC_FxnTable_</ref></type>
        <definition>typedef struct ADC_FxnTable_  ADC_FxnTable</definition>
        <argsstring></argsstring>
        <name>ADC_FxnTable</name>
        <briefdescription>
<para>The definition of a ADC function table that contains the required set of functions to control a specific ADC driver implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="291" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_d_c_8h_1acde6feaa979f1952a70a38e9e1e1ea74" prot="public" static="no">
        <type>struct <ref refid="struct_a_d_c___config__" kindref="compound">ADC_Config_</ref></type>
        <definition>typedef struct ADC_Config_  ADC_Config</definition>
        <argsstring></argsstring>
        <name>ADC_Config</name>
        <briefdescription>
<para>ADC Global configuration. </para>        </briefdescription>
        <detaileddescription>
<para>The ADC_Config structure contains a set of pointers used to characterize the ADC driver implementation.</para><para>This structure needs to be defined before calling <ref refid="_a_d_c_8h_1a4b4a2ddcb45df0c8497c47d4ed800e2a" kindref="member">ADC_init()</ref> and it must not be changed thereafter.</para><para><simplesect kind="see"><para><ref refid="_a_d_c_8h_1a4b4a2ddcb45df0c8497c47d4ed800e2a" kindref="member">ADC_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="313" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_a_d_c_8h_1adb49f74bdef5e3e45ee5de306c5dfc08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_close</definition>
        <argsstring>(ADC_Handle handle)</argsstring>
        <name>ADC_close</name>
        <param>
          <type><ref refid="_a_d_c_8h_1a7447d17264445ab6285ddab2bb794582" kindref="member">ADC_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to close a ADC driver. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADC handle returned from <ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_8h_1af4be7e5e4f5cc931f4501a542d689c32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t ADC_control</definition>
        <argsstring>(ADC_Handle handle, uint_fast16_t cmd, void *arg)</argsstring>
        <name>ADC_control</name>
        <param>
          <type><ref refid="_a_d_c_8h_1a7447d17264445ab6285ddab2bb794582" kindref="member">ADC_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint_fast16_t</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Function performs implementation specific features on a given ADC_Handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A ADC handle returned from <ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>A command value defined by the driver specific implementation</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional R/W (read/write) argument that is accompanied with cmd</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Implementation specific return codes. Negative values indicate unsuccessful operations.</para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_8h_1afcac5582b8be42a7740091d150aef05c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t ADC_convert</definition>
        <argsstring>(ADC_Handle handle, uint16_t *value)</argsstring>
        <name>ADC_convert</name>
        <param>
          <type><ref refid="_a_d_c_8h_1a7447d17264445ab6285ddab2bb794582" kindref="member">ADC_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function to perform ADC conversion. </para>        </briefdescription>
        <detaileddescription>
<para>Function to perform ADC single channel single sample conversion.</para><para><simplesect kind="pre"><para><ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref> has been called</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADC_Handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the conversion result</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return value indicates the conversion is succeeded or failed. The value could be ADC_STATUS_SUCCESS or ADC_STATUS_ERROR.</para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_8h_1adb49f74bdef5e3e45ee5de306c5dfc08" kindref="member">ADC_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="365" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_8h_1aa1cd6feaa85ea5409dbe1769586bff20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ADC_convertToMicroVolts</definition>
        <argsstring>(ADC_Handle handle, uint16_t adcValue)</argsstring>
        <name>ADC_convertToMicroVolts</name>
        <param>
          <type><ref refid="_a_d_c_8h_1a7447d17264445ab6285ddab2bb794582" kindref="member">ADC_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>adcValue</declname>
        </param>
        <briefdescription>
<para>Function performs conversion from ADC result to actual value in microvolts. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref> and <ref refid="_a_d_c_8h_1afcac5582b8be42a7740091d150aef05c" kindref="member">ADC_convert()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A ADC handle returned from <ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adcValue</parametername>
</parameternamelist>
<parameterdescription>
<para>A sampling result return from <ref refid="_a_d_c_8h_1afcac5582b8be42a7740091d150aef05c" kindref="member">ADC_convert()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The actual sampling result in micro volts unit.</para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="381" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_8h_1a4b4a2ddcb45df0c8497c47d4ed800e2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_init</definition>
        <argsstring>(void)</argsstring>
        <name>ADC_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to initializes the ADC driver. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The ADC_config structure must exist and be persistent before this function can be called. This function must also be called before any other ADC driver APIs. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="391" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_a_d_c_8h_1a7447d17264445ab6285ddab2bb794582" kindref="member">ADC_Handle</ref></type>
        <definition>ADC_Handle ADC_open</definition>
        <argsstring>(uint_least8_t index, ADC_Params *params)</argsstring>
        <name>ADC_open</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="_a_d_c_8h_1ae51280ff4e4f8a9d265888566dd750f4" kindref="member">ADC_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize the ADC peripheral. </para>        </briefdescription>
        <detaileddescription>
<para>Function to initialize the ADC peripheral specified by the particular index value.</para><para><simplesect kind="pre"><para><ref refid="_a_d_c_8h_1a4b4a2ddcb45df0c8497c47d4ed800e2a" kindref="member">ADC_init()</ref> has been called</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical peripheral number for the ADC indexed into the ADC_config table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an parameter block, if NULL it will use default values. All the fields in this structure are RO (read-only).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A ADC_Handle on success or a NULL on an error or if it has been opened already.</para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_8h_1a4b4a2ddcb45df0c8497c47d4ed800e2a" kindref="member">ADC_init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_a_d_c_8h_1adb49f74bdef5e3e45ee5de306c5dfc08" kindref="member">ADC_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="413" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_d_c_8h_1a21df1c0987f5cecb660581ae081c4dc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_Params_init</definition>
        <argsstring>(ADC_Params *params)</argsstring>
        <name>ADC_Params_init</name>
        <param>
          <type><ref refid="_a_d_c_8h_1ae51280ff4e4f8a9d265888566dd750f4" kindref="member">ADC_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize the ADC_Params struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>An pointer to ADC_Params structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults values are: custom = NULL </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h" line="424" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>ADC driver interface. </para>    </briefdescription>
    <detaileddescription>
<para>============================================================================</para><para>The ADC header file should be included in an application as follows: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/ADC.h&gt;</highlight></codeline>
</programlisting></para><para><heading level="1">Operation</heading>
</para><para>The ADC driver operates as a simplified ADC module with only single channel sampling support. It also operates on blocking only mode which means users have to wait the current sampling finished before starting another sampling. The sampling channel needs to be specified in the <ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open()</ref> before calling <ref refid="_a_d_c_8h_1afcac5582b8be42a7740091d150aef05c" kindref="member">ADC_convert()</ref>.</para><para>The APIs in this driver serve as an interface to a typical TI-RTOS application. The specific peripheral implementations are responsible to create all the SYS/BIOS specific primitives to allow for thread-safe operation. User can use the ADC driver or the ADCBuf driver that has more features. But both ADC and ADCBuf cannot be used together in an application.</para><para><heading level="2">Opening the driver</heading>
</para><para><programlisting><codeline><highlight class="normal">ADC_Handle<sp/>adc;</highlight></codeline>
<codeline><highlight class="normal">ADC_Params<sp/>params;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ADC_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">adc<sp/>=<sp/>ADC_open(Board_ADC0,<sp/>&amp;params);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(adc<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>ADC_open()<sp/>failed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><heading level="2">Converting</heading>
</para><para>An ADC conversion with a ADC peripheral is started by calling <ref refid="_a_d_c_8h_1afcac5582b8be42a7740091d150aef05c" kindref="member">ADC_convert()</ref>. The result value is returned by <ref refid="_a_d_c_8h_1afcac5582b8be42a7740091d150aef05c" kindref="member">ADC_convert()</ref> once the conversion is finished.</para><para><programlisting><codeline><highlight class="normal">int_fast16_t<sp/>res;</highlight></codeline>
<codeline><highlight class="normal">uint_fast16_t<sp/>adcValue;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">res<sp/>=<sp/>ADC_convert(adc,<sp/>&amp;adcValue);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(res<sp/>==<sp/>ADC_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//use<sp/>adcValue</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><heading level="1">Implementation</heading>
</para><para>This module serves as the main interface for TI-RTOS applications. Its purpose is to redirect the module&apos;s APIs to specific peripheral implementations which are specified using a pointer to a ADC_FxnTable.</para><para>The ADC driver interface module is joined (at link time) to a NULL-terminated array of ADC_Config data structures named <emphasis>ADC_config</emphasis>. <emphasis>ADC_config</emphasis> is implemented in the application with each entry being an instance of a ADC peripheral. Each entry in <emphasis>ADC_config</emphasis> contains a:<itemizedlist>
<listitem><para>(ADC_FxnTable *) to a set of functions that implement a ADC peripheral</para></listitem><listitem><para>(void *) data object that is associated with the ADC_FxnTable</para></listitem><listitem><para>(void *) hardware attributes that are associated to the ADC_FxnTable</para></listitem></itemizedlist>
</para><para><heading level="1">Instrumentation</heading>
</para><para>The ADC driver interface produces log statements if instrumentation is enabled.</para><para><table rows="3" cols="2"><row>
<entry thead="yes"><para>Diagnostics Mask </para></entry><entry thead="yes"><para>Log details  </para></entry></row>
<row>
<entry thead="no"><para>Diags_USER1 </para></entry><entry thead="no"><para>basic operations performed </para></entry></row>
<row>
<entry thead="no"><para>Diags_USER2 </para></entry><entry thead="no"><para>detailed operations performed </para></entry></row>
</table>
<hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016-2017,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor">#ifndef<sp/>ti_drivers_ADC__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_ADC__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="_a_d_c_8h_1ab9f0fda9cf7e26636cee5817789f0030" refkind="member"><highlight class="preprocessor">#define<sp/>ADC_convertRawToMicroVolts<sp/>ADC_convertToMicroVolts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="group___a_d_c___c_o_n_t_r_o_l_1ga1850e2c1e2791103d1102917d1e5b01b" refkind="member"><highlight class="preprocessor">#define<sp/>ADC_CMD_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="group___a_d_c___c_o_n_t_r_o_l_1ga5a8bd7786df22349b1a5434f48b08581" refkind="member"><highlight class="preprocessor">#define<sp/>ADC_STATUS_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="group___a_d_c___c_o_n_t_r_o_l_1gaee02c8883a7e443d36ea47f9696730ec" refkind="member"><highlight class="preprocessor">#define<sp/>ADC_STATUS_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="group___a_d_c___c_o_n_t_r_o_l_1ga33ce323c3bbdc8a3f4e018f99a92b09d" refkind="member"><highlight class="preprocessor">#define<sp/>ADC_STATUS_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="group___a_d_c___c_o_n_t_r_o_l_1ga704a8cd95bdee94b0f61f06566062e8c" refkind="member"><highlight class="preprocessor">#define<sp/>ADC_STATUS_UNDEFINEDCMD<sp/><sp/><sp/><sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="comment">/*<sp/>Add<sp/>ADC_CMD_&lt;commands&gt;<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="_a_d_c_8h_1a7447d17264445ab6285ddab2bb794582" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_d_c___config__" kindref="compound">ADC_Config_</ref><sp/><sp/><sp/><sp/>*<ref refid="_a_d_c_8h_1a7447d17264445ab6285ddab2bb794582" kindref="member">ADC_Handle</ref>;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="struct_a_d_c___params__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_d_c___params__" kindref="compound">ADC_Params_</ref><sp/>{</highlight></codeline>
<codeline lineno="219" refid="struct_a_d_c___params___1aebd1fc4f1a4df4e863c431d646957d4c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*<ref refid="struct_a_d_c___params___1aebd1fc4f1a4df4e863c431d646957d4c" kindref="member">custom</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="221" refid="struct_a_d_c___params___1adc22c3a42a99d182c93cf8a4b270c0ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c___params___1adc22c3a42a99d182c93cf8a4b270c0ed" kindref="member">isProtected</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="228"><highlight class="normal">}<sp/><ref refid="_a_d_c_8h_1ae51280ff4e4f8a9d265888566dd750f4" kindref="member">ADC_Params</ref>;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="_a_d_c_8h_1a42f6ff234d06fb71647510e04be8a3bf" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_a_d_c_8h_1a42f6ff234d06fb71647510e04be8a3bf" kindref="member">ADC_CloseFxn</ref>)<sp/>(ADC_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="_a_d_c_8h_1af9c178e22b377d9cf5eb7d2a1a072f12" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_a_d_c_8h_1af9c178e22b377d9cf5eb7d2a1a072f12" kindref="member">ADC_ControlFxn</ref>)<sp/>(ADC_Handle<sp/>handle,<sp/>uint_fast16_t<sp/>cmd,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="_a_d_c_8h_1a552f2f752fbfc1b2af7551e55e392a42" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_a_d_c_8h_1a552f2f752fbfc1b2af7551e55e392a42" kindref="member">ADC_ConvertFxn</ref>)<sp/>(ADC_Handle<sp/>handle,<sp/>uint16_t<sp/>*value);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="_a_d_c_8h_1a2b16c6506209f209811e29909c11b19f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/>(*<ref refid="_a_d_c_8h_1a2b16c6506209f209811e29909c11b19f" kindref="member">ADC_ConvertToMicroVoltsFxn</ref>)<sp/>(ADC_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>adcValue);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="_a_d_c_8h_1af5f90e5268e88d0bb56d40d53542b1da" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_a_d_c_8h_1af5f90e5268e88d0bb56d40d53542b1da" kindref="member">ADC_InitFxn</ref>)<sp/>(ADC_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="_a_d_c_8h_1a753af5a6a07905e109bbdecb785ac44d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_a_d_c_8h_1a7447d17264445ab6285ddab2bb794582" kindref="member">ADC_Handle</ref><sp/>(*<ref refid="_a_d_c_8h_1a753af5a6a07905e109bbdecb785ac44d" kindref="member">ADC_OpenFxn</ref>)<sp/>(ADC_Handle<sp/>handle,<sp/><ref refid="struct_a_d_c___params__" kindref="compound">ADC_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="struct_a_d_c___fxn_table__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_d_c___fxn_table__" kindref="compound">ADC_FxnTable_</ref><sp/>{</highlight></codeline>
<codeline lineno="275" refid="struct_a_d_c___fxn_table___1a013b55eac41930ae9bd4ded2a44e19fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_8h_1a42f6ff234d06fb71647510e04be8a3bf" kindref="member">ADC_CloseFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c___fxn_table___1a013b55eac41930ae9bd4ded2a44e19fd" kindref="member">closeFxn</ref>;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="struct_a_d_c___fxn_table___1a0834a7c48a60457e6c013a825914ce94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_8h_1af9c178e22b377d9cf5eb7d2a1a072f12" kindref="member">ADC_ControlFxn</ref><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c___fxn_table___1a0834a7c48a60457e6c013a825914ce94" kindref="member">controlFxn</ref>;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="struct_a_d_c___fxn_table___1a4968533f9339dcaa64e2a1cd9eb61576" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_8h_1a552f2f752fbfc1b2af7551e55e392a42" kindref="member">ADC_ConvertFxn</ref><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c___fxn_table___1a4968533f9339dcaa64e2a1cd9eb61576" kindref="member">convertFxn</ref>;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="struct_a_d_c___fxn_table___1a7df02261449f0b7d1abbbd342db445e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_8h_1a2b16c6506209f209811e29909c11b19f" kindref="member">ADC_ConvertToMicroVoltsFxn</ref><sp/><ref refid="struct_a_d_c___fxn_table___1a7df02261449f0b7d1abbbd342db445e5" kindref="member">convertToMicroVolts</ref>;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="287" refid="struct_a_d_c___fxn_table___1a14edb3cecc926bacb5bb884aba898675" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_8h_1af5f90e5268e88d0bb56d40d53542b1da" kindref="member">ADC_InitFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c___fxn_table___1a14edb3cecc926bacb5bb884aba898675" kindref="member">initFxn</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="struct_a_d_c___fxn_table___1a6174715376238889602726da187a7a19" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_d_c_8h_1a753af5a6a07905e109bbdecb785ac44d" kindref="member">ADC_OpenFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c___fxn_table___1a6174715376238889602726da187a7a19" kindref="member">openFxn</ref>;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}<sp/><ref refid="_a_d_c_8h_1a83289c397fba93cf5ec98c40397ffdff" kindref="member">ADC_FxnTable</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="304" refid="struct_a_d_c___config__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_d_c___config__" kindref="compound">ADC_Config_</ref><sp/>{</highlight></codeline>
<codeline lineno="306" refid="struct_a_d_c___config___1a451827ead452ffc830675afbef573ee2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_d_c___fxn_table__" kindref="compound">ADC_FxnTable</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_a_d_c___config___1a451827ead452ffc830675afbef573ee2" kindref="member">fxnTablePtr</ref>;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="struct_a_d_c___config___1a42007f8f413bd43d28b7972b9e60bbc9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_a_d_c___config___1a42007f8f413bd43d28b7972b9e60bbc9" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="312" refid="struct_a_d_c___config___1a5acc18036a502afb93d1097a185e921f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_a_d_c___config___1a5acc18036a502afb93d1097a185e921f" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}<sp/><ref refid="_a_d_c_8h_1acde6feaa979f1952a70a38e9e1e1ea74" kindref="member">ADC_Config</ref>;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_d_c_8h_1adb49f74bdef5e3e45ee5de306c5dfc08" kindref="member">ADC_close</ref>(ADC_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_a_d_c_8h_1af4be7e5e4f5cc931f4501a542d689c32" kindref="member">ADC_control</ref>(ADC_Handle<sp/>handle,<sp/>uint_fast16_t<sp/>cmd,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_a_d_c_8h_1afcac5582b8be42a7740091d150aef05c" kindref="member">ADC_convert</ref>(ADC_Handle<sp/>handle,<sp/>uint16_t<sp/>*value);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="_a_d_c_8h_1aa1cd6feaa85ea5409dbe1769586bff20" kindref="member">ADC_convertToMicroVolts</ref>(ADC_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>adcValue);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_d_c_8h_1a4b4a2ddcb45df0c8497c47d4ed800e2a" kindref="member">ADC_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ADC_Handle<sp/><ref refid="_a_d_c_8h_1a1bfe07e93650e1288ba5fc6acc212c46" kindref="member">ADC_open</ref>(uint_least8_t<sp/>index,<sp/><ref refid="struct_a_d_c___params__" kindref="compound">ADC_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_d_c_8h_1a21df1c0987f5cecb660581ae081c4dc7" kindref="member">ADC_Params_init</ref>(<ref refid="struct_a_d_c___params__" kindref="compound">ADC_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_ADC__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_msp432/source/ti/drivers/ADC.h"/>
  </compounddef>
</doxygen>
