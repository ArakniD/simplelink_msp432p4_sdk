<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_timer_8h" kind="file" language="C++">
    <compoundname>Timer.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includedby refid="_timer_m_s_p432_8h" local="no">TimerMSP432.h</includedby>
    <incdepgraph>
      <node id="283">
        <label>stdint.h</label>
      </node>
      <node id="282">
        <label>Timer.h</label>
        <link refid="_timer_8h"/>
        <childnode refid="283" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="285">
        <label>TimerMSP432.h</label>
        <link refid="_timer_m_s_p432_8h"/>
        <childnode refid="286" relation="include">
        </childnode>
      </node>
      <node id="286">
        <label>CaptureMSP432.h</label>
        <link refid="_capture_m_s_p432_8h"/>
      </node>
      <node id="284">
        <label>Timer.h</label>
        <link refid="_timer_8h"/>
        <childnode refid="285" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_timer___params" prot="public">Timer_Params</innerclass>
    <innerclass refid="struct_timer___fxn_table" prot="public">Timer_FxnTable</innerclass>
    <innerclass refid="struct_timer___config__" prot="public">Timer_Config_</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_timer_8h_1ae07d04d02a6ddc6e02271084a71a365e" prot="public" static="no">
        <name>Timer_CMD_RESERVED</name>
        <initializer>(32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common Timer_control command code reservation offset. Timer driver implementations should offset command codes with Timer_CMD_RESERVED growing positively</para><para>Example implementation specific command codes: <programlisting><codeline><highlight class="normal">#define<sp/>TimerXYZ_CMD_COMMAND0<sp/><sp/><sp/><sp/><sp/><sp/>Timer_CMD_RESERVED<sp/>+<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>TimerXYZ_CMD_COMMAND1<sp/><sp/><sp/><sp/><sp/><sp/>Timer_CMD_RESERVED<sp/>+<sp/>1</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="193" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Timer.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_timer_8h_1a904cb478987bb4d1747d39280ab5727e" prot="public" static="no">
        <name>Timer_STATUS_RESERVED</name>
        <initializer>(-32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common Timer_control status code reservation offset. Timer driver implementations should offset status codes with Timer_STATUS_RESERVED growing negatively.</para><para>Example implementation specific status codes: <programlisting><codeline><highlight class="normal">#define<sp/>TimerXYZ_STATUS_ERROR0<sp/><sp/><sp/><sp/><sp/>Timer_STATUS_RESERVED<sp/>-<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>TimerXYZ_STATUS_ERROR1<sp/><sp/><sp/><sp/><sp/>Timer_STATUS_RESERVED<sp/>-<sp/>1</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="206" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Timer.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_timer_8h_1ac8686101a9b8fbee4eacc2b40ff708e7" prot="public" static="no">
        <name>Timer_STATUS_SUCCESS</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>Successful status code. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="211" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Timer.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_timer_8h_1aaa10cf27200f356b47e6f8a4088d37f8" prot="public" static="no">
        <name>Timer_STATUS_ERROR</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>Generic error status code. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="216" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Timer.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_timer_8h_1a45b37be0a813d7d501da46578fd5f6b2" prot="public" static="no">
        <name>Timer_STATUS_UNDEFINEDCMD</name>
        <initializer>(-2)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_timer_8h_1ab27a6e779a8f6872cff60fdeab349700" kindref="member">Timer_control()</ref> for undefined command codes. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_timer_8h_1ab27a6e779a8f6872cff60fdeab349700" kindref="member">Timer_control()</ref> returns Timer_STATUS_UNDEFINEDCMD if the control code is not recognized by the driver implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="225" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Timer.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_timer_8h_1ab0e86a066b5c68c55183cd680090a9b7" prot="public" static="no">
        <name>Timer_Mode</name>
        <enumvalue id="_timer_8h_1ab0e86a066b5c68c55183cd680090a9b7a01f0c06391bb2ea1ec530ba502a795a5" prot="public">
          <name>Timer_ONESHOT_CALLBACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Is a non-blocking call. After <ref refid="_timer_8h_1ae2f09cd2a7f7251e5fffade75378c332" kindref="member">Timer_start()</ref> is called, the calling thread will continue execution. When the timer interrupt is triggered, the specified callback function will be called. The timer will not generate another interrupt unless <ref refid="_timer_8h_1ae2f09cd2a7f7251e5fffade75378c332" kindref="member">Timer_start()</ref> is called again. Calling <ref refid="_timer_8h_1a3b951947aeec93b4610f87ba7b8a8621" kindref="member">Timer_stop()</ref> or <ref refid="_timer_8h_1a826779747913a65d4f683a627fd0759f" kindref="member">Timer_close()</ref> after <ref refid="_timer_8h_1ae2f09cd2a7f7251e5fffade75378c332" kindref="member">Timer_start()</ref> but, before the timer interrupt, will prevent the specified callback from ever being invoked. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_timer_8h_1ab0e86a066b5c68c55183cd680090a9b7ac93d728c52e809e9c179ff8da526ca00" prot="public">
          <name>Timer_ONESHOT_BLOCKING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Is a blocking call. A semaphore is used to block the calling thread&apos;s execution until the timer generates an interrupt. If <ref refid="_timer_8h_1a3b951947aeec93b4610f87ba7b8a8621" kindref="member">Timer_stop()</ref> is called, the calling thread will become unblockedimmediately. The behavior of the timer in this mode is similar to a sleep function. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_timer_8h_1ab0e86a066b5c68c55183cd680090a9b7ae8bfe2f9b37749ebc20b9905a459843b" prot="public">
          <name>Timer_CONTINUOUS_CALLBACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Is a non-blocking call. After <ref refid="_timer_8h_1ae2f09cd2a7f7251e5fffade75378c332" kindref="member">Timer_start()</ref> is called, the calling thread will continue execution. When the timer interrupt is triggered, the specified callback function will be called. The timer is automatically restarted and will continue to periodically generate interrupts until <ref refid="_timer_8h_1a3b951947aeec93b4610f87ba7b8a8621" kindref="member">Timer_stop()</ref> is called. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_timer_8h_1ab0e86a066b5c68c55183cd680090a9b7a90581a353ae32c561dfbc6c60b9ec49e" prot="public">
          <name>Timer_FREE_RUNNING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Is a non-blocking call. After <ref refid="_timer_8h_1ae2f09cd2a7f7251e5fffade75378c332" kindref="member">Timer_start()</ref> is called, the calling thread will continue execution. The timer will not generate an interrupt in this mode. The timer hardware will run until <ref refid="_timer_8h_1a3b951947aeec93b4610f87ba7b8a8621" kindref="member">Timer_stop()</ref> is called. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Timer mode settings. </para>        </briefdescription>
        <detaileddescription>
<para>This enum defines the timer modes that may be specified in <ref refid="struct_timer___params" kindref="compound">Timer_Params</ref>.</para><para>The timer driver supports four modes of operation which may be specified in the <ref refid="struct_timer___params" kindref="compound">Timer_Params</ref>. The device specific implementation may configure the timer peripheral as an up or down counter. In any case, <ref refid="_timer_8h_1a29ed26e8d3139f8ac21746c14d8b7abc" kindref="member">Timer_getCount()</ref> will return a value characteristic of an up counter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="242" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Timer.h" bodystart="242" bodyend="277"/>
      </memberdef>
      <memberdef kind="enum" id="_timer_8h_1ae5b37c2cc77a2a426ba45d2c8544d439" prot="public" static="no">
        <name>Timer_PeriodUnits</name>
        <enumvalue id="_timer_8h_1ae5b37c2cc77a2a426ba45d2c8544d439a03cfd261fae09a76a370acd8240181b1" prot="public">
          <name>Timer_PERIOD_US</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Period specified in micro seconds. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_timer_8h_1ae5b37c2cc77a2a426ba45d2c8544d439afe77ce02e894805812fd4b497b2ba41c" prot="public">
          <name>Timer_PERIOD_HZ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Period specified in hertz; interrupts per second. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_timer_8h_1ae5b37c2cc77a2a426ba45d2c8544d439ac22836849686dc6b10a6cdf2c689d142" prot="public">
          <name>Timer_PERIOD_COUNTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Period specified in ticks or counts. Varies from board to board. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Timer period unit enum. </para>        </briefdescription>
        <detaileddescription>
<para>This enum defines the units that may be specified for the period in <ref refid="struct_timer___params" kindref="compound">Timer_Params</ref>. This unit has no effect with Timer_getCounts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="285" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Timer.h" bodystart="285" bodyend="291"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_timer_8h_1a20f0a8998127dfcff910d15393f564a7" prot="public" static="no">
        <type>struct <ref refid="struct_timer___config__" kindref="compound">Timer_Config_</ref> *</type>
        <definition>typedef struct Timer_Config_* Timer_Handle</definition>
        <argsstring></argsstring>
        <name>Timer_Handle</name>
        <briefdescription>
<para>A handle that is returned from a <ref refid="_timer_8h_1a85fff65681abf4b7d65309aeac73c52c" kindref="member">Timer_open()</ref> call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="230" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Timer.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_timer_8h_1a051eb2c54ff6e078655c8bf575384cc4" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Timer_CallBackFxn) (Timer_Handle handle)</definition>
        <argsstring>)(Timer_Handle handle)</argsstring>
        <name>Timer_CallBackFxn</name>
        <briefdescription>
<para>Timer callback function. </para>        </briefdescription>
        <detaileddescription>
<para>User definable callback function prototype. The timer driver will call the defined function and pass in the timer driver&apos;s handle and the pointer to the user-specified the argument.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer_Handle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="302" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Timer.h" bodystart="302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_timer_8h_1a965461a1bad38b7c19e37e3b337096e0" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* Timer_ControlFxn) (Timer_Handle handle, uint_fast16_t cmd, void *arg)</definition>
        <argsstring>)(Timer_Handle handle, uint_fast16_t cmd, void *arg)</argsstring>
        <name>Timer_ControlFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_timer_8h_1ab27a6e779a8f6872cff60fdeab349700" kindref="member">Timer_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="330" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Timer.h" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_timer_8h_1a7418a314c1c025febfd2ea43fd55c740" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Timer_CloseFxn) (Timer_Handle handle)</definition>
        <argsstring>)(Timer_Handle handle)</argsstring>
        <name>Timer_CloseFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_timer_8h_1a826779747913a65d4f683a627fd0759f" kindref="member">Timer_close()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="337" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Timer.h" bodystart="337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_timer_8h_1a99b9c3330524ba12bdcf9f4159bac7dc" prot="public" static="no">
        <type>uint32_t(*</type>
        <definition>typedef uint32_t(* Timer_GetCountFxn) (Timer_Handle handle)</definition>
        <argsstring>)(Timer_Handle handle)</argsstring>
        <name>Timer_GetCountFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_timer_8h_1a29ed26e8d3139f8ac21746c14d8b7abc" kindref="member">Timer_getCount()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="343" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Timer.h" bodystart="343" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_timer_8h_1a67ab2fce64b3252b4499d22d89679604" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Timer_InitFxn) (Timer_Handle handle)</definition>
        <argsstring>)(Timer_Handle handle)</argsstring>
        <name>Timer_InitFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_timer_8h_1ace12508d33b354c0194b6f72cfc3bf12" kindref="member">Timer_init()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="349" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Timer.h" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_timer_8h_1ad833d510ee86d5b5c8cca2f23a9dbf9e" prot="public" static="no">
        <type><ref refid="_timer_8h_1a20f0a8998127dfcff910d15393f564a7" kindref="member">Timer_Handle</ref>(*</type>
        <definition>typedef Timer_Handle(* Timer_OpenFxn) (Timer_Handle handle, Timer_Params *params)</definition>
        <argsstring>)(Timer_Handle handle, Timer_Params *params)</argsstring>
        <name>Timer_OpenFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_timer_8h_1a85fff65681abf4b7d65309aeac73c52c" kindref="member">Timer_open()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="355" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Timer.h" bodystart="355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_timer_8h_1aa4cb84a48be15b66d2666239b06072d8" prot="public" static="no">
        <type>int32_t(*</type>
        <definition>typedef int32_t(* Timer_StartFxn) (Timer_Handle handle)</definition>
        <argsstring>)(Timer_Handle handle)</argsstring>
        <name>Timer_StartFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_timer_8h_1ae2f09cd2a7f7251e5fffade75378c332" kindref="member">Timer_start()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="362" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Timer.h" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_timer_8h_1a681079e95179fd797e04a7fc1e68bb6e" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Timer_StopFxn) (Timer_Handle handle)</definition>
        <argsstring>)(Timer_Handle handle)</argsstring>
        <name>Timer_StopFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_timer_8h_1a3b951947aeec93b4610f87ba7b8a8621" kindref="member">Timer_stop()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="368" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Timer.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_timer_8h_1a4c61ce326e1836cd5a5f9d9a728c1ac4" prot="public" static="no">
        <type>struct <ref refid="struct_timer___config__" kindref="compound">Timer_Config_</ref></type>
        <definition>typedef struct Timer_Config_  Timer_Config</definition>
        <argsstring></argsstring>
        <name>Timer_Config</name>
        <briefdescription>
<para>Timer Global configuration. </para>        </briefdescription>
        <detaileddescription>
<para>The Timer_Config structure contains a set of pointers used to characterize the timer driver implementation.</para><para>This structure needs to be defined before calling <ref refid="_timer_8h_1ace12508d33b354c0194b6f72cfc3bf12" kindref="member">Timer_init()</ref> and it must not be changed thereafter.</para><para><simplesect kind="see"><para><ref refid="_timer_8h_1ace12508d33b354c0194b6f72cfc3bf12" kindref="member">Timer_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="418" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_timer_8h_1a826779747913a65d4f683a627fd0759f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Timer_close</definition>
        <argsstring>(Timer_Handle handle)</argsstring>
        <name>Timer_close</name>
        <param>
          <type><ref refid="_timer_8h_1a20f0a8998127dfcff910d15393f564a7" kindref="member">Timer_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to close a timer. The corresponding timer to the Timer_Handle becomes an available timer resource. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_timer_8h_1a85fff65681abf4b7d65309aeac73c52c" kindref="member">Timer_open()</ref> has been called.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A Timer_Handle returned from <ref refid="_timer_8h_1a85fff65681abf4b7d65309aeac73c52c" kindref="member">Timer_open()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_timer_8h_1a85fff65681abf4b7d65309aeac73c52c" kindref="member">Timer_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="430" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_timer_8h_1ab27a6e779a8f6872cff60fdeab349700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t Timer_control</definition>
        <argsstring>(Timer_Handle handle, uint_fast16_t cmd, void *arg)</argsstring>
        <name>Timer_control</name>
        <param>
          <type><ref refid="_timer_8h_1a20f0a8998127dfcff910d15393f564a7" kindref="member">Timer_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint_fast16_t</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Function performs device specific features on a given Timer_Handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_timer_8h_1a85fff65681abf4b7d65309aeac73c52c" kindref="member">Timer_open()</ref> has been called.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A Timer_Handle returned from <ref refid="_timer_8h_1a85fff65681abf4b7d65309aeac73c52c" kindref="member">Timer_open()</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>A command value defined by the driver specific implementation.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">arg</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an optional R/W (read/write) argument that is accompanied with cmd.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_timer_8h_1ac8686101a9b8fbee4eacc2b40ff708e7" kindref="member">Timer_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The control call was successful. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_timer_8h_1aaa10cf27200f356b47e6f8a4088d37f8" kindref="member">Timer_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The control call failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_timer_8h_1a85fff65681abf4b7d65309aeac73c52c" kindref="member">Timer_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="451" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_timer_8h_1a29ed26e8d3139f8ac21746c14d8b7abc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t Timer_getCount</definition>
        <argsstring>(Timer_Handle handle)</argsstring>
        <name>Timer_getCount</name>
        <param>
          <type><ref refid="_timer_8h_1a20f0a8998127dfcff910d15393f564a7" kindref="member">Timer_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to get the current count of a timer. The value returned represents timer counts. The value returned is always characteristic of an up counter. This is true even if the timer peripheral is counting down. Some device specific implementations may employ a prescaler in addition to this timer count. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_timer_8h_1a85fff65681abf4b7d65309aeac73c52c" kindref="member">Timer_open()</ref> has been called.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A Timer_Handle returned from <ref refid="_timer_8h_1a85fff65681abf4b7d65309aeac73c52c" kindref="member">Timer_open()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_timer_8h_1a85fff65681abf4b7d65309aeac73c52c" kindref="member">Timer_open()</ref></para></simplesect>
<simplesect kind="return"><para>The current count of the timer in timer ticks. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="470" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_timer_8h_1ace12508d33b354c0194b6f72cfc3bf12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Timer_init</definition>
        <argsstring>(void)</argsstring>
        <name>Timer_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to initialize a timer module. This function will go through all available hardware resources and mark them as &quot;available&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The Timer_config structure must exist and be persistent before this function can be called. This function must also be called before any other timer driver APIs.</para></simplesect>
<simplesect kind="see"><para><ref refid="_timer_8h_1a85fff65681abf4b7d65309aeac73c52c" kindref="member">Timer_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="483" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_timer_8h_1a85fff65681abf4b7d65309aeac73c52c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_timer_8h_1a20f0a8998127dfcff910d15393f564a7" kindref="member">Timer_Handle</ref></type>
        <definition>Timer_Handle Timer_open</definition>
        <argsstring>(uint_least8_t index, Timer_Params *params)</argsstring>
        <name>Timer_open</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="struct_timer___params" kindref="compound">Timer_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize a given timer peripheral specified by the index argument. The <ref refid="struct_timer___params" kindref="compound">Timer_Params</ref> specifies which mode the timer will operate. The accuracy of the desired period is limited by the the clock. For example, a 100 MHz clock will have a tick resolution of 10 nanoseconds. This function takes care of timer resource allocation. If the particular timer is available to use, the timer driver owns it and returns a Timer_Handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_timer_8h_1ace12508d33b354c0194b6f72cfc3bf12" kindref="member">Timer_init()</ref> has been called.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical peripheral number for the timer indexed into the Timer_config table.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an parameter block, if NULL it will use default values.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="_timer_8h_1a20f0a8998127dfcff910d15393f564a7" kindref="member">Timer_Handle</ref> upon success or NULL. If the desired period results in overflow, or saturation, of the timer, NULL is returned. If the timer resource is already in use, NULL is returned.</para></simplesect>
<simplesect kind="see"><para><ref refid="_timer_8h_1ace12508d33b354c0194b6f72cfc3bf12" kindref="member">Timer_init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_timer_8h_1a826779747913a65d4f683a627fd0759f" kindref="member">Timer_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="509" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_timer_8h_1ae5309d35d8dfc6b2f0b24c7eec556dec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Timer_Params_init</definition>
        <argsstring>(Timer_Params *params)</argsstring>
        <name>Timer_Params_init</name>
        <param>
          <type><ref refid="struct_timer___params" kindref="compound">Timer_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize the <ref refid="struct_timer___params" kindref="compound">Timer_Params</ref> struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to <ref refid="struct_timer___params" kindref="compound">Timer_Params</ref> structure for initialization.</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults values are: timerMode = Timer_ONESHOT_BLOCKING periodUnit = Timer_PERIOD_COUNTS timerCallback = NULL period = (uint16_t) ~0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="523" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_timer_8h_1ae2f09cd2a7f7251e5fffade75378c332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t Timer_start</definition>
        <argsstring>(Timer_Handle handle)</argsstring>
        <name>Timer_start</name>
        <param>
          <type><ref refid="_timer_8h_1a20f0a8998127dfcff910d15393f564a7" kindref="member">Timer_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to start the timer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_timer_8h_1a85fff65681abf4b7d65309aeac73c52c" kindref="member">Timer_open()</ref> has been called.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A Timer_Handle returned from <ref refid="_timer_8h_1a85fff65681abf4b7d65309aeac73c52c" kindref="member">Timer_open()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_timer_8h_1ac8686101a9b8fbee4eacc2b40ff708e7" kindref="member">Timer_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The start call was successful. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_timer_8h_1aaa10cf27200f356b47e6f8a4088d37f8" kindref="member">Timer_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The start call failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_timer_8h_1a3b951947aeec93b4610f87ba7b8a8621" kindref="member">Timer_stop()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="537" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_timer_8h_1a3b951947aeec93b4610f87ba7b8a8621" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Timer_stop</definition>
        <argsstring>(Timer_Handle handle)</argsstring>
        <name>Timer_stop</name>
        <param>
          <type><ref refid="_timer_8h_1a20f0a8998127dfcff910d15393f564a7" kindref="member">Timer_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to stop timer. If the timer is already stopped, this function has no effect. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_timer_8h_1a85fff65681abf4b7d65309aeac73c52c" kindref="member">Timer_open()</ref> has been called.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A Timer_Handle returned from <ref refid="_timer_8h_1a85fff65681abf4b7d65309aeac73c52c" kindref="member">Timer_open()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_timer_8h_1ae2f09cd2a7f7251e5fffade75378c332" kindref="member">Timer_start()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h" line="549" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Timer driver. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para><anchor id="_timer_8h_1ti_drivers_Timer_Overview"/><heading level="1">Overview</heading>
</para><para>The timer driver allows you to measure elapsed time with simple and portable APIs.This driver does not have PWM or capture functionalities. These functionalities are addressed in both the capture and PWM driver.</para><para>The timer driver also handles the general purpose timer resource allocation. For each driver that requires use of a general purpose timer, it calls <ref refid="_timer_8h_1a85fff65681abf4b7d65309aeac73c52c" kindref="member">Timer_open()</ref> to occupy the specified timer, and calls <ref refid="_timer_8h_1a826779747913a65d4f683a627fd0759f" kindref="member">Timer_close()</ref> to release the occupied timer resource.</para><para><anchor id="_timer_8h_1ti_drivers_Timer_Usage"/><heading level="1">Usage</heading>
</para><para>This documentation provides a basic <ref refid="_timer_8h_1ti_drivers_Timer_Synopsis" kindref="member">usage summary</ref> and a set of <ref refid="_timer_8h_1ti_drivers_Timer_Examples" kindref="member">examples</ref> in the form of commented code fragments. Detailed descriptions of the APIs are provided in subsequent sections.</para><para><anchor id="_timer_8h_1ti_drivers_Timer_Synopsis"/><heading level="2">Synopsis</heading>
</para><para><anchor id="_timer_8h_1ti_drivers_Timer_Synopsis_Code"/><programlisting><codeline><highlight class="normal">//<sp/>Import<sp/>Timer<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/Timer.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Timer_Handle<sp/><sp/><sp/><sp/>handle;</highlight></codeline>
<codeline><highlight class="normal">Timer_Params<sp/><sp/><sp/><sp/>params;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Timer_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">params.periodUnits<sp/>=<sp/>Timer_PERIOD_HZ;</highlight></codeline>
<codeline><highlight class="normal">params.period<sp/>=<sp/>1000;</highlight></codeline>
<codeline><highlight class="normal">params.timerMode<sp/><sp/>=<sp/>Timer_CONTINUOUS_CALLBACK;</highlight></codeline>
<codeline><highlight class="normal">params.timerCallback<sp/>=<sp/>UserCallbackFunction;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>Timer_open(Board_TIMER0,<sp/>&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">@code</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Import<sp/>Timer<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/Timer.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Timer_Handle<sp/><sp/><sp/><sp/>handle;</highlight></codeline>
<codeline><highlight class="normal">Timer_Params<sp/><sp/><sp/><sp/>params;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>Timer<sp/>parameters</highlight></codeline>
<codeline><highlight class="normal">Timer_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">params.periodUnits<sp/>=<sp/>Timer_PERIOD_HZ;</highlight></codeline>
<codeline><highlight class="normal">params.period<sp/>=<sp/>1000;</highlight></codeline>
<codeline><highlight class="normal">params.timerMode<sp/><sp/>=<sp/>Timer_CONTINUOUS_CALLBACK;</highlight></codeline>
<codeline><highlight class="normal">params.timerCallback<sp/>=<sp/>UserCallbackFunction;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Open<sp/>Timer<sp/>instance</highlight></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>Timer_open(Board_TIMER0,<sp/>&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">sleep(10000);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Timer_stop(handle);</highlight></codeline>
</programlisting></para><para><hruler/>
 <anchor id="_timer_8h_1ti_drivers_Timer_Examples"/><heading level="1">Examples</heading>
</para><para><itemizedlist>
<listitem><para><ref refid="_timer_8h_1ti_drivers_Timer_Examples_open" kindref="member">Opening a Timer Instance</ref> </para></listitem>
<listitem><para><ref refid="_timer_8h_1ti_drivers_Timer_Examples_mode" kindref="member">Configuring Timer mode and period</ref></para></listitem>
</itemizedlist>
<anchor id="_timer_8h_1ti_drivers_Timer_Examples_open"/><heading level="2">Opening a Timer instance</heading>
</para><para><programlisting><codeline><highlight class="normal">Timer_Handle<sp/><sp/><sp/><sp/>handle;</highlight></codeline>
<codeline><highlight class="normal">Timer_Params<sp/><sp/><sp/><sp/>params;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Timer_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>Timer_open(Board_TIMER0,<sp/>&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(handle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Timer_open()<sp/>failed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><anchor id="_timer_8h_1ti_drivers_Timer_Examples_mode"/><heading level="2">Configuring Timer mode and period</heading>
</para><para>The following example code opens a timer in continuous callback mode. The period is set to 1000 Hz.</para><para><programlisting><codeline><highlight class="normal">Timer_Handle<sp/><sp/><sp/><sp/>handle;</highlight></codeline>
<codeline><highlight class="normal">Timer_Params<sp/><sp/><sp/><sp/>params;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Timer_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">params.periodUnits<sp/>=<sp/>Timer_PERIOD_HZ;</highlight></codeline>
<codeline><highlight class="normal">params.period<sp/>=<sp/>1000;</highlight></codeline>
<codeline><highlight class="normal">params.timerMode<sp/><sp/>=<sp/>Timer_CONTINUOUS_CALLBACK;</highlight></codeline>
<codeline><highlight class="normal">params.timerCallback<sp/>=<sp/>UserCallbackFunction;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>Timer_open(Board_TIMER0,<sp/>&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(handle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Timer_open()<sp/>failed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>=<sp/>Timer_start(handle);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(status<sp/>==<sp/>Timer_STATUS_ERROR)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//Timer_start()<sp/>failed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">sleep(10000);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Timer_stop(handle);</highlight></codeline>
</programlisting></para><para><heading level="3">Initializing the Timer Driver</heading>
</para><para><ref refid="_timer_8h_1ace12508d33b354c0194b6f72cfc3bf12" kindref="member">Timer_init()</ref> must be called before any other timer APIs. This function calls the device implementation&apos;s timer initialization function, for each element of Timer_config[].</para><para><hruler/>
 <anchor id="_timer_8h_1ti_drivers_Timer_Configuration"/><heading level="1">Configuration</heading>
</para><para>Refer to the <ref refid="index_1driver_configuration" kindref="member">Driver&apos;s Configuration</ref> section for driver configuration information. <hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016-2019,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*!*****************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Timer.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>Timer<sp/>driver</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_Timer_Overview</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Overview</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>timer<sp/>driver<sp/>allows<sp/>you<sp/>to<sp/>measure<sp/>elapsed<sp/>time<sp/>with<sp/>simple<sp/>and</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/>portable<sp/>APIs.This<sp/>driver<sp/>does<sp/>not<sp/>have<sp/>PWM<sp/>or<sp/>capture<sp/>functionalities.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/>These<sp/>functionalities<sp/>are<sp/>addressed<sp/>in<sp/>both<sp/>the<sp/>capture<sp/>and<sp/>PWM<sp/>driver.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>timer<sp/>driver<sp/>also<sp/>handles<sp/>the<sp/>general<sp/>purpose<sp/>timer<sp/>resource<sp/>allocation.</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/>For<sp/>each<sp/>driver<sp/>that<sp/>requires<sp/>use<sp/>of<sp/>a<sp/>general<sp/>purpose<sp/>timer,<sp/>it<sp/>calls</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/>Timer_open()<sp/>to<sp/>occupy<sp/>the<sp/>specified<sp/>timer,<sp/>and<sp/>calls<sp/>Timer_close()<sp/>to</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/>release<sp/>the<sp/>occupied<sp/>timer<sp/>resource.</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_Timer_Usage</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Usage</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>documentation<sp/>provides<sp/>a<sp/>basic<sp/>@ref<sp/>ti_drivers_Timer_Synopsis</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/>&quot;usage<sp/>summary&quot;<sp/>and<sp/>a<sp/>set<sp/>of<sp/>@ref<sp/>ti_drivers_Timer_Examples<sp/>&quot;examples&quot;</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/>in<sp/>the<sp/>form<sp/>of<sp/>commented<sp/>code<sp/>fragments.<sp/>Detailed<sp/>descriptions<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/>APIs<sp/>are<sp/>provided<sp/>in<sp/>subsequent<sp/>sections.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_Timer_Synopsis</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Synopsis</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_Timer_Synopsis_Code</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Import<sp/>Timer<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/Timer.h&gt;</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/>Timer_Handle<sp/><sp/><sp/><sp/>handle;</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/>Timer_Params<sp/><sp/><sp/><sp/>params;</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/><sp/>Timer_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/>params.periodUnits<sp/>=<sp/>Timer_PERIOD_HZ;</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/>params.period<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/>params.timerMode<sp/><sp/>=<sp/>Timer_CONTINUOUS_CALLBACK;</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/>params.timerCallback<sp/>=<sp/>UserCallbackFunction;</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/>handle<sp/>=<sp/>Timer_open(Board_TIMER0,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="72"><highlight class="comment"></highlight></codeline>
<codeline lineno="73"><highlight class="comment"></highlight></codeline>
<codeline lineno="74"><highlight class="comment"></highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Import<sp/>Timer<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/Timer.h&gt;</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/>Timer_Handle<sp/><sp/><sp/><sp/>handle;</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/>Timer_Params<sp/><sp/><sp/><sp/>params;</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Initialize<sp/>Timer<sp/>parameters</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/>Timer_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/>params.periodUnits<sp/>=<sp/>Timer_PERIOD_HZ;</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/>params.period<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/>params.timerMode<sp/><sp/>=<sp/>Timer_CONTINUOUS_CALLBACK;</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/>params.timerCallback<sp/>=<sp/>UserCallbackFunction;</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Open<sp/>Timer<sp/>instance</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/>handle<sp/>=<sp/>Timer_open(Board_TIMER0,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/>sleep(10000);</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/><sp/>Timer_stop(handle);</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_Timer_Examples</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Examples</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>@ref<sp/>ti_drivers_Timer_Examples_open<sp/>&quot;Opening<sp/>a<sp/>Timer<sp/>Instance&quot;</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>@ref<sp/>ti_drivers_Timer_Examples_mode<sp/>&quot;Configuring<sp/>Timer<sp/>mode<sp/>and<sp/>period&quot;</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_Timer_Examples_open</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Opening<sp/>a<sp/>Timer<sp/>instance</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/>Timer_Handle<sp/><sp/><sp/><sp/>handle;</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/>Timer_Params<sp/><sp/><sp/><sp/>params;</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/><sp/>Timer_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/><sp/>handle<sp/>=<sp/>Timer_open(Board_TIMER0,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(handle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Timer_open()<sp/>failed</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>@endcode</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_Timer_Examples_mode</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/>##Configuring<sp/>Timer<sp/>mode<sp/>and<sp/>period</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>following<sp/>example<sp/>code<sp/>opens<sp/>a<sp/>timer<sp/>in<sp/>continuous<sp/>callback<sp/>mode.<sp/>The</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/><sp/>period<sp/>is<sp/>set<sp/>to<sp/>1000<sp/>Hz.</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/><sp/>Timer_Handle<sp/><sp/><sp/><sp/>handle;</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/><sp/>Timer_Params<sp/><sp/><sp/><sp/>params;</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/><sp/>Timer_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/><sp/>params.periodUnits<sp/>=<sp/>Timer_PERIOD_HZ;</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/><sp/>params.period<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/><sp/>params.timerMode<sp/><sp/>=<sp/>Timer_CONTINUOUS_CALLBACK;</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/><sp/>params.timerCallback<sp/>=<sp/>UserCallbackFunction;</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/><sp/>handle<sp/>=<sp/>Timer_open(Board_TIMER0,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(handle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Timer_open()<sp/>failed</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/><sp/>status<sp/>=<sp/>Timer_start(handle);</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(status<sp/>==<sp/>Timer_STATUS_ERROR)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//Timer_start()<sp/>failed</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/><sp/>sleep(10000);</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/><sp/>Timer_stop(handle);</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Initializing<sp/>the<sp/>Timer<sp/>Driver<sp/>#</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/><sp/>Timer_init()<sp/>must<sp/>be<sp/>called<sp/>before<sp/>any<sp/>other<sp/>timer<sp/>APIs.<sp/>This<sp/>function</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/><sp/>calls<sp/>the<sp/>device<sp/>implementation&apos;s<sp/>timer<sp/>initialization<sp/>function,<sp/>for<sp/>each</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/><sp/>element<sp/>of<sp/>Timer_config[].</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_Timer_Configuration</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Configuration</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/><sp/>Refer<sp/>to<sp/>the<sp/>@ref<sp/>driver_configuration<sp/>&quot;Driver&apos;s<sp/>Configuration&quot;<sp/>section</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/><sp/>for<sp/>driver<sp/>configuration<sp/>information.</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="169"><highlight class="comment">*******************************************************************************</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_Timer__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_Timer__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="_timer_8h_1ae07d04d02a6ddc6e02271084a71a365e" refkind="member"><highlight class="preprocessor">#define<sp/>Timer_CMD_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="_timer_8h_1a904cb478987bb4d1747d39280ab5727e" refkind="member"><highlight class="preprocessor">#define<sp/>Timer_STATUS_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="_timer_8h_1ac8686101a9b8fbee4eacc2b40ff708e7" refkind="member"><highlight class="preprocessor">#define<sp/>Timer_STATUS_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="_timer_8h_1aaa10cf27200f356b47e6f8a4088d37f8" refkind="member"><highlight class="preprocessor">#define<sp/>Timer_STATUS_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="_timer_8h_1a45b37be0a813d7d501da46578fd5f6b2" refkind="member"><highlight class="preprocessor">#define<sp/>Timer_STATUS_UNDEFINEDCMD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="_timer_8h_1a20f0a8998127dfcff910d15393f564a7" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_timer___config__" kindref="compound">Timer_Config_</ref><sp/>*<ref refid="_timer_8h_1a20f0a8998127dfcff910d15393f564a7" kindref="member">Timer_Handle</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="_timer_8h_1ab0e86a066b5c68c55183cd680090a9b7" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="243" refid="_timer_8h_1ab0e86a066b5c68c55183cd680090a9b7a01f0c06391bb2ea1ec530ba502a795a5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_timer_8h_1ab0e86a066b5c68c55183cd680090a9b7a01f0c06391bb2ea1ec530ba502a795a5" kindref="member">Timer_ONESHOT_CALLBACK</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="254" refid="_timer_8h_1ab0e86a066b5c68c55183cd680090a9b7ac93d728c52e809e9c179ff8da526ca00" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_timer_8h_1ab0e86a066b5c68c55183cd680090a9b7ac93d728c52e809e9c179ff8da526ca00" kindref="member">Timer_ONESHOT_BLOCKING</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="262" refid="_timer_8h_1ab0e86a066b5c68c55183cd680090a9b7ae8bfe2f9b37749ebc20b9905a459843b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_timer_8h_1ab0e86a066b5c68c55183cd680090a9b7ae8bfe2f9b37749ebc20b9905a459843b" kindref="member">Timer_CONTINUOUS_CALLBACK</ref>,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="271" refid="_timer_8h_1ab0e86a066b5c68c55183cd680090a9b7a90581a353ae32c561dfbc6c60b9ec49e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_timer_8h_1ab0e86a066b5c68c55183cd680090a9b7a90581a353ae32c561dfbc6c60b9ec49e" kindref="member">Timer_FREE_RUNNING</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="277"><highlight class="normal">}<sp/><ref refid="_timer_8h_1ab0e86a066b5c68c55183cd680090a9b7" kindref="member">Timer_Mode</ref>;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="_timer_8h_1ae5b37c2cc77a2a426ba45d2c8544d439" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="286" refid="_timer_8h_1ae5b37c2cc77a2a426ba45d2c8544d439a03cfd261fae09a76a370acd8240181b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_timer_8h_1ae5b37c2cc77a2a426ba45d2c8544d439a03cfd261fae09a76a370acd8240181b1" kindref="member">Timer_PERIOD_US</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="287" refid="_timer_8h_1ae5b37c2cc77a2a426ba45d2c8544d439afe77ce02e894805812fd4b497b2ba41c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_timer_8h_1ae5b37c2cc77a2a426ba45d2c8544d439afe77ce02e894805812fd4b497b2ba41c" kindref="member">Timer_PERIOD_HZ</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="289" refid="_timer_8h_1ae5b37c2cc77a2a426ba45d2c8544d439ac22836849686dc6b10a6cdf2c689d142" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_timer_8h_1ae5b37c2cc77a2a426ba45d2c8544d439ac22836849686dc6b10a6cdf2c689d142" kindref="member">Timer_PERIOD_COUNTS</ref><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="291"><highlight class="normal">}<sp/><ref refid="_timer_8h_1ae5b37c2cc77a2a426ba45d2c8544d439" kindref="member">Timer_PeriodUnits</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="_timer_8h_1a051eb2c54ff6e078655c8bf575384cc4" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_timer_8h_1a051eb2c54ff6e078655c8bf575384cc4" kindref="member">Timer_CallBackFxn</ref>)(Timer_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="struct_timer___params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="313" refid="struct_timer___params_1a2ef959938ec2dd893d67b0c7a41ac02f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Timer_Mode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_timer___params_1a2ef959938ec2dd893d67b0c7a41ac02f" kindref="member">timerMode</ref>;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="struct_timer___params_1af481da8a02e76c8584c39242cc8aa1a5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Timer_PeriodUnits<sp/><sp/><sp/><sp/><ref refid="struct_timer___params_1af481da8a02e76c8584c39242cc8aa1a5" kindref="member">periodUnits</ref>;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="struct_timer___params_1a922a81e82f3cd1af089cc541c85b7098" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_timer_8h_1a051eb2c54ff6e078655c8bf575384cc4" kindref="member">Timer_CallBackFxn</ref><sp/><sp/><sp/><sp/><ref refid="struct_timer___params_1a922a81e82f3cd1af089cc541c85b7098" kindref="member">timerCallback</ref>;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="323" refid="struct_timer___params_1a3497c8cb00dc660b2de92461de7e5c19" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_timer___params_1a3497c8cb00dc660b2de92461de7e5c19" kindref="member">period</ref>;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}<sp/><ref refid="struct_timer___params" kindref="compound">Timer_Params</ref>;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="330" refid="_timer_8h_1a965461a1bad38b7c19e37e3b337096e0" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_timer_8h_1a965461a1bad38b7c19e37e3b337096e0" kindref="member">Timer_ControlFxn</ref>)(Timer_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>uint_fast16_t<sp/>cmd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="_timer_8h_1a7418a314c1c025febfd2ea43fd55c740" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_timer_8h_1a7418a314c1c025febfd2ea43fd55c740" kindref="member">Timer_CloseFxn</ref>)(Timer_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="343" refid="_timer_8h_1a99b9c3330524ba12bdcf9f4159bac7dc" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/>(*<ref refid="_timer_8h_1a99b9c3330524ba12bdcf9f4159bac7dc" kindref="member">Timer_GetCountFxn</ref>)(Timer_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="349" refid="_timer_8h_1a67ab2fce64b3252b4499d22d89679604" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_timer_8h_1a67ab2fce64b3252b4499d22d89679604" kindref="member">Timer_InitFxn</ref>)(Timer_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="355" refid="_timer_8h_1ad833d510ee86d5b5c8cca2f23a9dbf9e" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_timer_8h_1a20f0a8998127dfcff910d15393f564a7" kindref="member">Timer_Handle</ref><sp/>(*<ref refid="_timer_8h_1ad833d510ee86d5b5c8cca2f23a9dbf9e" kindref="member">Timer_OpenFxn</ref>)(Timer_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_timer___params" kindref="compound">Timer_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="362" refid="_timer_8h_1aa4cb84a48be15b66d2666239b06072d8" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int32_t<sp/>(*<ref refid="_timer_8h_1aa4cb84a48be15b66d2666239b06072d8" kindref="member">Timer_StartFxn</ref>)(Timer_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="_timer_8h_1a681079e95179fd797e04a7fc1e68bb6e" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_timer_8h_1a681079e95179fd797e04a7fc1e68bb6e" kindref="member">Timer_StopFxn</ref>)(Timer_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="375" refid="struct_timer___fxn_table" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="377" refid="struct_timer___fxn_table_1a46a749abec6cac2a1c7c9a1c01be8454" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_timer_8h_1a7418a314c1c025febfd2ea43fd55c740" kindref="member">Timer_CloseFxn</ref><sp/><ref refid="struct_timer___fxn_table_1a46a749abec6cac2a1c7c9a1c01be8454" kindref="member">closeFxn</ref>;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="380" refid="struct_timer___fxn_table_1a24a2d17932b03c91f58d3da49ba87b65" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_timer_8h_1a965461a1bad38b7c19e37e3b337096e0" kindref="member">Timer_ControlFxn</ref><sp/><ref refid="struct_timer___fxn_table_1a24a2d17932b03c91f58d3da49ba87b65" kindref="member">controlFxn</ref>;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="383" refid="struct_timer___fxn_table_1a35b072602f29f9a162d7959f660def1a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_timer_8h_1a99b9c3330524ba12bdcf9f4159bac7dc" kindref="member">Timer_GetCountFxn</ref><sp/><ref refid="struct_timer___fxn_table_1a35b072602f29f9a162d7959f660def1a" kindref="member">getCountFxn</ref>;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="386" refid="struct_timer___fxn_table_1a078c35072648bbf61d23622196646c5d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_timer_8h_1a67ab2fce64b3252b4499d22d89679604" kindref="member">Timer_InitFxn</ref><sp/><ref refid="struct_timer___fxn_table_1a078c35072648bbf61d23622196646c5d" kindref="member">initFxn</ref>;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="struct_timer___fxn_table_1adaf989ca314f706c4289653857349a47" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_timer_8h_1ad833d510ee86d5b5c8cca2f23a9dbf9e" kindref="member">Timer_OpenFxn</ref><sp/><ref refid="struct_timer___fxn_table_1adaf989ca314f706c4289653857349a47" kindref="member">openFxn</ref>;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="392" refid="struct_timer___fxn_table_1a26301dd61833f80d77f2b6cb53ce9297" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_timer_8h_1aa4cb84a48be15b66d2666239b06072d8" kindref="member">Timer_StartFxn</ref><sp/><ref refid="struct_timer___fxn_table_1a26301dd61833f80d77f2b6cb53ce9297" kindref="member">startFxn</ref>;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="395" refid="struct_timer___fxn_table_1a8757d775fbe0987c614d7ad02edd8fd5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_timer_8h_1a681079e95179fd797e04a7fc1e68bb6e" kindref="member">Timer_StopFxn</ref><sp/><ref refid="struct_timer___fxn_table_1a8757d775fbe0987c614d7ad02edd8fd5" kindref="member">stopFxn</ref>;</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}<sp/><ref refid="struct_timer___fxn_table" kindref="compound">Timer_FxnTable</ref>;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="409" refid="struct_timer___config__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_timer___config__" kindref="compound">Timer_Config_</ref><sp/>{</highlight></codeline>
<codeline lineno="411" refid="struct_timer___config___1ad729580a94414d8dddf43fa91e2a570a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_timer___fxn_table" kindref="compound">Timer_FxnTable</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_timer___config___1ad729580a94414d8dddf43fa91e2a570a" kindref="member">fxnTablePtr</ref>;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="414" refid="struct_timer___config___1adbf31e859dbb61b99d9ca845ab9923da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_timer___config___1adbf31e859dbb61b99d9ca845ab9923da" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="struct_timer___config___1aec53bedfd4e8ccfc12b337ea13a2914e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_timer___config___1aec53bedfd4e8ccfc12b337ea13a2914e" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}<sp/><ref refid="_timer_8h_1a4c61ce326e1836cd5a5f9d9a728c1ac4" kindref="member">Timer_Config</ref>;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_timer_8h_1a826779747913a65d4f683a627fd0759f" kindref="member">Timer_close</ref>(Timer_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_timer_8h_1ab27a6e779a8f6872cff60fdeab349700" kindref="member">Timer_control</ref>(Timer_Handle<sp/>handle,<sp/>uint_fast16_t<sp/>cmd,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="_timer_8h_1a29ed26e8d3139f8ac21746c14d8b7abc" kindref="member">Timer_getCount</ref>(Timer_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_timer_8h_1ace12508d33b354c0194b6f72cfc3bf12" kindref="member">Timer_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Timer_Handle<sp/><ref refid="_timer_8h_1a85fff65681abf4b7d65309aeac73c52c" kindref="member">Timer_open</ref>(uint_least8_t<sp/>index,<sp/><ref refid="struct_timer___params" kindref="compound">Timer_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_timer_8h_1ae5309d35d8dfc6b2f0b24c7eec556dec" kindref="member">Timer_Params_init</ref>(<ref refid="struct_timer___params" kindref="compound">Timer_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int32_t<sp/><ref refid="_timer_8h_1ae2f09cd2a7f7251e5fffade75378c332" kindref="member">Timer_start</ref>(Timer_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_timer_8h_1a3b951947aeec93b4610f87ba7b8a8621" kindref="member">Timer_stop</ref>(Timer_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_Timer__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_msp432/source/ti/drivers/Timer.h"/>
  </compounddef>
</doxygen>
