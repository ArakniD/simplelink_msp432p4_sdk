<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_watchdog_8h" kind="file" language="C++">
    <compoundname>Watchdog.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includedby refid="_watchdog_m_s_p432_8h" local="no">WatchdogMSP432.h</includedby>
    <incdepgraph>
      <node id="336">
        <label>stdint.h</label>
      </node>
      <node id="335">
        <label>Watchdog.h</label>
        <link refid="_watchdog_8h"/>
        <childnode refid="336" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="338">
        <label>WatchdogMSP432.h</label>
        <link refid="_watchdog_m_s_p432_8h"/>
      </node>
      <node id="337">
        <label>Watchdog.h</label>
        <link refid="_watchdog_8h"/>
        <childnode refid="338" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_watchdog___params__" prot="public">Watchdog_Params_</innerclass>
    <innerclass refid="struct_watchdog___fxn_table__" prot="public">Watchdog_FxnTable_</innerclass>
    <innerclass refid="struct_watchdog___config__" prot="public">Watchdog_Config_</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___watchdog___c_o_n_t_r_o_l_1ga4d1b16e67bf555b8fe49182eb8a28b97" prot="public" static="no">
        <name>Watchdog_CMD_RESERVED</name>
        <initializer>(32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common Watchdog_control command code reservation offset. Watchdog driver implementations should offset command codes with Watchdog_CMD_RESERVED growing positively</para><para>Example implementation specific command codes: <programlisting><codeline><highlight class="normal">#define<sp/>WatchdogXYZ_CMD_COMMAND0<sp/><sp/><sp/><sp/><sp/>Watchdog_CMD_RESERVED<sp/>+<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>WatchdogXYZ_CMD_COMMAND1<sp/><sp/><sp/><sp/><sp/>Watchdog_CMD_RESERVED<sp/>+<sp/>1</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="179" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___watchdog___c_o_n_t_r_o_l_1gaf7d1273929fd4d1f630c31b90def9684" prot="public" static="no">
        <name>Watchdog_STATUS_RESERVED</name>
        <initializer>(-32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common Watchdog_control status code reservation offset. Watchdog driver implementations should offset status codes with Watchdog_STATUS_RESERVED growing negatively.</para><para>Example implementation specific status codes: <programlisting><codeline><highlight class="normal">#define<sp/>WatchdogXYZ_STATUS_ERROR0<sp/><sp/><sp/><sp/>Watchdog_STATUS_RESERVED<sp/>-<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>WatchdogXYZ_STATUS_ERROR1<sp/><sp/><sp/><sp/>Watchdog_STATUS_RESERVED<sp/>-<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>WatchdogXYZ_STATUS_ERROR2<sp/><sp/><sp/><sp/>Watchdog_STATUS_RESERVED<sp/>-<sp/>2</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="193" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___watchdog___s_t_a_t_u_s_1gaa8dd490de97398b1da33798d8e54b53f" prot="public" static="no">
        <name>Watchdog_STATUS_SUCCESS</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>Successful status code returned by <ref refid="_watchdog_8h_1a513c121c62f277318a7c35b0b2bdc869" kindref="member">Watchdog_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_watchdog_8h_1a513c121c62f277318a7c35b0b2bdc869" kindref="member">Watchdog_control()</ref> returns Watchdog_STATUS_SUCCESS if the control code was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="208" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___watchdog___s_t_a_t_u_s_1ga7cc28c1119ebecae88a5ae0735228489" prot="public" static="no">
        <name>Watchdog_STATUS_ERROR</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>Generic error status code returned by <ref refid="_watchdog_8h_1a513c121c62f277318a7c35b0b2bdc869" kindref="member">Watchdog_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_watchdog_8h_1a513c121c62f277318a7c35b0b2bdc869" kindref="member">Watchdog_control()</ref> returns Watchdog_STATUS_ERROR if the control code was not executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="216" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___watchdog___s_t_a_t_u_s_1ga589be79a7f8ce642863f231e1dae7577" prot="public" static="no">
        <name>Watchdog_STATUS_UNDEFINEDCMD</name>
        <initializer>(-2)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_watchdog_8h_1a513c121c62f277318a7c35b0b2bdc869" kindref="member">Watchdog_control()</ref> for undefined command codes. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_watchdog_8h_1a513c121c62f277318a7c35b0b2bdc869" kindref="member">Watchdog_control()</ref> returns Watchdog_STATUS_UNDEFINEDCMD if the control code is not recognized by the driver implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="225" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___watchdog___s_t_a_t_u_s_1ga4f4ea82c3209f4acc21607ee0e9e053c" prot="public" static="no">
        <name>Watchdog_STATUS_UNSUPPORTED</name>
        <initializer>(-3)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_watchdog_8h_1a63ea82dda83e42e236578b9810e56880" kindref="member">Watchdog_setReload()</ref> for drivers which do not support the aforementioned API. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_watchdog_8h_1a63ea82dda83e42e236578b9810e56880" kindref="member">Watchdog_setReload()</ref> returns Watchdog_STATUS_UNSUPPORTED if the driver implementation does not support the aforementioned API. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="234" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_watchdog_8h_1ab7cc980c0ab934800cf77f768c2ac5d6" prot="public" static="no">
        <name>Watchdog_DebugMode_</name>
        <enumvalue id="_watchdog_8h_1ab7cc980c0ab934800cf77f768c2ac5d6a787c87976091a6f294070dadd1747ed0" prot="public">
          <name>Watchdog_DEBUG_STALL_ON</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Watchdog will be stalled at breakpoints </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_watchdog_8h_1ab7cc980c0ab934800cf77f768c2ac5d6a745be9d89bc0c15eda5c4082020f8bb2" prot="public">
          <name>Watchdog_DEBUG_STALL_OFF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Watchdog will keep running at breakpoints </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Watchdog debug stall settings. </para>        </briefdescription>
        <detaileddescription>
<para>This enumeration defines the debug stall modes for the Watchdog. On some targets, the Watchdog timer will continue to count down while a debugging session is halted. To avoid unwanted resets, the Watchdog can be set to stall while the processor is stopped by the debugger. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="264" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="enum" id="_watchdog_8h_1a14a5aaacb2ab91f555ec55e349d9546f" prot="public" static="no">
        <name>Watchdog_ResetMode_</name>
        <enumvalue id="_watchdog_8h_1a14a5aaacb2ab91f555ec55e349d9546fa78ba6b49345f0116143f4d4e7a9ec488" prot="public">
          <name>Watchdog_RESET_OFF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Timeouts generate interrupts only </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_watchdog_8h_1a14a5aaacb2ab91f555ec55e349d9546faafccd6330c396d9ffc2786524625bf1f" prot="public">
          <name>Watchdog_RESET_ON</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Generates reset after timeout </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Watchdog reset mode settings. </para>        </briefdescription>
        <detaileddescription>
<para>This enumeration defines the reset modes for the Watchdog. The Watchdog can be configured to either generate a reset upon timeout or simply produce a periodic interrupt. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="276" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" bodystart="276" bodyend="279"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_watchdog_8h_1ab9ae92ba1721e383cedcff2eea73d9ca" prot="public" static="no">
        <type>struct <ref refid="struct_watchdog___config__" kindref="compound">Watchdog_Config_</ref> *</type>
        <definition>typedef struct Watchdog_Config_* Watchdog_Handle</definition>
        <argsstring></argsstring>
        <name>Watchdog_Handle</name>
        <briefdescription>
<para>Watchdog Handle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="254" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_watchdog_8h_1a9e44509e7d94eac768c6f33e6c85e038" prot="public" static="no">
        <type>enum <ref refid="_watchdog_8h_1ab7cc980c0ab934800cf77f768c2ac5d6" kindref="member">Watchdog_DebugMode_</ref></type>
        <definition>typedef enum Watchdog_DebugMode_  Watchdog_DebugMode</definition>
        <argsstring></argsstring>
        <name>Watchdog_DebugMode</name>
        <briefdescription>
<para>Watchdog debug stall settings. </para>        </briefdescription>
        <detaileddescription>
<para>This enumeration defines the debug stall modes for the Watchdog. On some targets, the Watchdog timer will continue to count down while a debugging session is halted. To avoid unwanted resets, the Watchdog can be set to stall while the processor is stopped by the debugger. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="267" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_watchdog_8h_1afb96d6e8d483083ce85f89d67341d866" prot="public" static="no">
        <type>enum <ref refid="_watchdog_8h_1a14a5aaacb2ab91f555ec55e349d9546f" kindref="member">Watchdog_ResetMode_</ref></type>
        <definition>typedef enum Watchdog_ResetMode_  Watchdog_ResetMode</definition>
        <argsstring></argsstring>
        <name>Watchdog_ResetMode</name>
        <briefdescription>
<para>Watchdog reset mode settings. </para>        </briefdescription>
        <detaileddescription>
<para>This enumeration defines the reset modes for the Watchdog. The Watchdog can be configured to either generate a reset upon timeout or simply produce a periodic interrupt. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_watchdog_8h_1a2d201451a10bb67efc3e222ac7f099c1" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Watchdog_Callback) (uintptr_t handle)</definition>
        <argsstring>)(uintptr_t handle)</argsstring>
        <name>Watchdog_Callback</name>
        <briefdescription>
<para>Watchdog callback pointer. </para>        </briefdescription>
        <detaileddescription>
<para>This is the typedef for the function pointer that will allow a callback function to be specified in the <ref refid="_watchdog_8h_1a24c29fb9023f176ac6b7810ab149e67c" kindref="member">Watchdog_Params</ref> structure. The function will take a <ref refid="_watchdog_8h_1ab9ae92ba1721e383cedcff2eea73d9ca" kindref="member">Watchdog_Handle</ref> of the Watchdog causing the interrupt (cast as a uintptr_t) as an argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="289" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_watchdog_8h_1a24c29fb9023f176ac6b7810ab149e67c" prot="public" static="no">
        <type>struct <ref refid="struct_watchdog___params__" kindref="compound">Watchdog_Params_</ref></type>
        <definition>typedef struct Watchdog_Params_  Watchdog_Params</definition>
        <argsstring></argsstring>
        <name>Watchdog_Params</name>
        <briefdescription>
<para>Watchdog Parameters. </para>        </briefdescription>
        <detaileddescription>
<para>Watchdog parameters are used to with the <ref refid="_watchdog_8h_1a26795f67f599b74de830ca7bf36bdced" kindref="member">Watchdog_open()</ref> call. Default values for these parameters are set using <ref refid="_watchdog_8h_1a6a6f54cfdac33d3bf33464a212262afc" kindref="member">Watchdog_Params_init()</ref>.</para><para><simplesect kind="see"><para><ref refid="_watchdog_8h_1a6a6f54cfdac33d3bf33464a212262afc" kindref="member">Watchdog_Params_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="308" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_watchdog_8h_1a0315c4931ba68423472f47c23c86f296" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Watchdog_ClearFxn) (Watchdog_Handle handle)</definition>
        <argsstring>)(Watchdog_Handle handle)</argsstring>
        <name>Watchdog_ClearFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_watchdog_8h_1a396decd6b1807db10c636f9987c3be4c" kindref="member">Watchdog_clear()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="314" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" bodystart="314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_watchdog_8h_1a2d13686bc3dd7fdb05ec97d63be489ee" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Watchdog_CloseFxn) (Watchdog_Handle handle)</definition>
        <argsstring>)(Watchdog_Handle handle)</argsstring>
        <name>Watchdog_CloseFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_watchdog_8h_1a1c0dfea7011b06f303d01afb631ffbdd" kindref="member">Watchdog_close()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="320" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_watchdog_8h_1aefe9152c3cd5afd45d7ef61d398169a1" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* Watchdog_ControlFxn) (Watchdog_Handle handle, uint_fast16_t cmd, void *arg)</definition>
        <argsstring>)(Watchdog_Handle handle, uint_fast16_t cmd, void *arg)</argsstring>
        <name>Watchdog_ControlFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_watchdog_8h_1a513c121c62f277318a7c35b0b2bdc869" kindref="member">Watchdog_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="326" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_watchdog_8h_1a6401b1a23d9048efb4ed69a074ea60f9" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Watchdog_InitFxn) (Watchdog_Handle handle)</definition>
        <argsstring>)(Watchdog_Handle handle)</argsstring>
        <name>Watchdog_InitFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_watchdog_8h_1afaadfb59be17661ae95562f2081355e7" kindref="member">Watchdog_init()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="334" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_watchdog_8h_1a05ae778da809a34e4d84c95d35ba5f58" prot="public" static="no">
        <type><ref refid="_watchdog_8h_1ab9ae92ba1721e383cedcff2eea73d9ca" kindref="member">Watchdog_Handle</ref>(*</type>
        <definition>typedef Watchdog_Handle(* Watchdog_OpenFxn) (Watchdog_Handle handle, Watchdog_Params *params)</definition>
        <argsstring>)(Watchdog_Handle handle, Watchdog_Params *params)</argsstring>
        <name>Watchdog_OpenFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_watchdog_8h_1a26795f67f599b74de830ca7bf36bdced" kindref="member">Watchdog_open()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="340" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" bodystart="340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_watchdog_8h_1afced0e92286fe54ad1fe51c496da7a0c" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* Watchdog_SetReloadFxn) (Watchdog_Handle handle, uint32_t ticks)</definition>
        <argsstring>)(Watchdog_Handle handle, uint32_t ticks)</argsstring>
        <name>Watchdog_SetReloadFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_watchdog_8h_1a63ea82dda83e42e236578b9810e56880" kindref="member">Watchdog_setReload()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="347" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" bodystart="347" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_watchdog_8h_1a18910effbe7c123ab85385e9b34ac54f" prot="public" static="no">
        <type>uint32_t(*</type>
        <definition>typedef uint32_t(* Watchdog_ConvertMsToTicksFxn) (Watchdog_Handle handle, uint32_t milliseconds)</definition>
        <argsstring>)(Watchdog_Handle handle, uint32_t milliseconds)</argsstring>
        <name>Watchdog_ConvertMsToTicksFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_watchdog_8h_1a18910effbe7c123ab85385e9b34ac54f" kindref="member">Watchdog_ConvertMsToTicksFxn()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="354" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" bodystart="354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_watchdog_8h_1aa8370f2ff642b6a253e37c0b7b44fbed" prot="public" static="no">
        <type>struct <ref refid="struct_watchdog___fxn_table__" kindref="compound">Watchdog_FxnTable_</ref></type>
        <definition>typedef struct Watchdog_FxnTable_  Watchdog_FxnTable</definition>
        <argsstring></argsstring>
        <name>Watchdog_FxnTable</name>
        <briefdescription>
<para>The definition of a Watchdog function table that contains the required set of functions to control a specific Watchdog driver implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_watchdog_8h_1a7e9f9a94559ff298a7a288a0618bbcf0" prot="public" static="no">
        <type>struct <ref refid="struct_watchdog___config__" kindref="compound">Watchdog_Config_</ref></type>
        <definition>typedef struct Watchdog_Config_  Watchdog_Config</definition>
        <argsstring></argsstring>
        <name>Watchdog_Config</name>
        <briefdescription>
<para>Watchdog Global configuration. </para>        </briefdescription>
        <detaileddescription>
<para>The Watchdog_Config structure contains a set of pointers used to characterize the Watchdog driver implementation.</para><para>This structure needs to be defined before calling <ref refid="_watchdog_8h_1afaadfb59be17661ae95562f2081355e7" kindref="member">Watchdog_init()</ref> and it must not be changed thereafter.</para><para><simplesect kind="see"><para><ref refid="_watchdog_8h_1afaadfb59be17661ae95562f2081355e7" kindref="member">Watchdog_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="394" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_watchdog_8h_1a396decd6b1807db10c636f9987c3be4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Watchdog_clear</definition>
        <argsstring>(Watchdog_Handle handle)</argsstring>
        <name>Watchdog_clear</name>
        <param>
          <type><ref refid="_watchdog_8h_1ab9ae92ba1721e383cedcff2eea73d9ca" kindref="member">Watchdog_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Clears the Watchdog. </para>        </briefdescription>
        <detaileddescription>
<para>Clears the Watchdog to to prevent a reset signal from being generated if the module is in <ref refid="_watchdog_8h_1a14a5aaacb2ab91f555ec55e349d9546faafccd6330c396d9ffc2786524625bf1f" kindref="member">Watchdog_RESET_ON</ref> reset mode.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_watchdog_8h_1ab9ae92ba1721e383cedcff2eea73d9ca" kindref="member">Watchdog_Handle</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="404" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_watchdog_8h_1a1c0dfea7011b06f303d01afb631ffbdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Watchdog_close</definition>
        <argsstring>(Watchdog_Handle handle)</argsstring>
        <name>Watchdog_close</name>
        <param>
          <type><ref refid="_watchdog_8h_1ab9ae92ba1721e383cedcff2eea73d9ca" kindref="member">Watchdog_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to close a Watchdog peripheral specified by the Watchdog handle.It stops (holds) the Watchdog counting on applicable platforms. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_watchdog_8h_1a26795f67f599b74de830ca7bf36bdced" kindref="member">Watchdog_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_watchdog_8h_1ab9ae92ba1721e383cedcff2eea73d9ca" kindref="member">Watchdog_Handle</ref> returned from <ref refid="_watchdog_8h_1a26795f67f599b74de830ca7bf36bdced" kindref="member">Watchdog_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_watchdog_8h_1a26795f67f599b74de830ca7bf36bdced" kindref="member">Watchdog_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="417" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_watchdog_8h_1a513c121c62f277318a7c35b0b2bdc869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t Watchdog_control</definition>
        <argsstring>(Watchdog_Handle handle, uint_fast16_t cmd, void *arg)</argsstring>
        <name>Watchdog_control</name>
        <param>
          <type><ref refid="_watchdog_8h_1ab9ae92ba1721e383cedcff2eea73d9ca" kindref="member">Watchdog_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint_fast16_t</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Function performs implementation specific features on a given <ref refid="_watchdog_8h_1ab9ae92ba1721e383cedcff2eea73d9ca" kindref="member">Watchdog_Handle</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Commands for Watchdog_control can originate from <ref refid="_watchdog_8h" kindref="compound">Watchdog.h</ref> or from implementation specific Watchdog*.h files. While commands from <ref refid="_watchdog_8h" kindref="compound">Watchdog.h</ref> are API portable across driver implementations, not all implementations may support all these commands. Conversely, commands from driver implementation specific Watchdog*.h files add unique driver capabilities but are not API portable across all Watchdog driver implementations.</para><para>Commands supported by <ref refid="_watchdog_8h" kindref="compound">Watchdog.h</ref> follow a Watchdog_CMD_&lt;cmd&gt; naming convention.<linebreak/>
 Commands supported by Watchdog*.h follow a Watchdog*_CMD_&lt;cmd&gt; naming convention.<linebreak/>
 Each control command defines <bold>arg</bold> differently. The types of <bold>arg</bold> are documented with each command.</para><para>See <ref refid="group___watchdog___c_m_d" kindref="compound">Watchdog_control command codes</ref> for command codes.</para><para>See <ref refid="group___watchdog___s_t_a_t_u_s" kindref="compound">Watchdog_control return status codes</ref> for status codes.</para><para><simplesect kind="pre"><para><ref refid="_watchdog_8h_1a26795f67f599b74de830ca7bf36bdced" kindref="member">Watchdog_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_watchdog_8h_1ab9ae92ba1721e383cedcff2eea73d9ca" kindref="member">Watchdog_Handle</ref> returned from <ref refid="_watchdog_8h_1a26795f67f599b74de830ca7bf36bdced" kindref="member">Watchdog_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="_watchdog_8h" kindref="compound">Watchdog.h</ref> or Watchdog*.h commands.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional R/W (read/write) command argument accompanied with cmd</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Implementation specific return codes. Negative values indicate unsuccessful operations.</para></simplesect>
<simplesect kind="see"><para><ref refid="_watchdog_8h_1a26795f67f599b74de830ca7bf36bdced" kindref="member">Watchdog_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="456" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_watchdog_8h_1afaadfb59be17661ae95562f2081355e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Watchdog_init</definition>
        <argsstring>(void)</argsstring>
        <name>Watchdog_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initializes the Watchdog module. </para>        </briefdescription>
        <detaileddescription>
<para>The application-provided Watchdog_config must be present before the <ref refid="_watchdog_8h_1afaadfb59be17661ae95562f2081355e7" kindref="member">Watchdog_init()</ref> function is called. The Watchdog_config must be persistent and not changed after Watchdog_init is called. This function must be called before any of the other Watchdog driver APIs. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="468" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_watchdog_8h_1a26795f67f599b74de830ca7bf36bdced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_watchdog_8h_1ab9ae92ba1721e383cedcff2eea73d9ca" kindref="member">Watchdog_Handle</ref></type>
        <definition>Watchdog_Handle Watchdog_open</definition>
        <argsstring>(uint_least8_t index, Watchdog_Params *params)</argsstring>
        <name>Watchdog_open</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="_watchdog_8h_1a24c29fb9023f176ac6b7810ab149e67c" kindref="member">Watchdog_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Opens a Watchdog. </para>        </briefdescription>
        <detaileddescription>
<para>Opens a Watchdog object with the index and parameters specified, and returns a <ref refid="_watchdog_8h_1ab9ae92ba1721e383cedcff2eea73d9ca" kindref="member">Watchdog_Handle</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical peripheral number for the Watchdog indexed into the Watchdog_config table</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <ref refid="_watchdog_8h_1a24c29fb9023f176ac6b7810ab149e67c" kindref="member">Watchdog_Params</ref>, if NULL it will use default values. All the fields in this structure are RO (read-only).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="_watchdog_8h_1ab9ae92ba1721e383cedcff2eea73d9ca" kindref="member">Watchdog_Handle</ref> on success or a NULL on an error or if it has been opened already.</para></simplesect>
<simplesect kind="see"><para><ref refid="_watchdog_8h_1afaadfb59be17661ae95562f2081355e7" kindref="member">Watchdog_init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_watchdog_8h_1a1c0dfea7011b06f303d01afb631ffbdd" kindref="member">Watchdog_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="489" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_watchdog_8h_1a6a6f54cfdac33d3bf33464a212262afc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Watchdog_Params_init</definition>
        <argsstring>(Watchdog_Params *params)</argsstring>
        <name>Watchdog_Params_init</name>
        <param>
          <type><ref refid="_watchdog_8h_1a24c29fb9023f176ac6b7810ab149e67c" kindref="member">Watchdog_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize the <ref refid="_watchdog_8h_1a24c29fb9023f176ac6b7810ab149e67c" kindref="member">Watchdog_Params</ref> structure to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>An pointer to <ref refid="_watchdog_8h_1a24c29fb9023f176ac6b7810ab149e67c" kindref="member">Watchdog_Params</ref> structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Default parameters: callbackFxn = NULL resetMode = <ref refid="_watchdog_8h_1a14a5aaacb2ab91f555ec55e349d9546faafccd6330c396d9ffc2786524625bf1f" kindref="member">Watchdog_RESET_ON</ref> debugStallMode = <ref refid="_watchdog_8h_1ab7cc980c0ab934800cf77f768c2ac5d6a787c87976091a6f294070dadd1747ed0" kindref="member">Watchdog_DEBUG_STALL_ON</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="502" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_watchdog_8h_1a63ea82dda83e42e236578b9810e56880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t Watchdog_setReload</definition>
        <argsstring>(Watchdog_Handle handle, uint32_t ticks)</argsstring>
        <name>Watchdog_setReload</name>
        <param>
          <type><ref refid="_watchdog_8h_1ab9ae92ba1721e383cedcff2eea73d9ca" kindref="member">Watchdog_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ticks</declname>
        </param>
        <briefdescription>
<para>Sets the Watchdog reload value. </para>        </briefdescription>
        <detaileddescription>
<para>Sets the value from which the Watchdog will countdown after it reaches zero. This is how the reload value can be changed after the Watchdog has already been opened. The new reload value will be loaded into the Watchdog timer when this function is called. Watchdog_setReload is not reentrant. For CC13XX/CC26XX, if the parameter &apos;ticks&apos; is set to zero (0), a Watchdog interrupt is immediately generated.</para><para>This API is not applicable for all platforms. See the page for your specific driver implementation for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_watchdog_8h_1ab9ae92ba1721e383cedcff2eea73d9ca" kindref="member">Watchdog_Handle</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ticks</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be loaded into Watchdog timer Unit is in Watchdog clock ticks</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___watchdog___s_t_a_t_u_s_1gaa8dd490de97398b1da33798d8e54b53f" kindref="member">Watchdog_STATUS_SUCCESS</ref> on success, <ref refid="group___watchdog___s_t_a_t_u_s_1ga4f4ea82c3209f4acc21607ee0e9e053c" kindref="member">Watchdog_STATUS_UNSUPPORTED</ref> if driver does not support this API. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="525" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_watchdog_8h_1a7b93cd0bd3a6f11aa28b0c7219755979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t Watchdog_convertMsToTicks</definition>
        <argsstring>(Watchdog_Handle handle, uint32_t milliseconds)</argsstring>
        <name>Watchdog_convertMsToTicks</name>
        <param>
          <type><ref refid="_watchdog_8h_1ab9ae92ba1721e383cedcff2eea73d9ca" kindref="member">Watchdog_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>milliseconds</declname>
        </param>
        <briefdescription>
<para>Converts milliseconds to Watchdog clock ticks. </para>        </briefdescription>
        <detaileddescription>
<para>Converts the input value into number of Watchdog clock ticks as close as possible. If the converted value exceeds 32 bits, a zero (0) will be returned to indicate overflow. The converted value can be used as the function parameter &apos;ticks&apos; in <ref refid="_watchdog_8h_1a63ea82dda83e42e236578b9810e56880" kindref="member">Watchdog_setReload()</ref>.</para><para>This API is not applicable for all platforms. See the page for your specific driver implementation for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_watchdog_8h_1ab9ae92ba1721e383cedcff2eea73d9ca" kindref="member">Watchdog_Handle</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be converted</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Converted value in number of Watchdog clock ticks A value of zero (0) means the converted value exceeds 32 bits or that the operation is not supported for the specific device.</para></simplesect>
<simplesect kind="see"><para><ref refid="_watchdog_8h_1a63ea82dda83e42e236578b9810e56880" kindref="member">Watchdog_setReload()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h" line="548" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Watchdog driver interface. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para><anchor id="_watchdog_8h_1ti_drivers_Watchdog_Overview"/><heading level="1">Overview</heading>
</para><para>A watchdog timer can be used to generate a reset signal if a system has become unresponsive. The Watchdog driver simplifies configuring and starting the watchdog peripherals. The watchdog peripheral can be configured with resets either on or off and a user-specified timeout period.</para><para>When the watchdog peripheral is configured not to generate a reset, it can be used to cause a hardware interrupt at a programmable interval. The driver provides the ability to specify a user-provided callback function that is called when the watchdog causes an interrupt.</para><para>The Watchdog driver simplifies configuring and starting the Watchdog peripherals. The Watchdog can be set up to produce a reset signal after a timeout, or simply cause a hardware interrupt at a programmable interval. The driver provides the ability to specify a callback function that is called when the Watchdog causes an interrupt.</para><para>When resets are turned on, it is the user application&apos;s responsibility to call <ref refid="_watchdog_8h_1a396decd6b1807db10c636f9987c3be4c" kindref="member">Watchdog_clear()</ref> in order to clear the Watchdog and prevent a reset. <ref refid="_watchdog_8h_1a396decd6b1807db10c636f9987c3be4c" kindref="member">Watchdog_clear()</ref> can be called at any time.</para><para><anchor id="_watchdog_8h_1ti_drivers_Watchdog_Usage"/><heading level="1">Usage</heading>
</para><para>This section will cover driver usage. <anchor id="_watchdog_8h_1ti_drivers_Watchdog_Synopsis"/><heading level="2">Synopsis</heading>
</para><para>Open the driver with default settings: <programlisting><codeline><highlight class="normal">Watchdog_Handle<sp/>watchdogHandle;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Watchdog_init();</highlight></codeline>
<codeline><highlight class="normal">watchdogHandle<sp/>=<sp/>Watchdog_open(WATCHDOG_INDEX,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(watchdogHandle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Spin<sp/>forever</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>The Watchdog driver must be initialized by calling <ref refid="_watchdog_8h_1afaadfb59be17661ae95562f2081355e7" kindref="member">Watchdog_init()</ref>, before any other Watchdog APIs can be called. Once the watchdog is initialized, a Watchdog object can be created through the following steps:<itemizedlist>
<listitem><para>Create and initialize the <ref refid="_watchdog_8h_1a24c29fb9023f176ac6b7810ab149e67c" kindref="member">Watchdog_Params</ref> structure.</para></listitem><listitem><para>Assign desired values to parameters.</para></listitem><listitem><para>Call <ref refid="_watchdog_8h_1a26795f67f599b74de830ca7bf36bdced" kindref="member">Watchdog_open()</ref>.</para></listitem><listitem><para>Save the Watchdog_Handle returned by <ref refid="_watchdog_8h_1a26795f67f599b74de830ca7bf36bdced" kindref="member">Watchdog_open()</ref>. This will be used to interact with the Watchdog object just created.</para></listitem></itemizedlist>
</para><para>To have a user-defined function run at the hardware interrupt caused by a watchdog timer timeout, define a function of the following type: <programlisting><codeline><highlight class="normal">typedef<sp/>void<sp/>(*Watchdog_Callback)(uintptr_t);</highlight></codeline>
</programlisting> Then pass the function to <ref refid="_watchdog_8h_1a26795f67f599b74de830ca7bf36bdced" kindref="member">Watchdog_open()</ref> through the <ref refid="_watchdog_8h_1a24c29fb9023f176ac6b7810ab149e67c" kindref="member">Watchdog_Params</ref> structure.</para><para>An example of the Watchdog creation process that uses a callback function: <anchor id="_watchdog_8h_1ti_drivers_Watchdog_example_callback"/><programlisting><codeline><highlight class="normal">void<sp/>UserCallbackFxn(Watchdog_Handle<sp/>handle)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Watchdog<sp/>timer<sp/>triggered!\n&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>releaseResources();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Watchdog_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal">Watchdog_Handle<sp/>watchdogHandle;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Watchdog_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Watchdog_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">params.resetMode<sp/>=<sp/>Watchdog_RESET_ON;</highlight></codeline>
<codeline><highlight class="normal">params.callbackFxn<sp/>=<sp/>(Watchdog_Callback)<sp/>UserCallbackFxn;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">watchdogHandle<sp/>=<sp/>Watchdog_open(Board_WATCHDOG0,<sp/>&amp;params);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(watchdogHandle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>Error<sp/>opening<sp/>Watchdog</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>If no <ref refid="_watchdog_8h_1a24c29fb9023f176ac6b7810ab149e67c" kindref="member">Watchdog_Params</ref> structure is passed to <ref refid="_watchdog_8h_1a26795f67f599b74de830ca7bf36bdced" kindref="member">Watchdog_open()</ref>, the default values are used. By default, the Watchdog driver has resets turned on, no callback function specified, and stalls the timer at breakpoints during debugging.</para><para>Options for the resetMode parameter are <ref refid="_watchdog_8h_1a14a5aaacb2ab91f555ec55e349d9546faafccd6330c396d9ffc2786524625bf1f" kindref="member">Watchdog_RESET_ON</ref> and <ref refid="_watchdog_8h_1a14a5aaacb2ab91f555ec55e349d9546fa78ba6b49345f0116143f4d4e7a9ec488" kindref="member">Watchdog_RESET_OFF</ref>. The latter allows the watchdog to be used like another timer interrupt. When resetMode is <ref refid="_watchdog_8h_1a14a5aaacb2ab91f555ec55e349d9546faafccd6330c396d9ffc2786524625bf1f" kindref="member">Watchdog_RESET_ON</ref>, it is up to the application to call <ref refid="_watchdog_8h_1a396decd6b1807db10c636f9987c3be4c" kindref="member">Watchdog_clear()</ref> to clear the Watchdog interrupt flag to prevent a reset. <ref refid="_watchdog_8h_1a396decd6b1807db10c636f9987c3be4c" kindref="member">Watchdog_clear()</ref> can be called at any time.</para><para><anchor id="_watchdog_8h_1ti_drivers_Watchdog_Examples"/><heading level="1">Examples</heading>
</para><para><itemizedlist>
<listitem><para><ref refid="_watchdog_8h_1ti_drivers_Watchdog_Synopsis" kindref="member">Default Example</ref></para></listitem><listitem><para><ref refid="_watchdog_8h_1ti_drivers_Watchdog_example_callback" kindref="member">Callback Function before watchdog reset</ref></para></listitem></itemizedlist>
</para><para><anchor id="_watchdog_8h_1ti_drivers_Watchdog_Configuration"/><heading level="1">Configuration</heading>
</para><para>Refer to the <ref refid="index_1driver_configuration" kindref="member">Driver&apos;s Configuration</ref> section for more information. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2019,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*!*****************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Watchdog.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>Watchdog<sp/>driver<sp/>interface</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_Watchdog_Overview</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Overview<sp/>#</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/>A<sp/>watchdog<sp/>timer<sp/>can<sp/>be<sp/>used<sp/>to<sp/>generate<sp/>a<sp/>reset<sp/>signal<sp/>if<sp/>a<sp/>system<sp/>has</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/>become<sp/>unresponsive.<sp/>The<sp/>Watchdog<sp/>driver<sp/>simplifies<sp/>configuring<sp/>and</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/>starting<sp/>the<sp/>watchdog<sp/>peripherals.<sp/>The<sp/>watchdog<sp/>peripheral<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/>configured<sp/>with<sp/>resets<sp/>either<sp/>on<sp/>or<sp/>off<sp/>and<sp/>a<sp/>user-specified<sp/>timeout</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/>period.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/>When<sp/>the<sp/>watchdog<sp/>peripheral<sp/>is<sp/>configured<sp/>not<sp/>to<sp/>generate<sp/>a<sp/>reset,<sp/>it</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/>can<sp/>be<sp/>used<sp/>to<sp/>cause<sp/>a<sp/>hardware<sp/>interrupt<sp/>at<sp/>a<sp/>programmable<sp/>interval.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>driver<sp/>provides<sp/>the<sp/>ability<sp/>to<sp/>specify<sp/>a<sp/>user-provided<sp/>callback</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/>function<sp/>that<sp/>is<sp/>called<sp/>when<sp/>the<sp/>watchdog<sp/>causes<sp/>an<sp/>interrupt.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>Watchdog<sp/>driver<sp/>simplifies<sp/>configuring<sp/>and<sp/>starting<sp/>the<sp/>Watchdog</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/>peripherals.<sp/>The<sp/>Watchdog<sp/>can<sp/>be<sp/>set<sp/>up<sp/>to<sp/>produce<sp/>a<sp/>reset<sp/>signal<sp/>after<sp/>a</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/>timeout,<sp/>or<sp/>simply<sp/>cause<sp/>a<sp/>hardware<sp/>interrupt<sp/>at<sp/>a<sp/>programmable<sp/>interval.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>driver<sp/>provides<sp/>the<sp/>ability<sp/>to<sp/>specify<sp/>a<sp/>callback<sp/>function<sp/>that<sp/>is</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/>called<sp/>when<sp/>the<sp/>Watchdog<sp/>causes<sp/>an<sp/>interrupt.</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/>When<sp/>resets<sp/>are<sp/>turned<sp/>on,<sp/>it<sp/>is<sp/>the<sp/>user<sp/>application&apos;s<sp/>responsibility<sp/>to</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/>call<sp/>Watchdog_clear()<sp/>in<sp/>order<sp/>to<sp/>clear<sp/>the<sp/>Watchdog<sp/>and<sp/>prevent<sp/>a<sp/>reset.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/>Watchdog_clear()<sp/>can<sp/>be<sp/>called<sp/>at<sp/>any<sp/>time.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_Watchdog_Usage</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Usage<sp/>#</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>section<sp/>will<sp/>cover<sp/>driver<sp/>usage.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_Watchdog_Synopsis</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Synopsis<sp/>#</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/>Open<sp/>the<sp/>driver<sp/>with<sp/>default<sp/>settings:</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/>Watchdog_Handle<sp/>watchdogHandle;</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/>Watchdog_init();</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/><sp/>watchdogHandle<sp/>=<sp/>Watchdog_open(WATCHDOG_INDEX,<sp/>NULL);</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(watchdogHandle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Spin<sp/>forever</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>Watchdog<sp/>driver<sp/>must<sp/>be<sp/>initialized<sp/>by<sp/>calling<sp/>Watchdog_init(),</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/>before<sp/>any<sp/>other<sp/>Watchdog<sp/>APIs<sp/>can<sp/>be<sp/>called.</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/>Once<sp/>the<sp/>watchdog<sp/>is<sp/>initialized,<sp/>a<sp/>Watchdog<sp/>object<sp/>can<sp/>be<sp/>created</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/>through<sp/>the<sp/>following<sp/>steps:</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/><sp/><sp/>Create<sp/>and<sp/>initialize<sp/>the<sp/>#Watchdog_Params<sp/>structure.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/><sp/><sp/>Assign<sp/>desired<sp/>values<sp/>to<sp/>parameters.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/><sp/><sp/>Call<sp/>Watchdog_open().</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/><sp/><sp/>Save<sp/>the<sp/>Watchdog_Handle<sp/>returned<sp/>by<sp/>Watchdog_open().<sp/>This<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/>used<sp/>to<sp/>interact<sp/>with<sp/>the<sp/>Watchdog<sp/>object<sp/>just<sp/>created.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/>To<sp/>have<sp/>a<sp/>user-defined<sp/>function<sp/>run<sp/>at<sp/>the<sp/>hardware<sp/>interrupt<sp/>caused<sp/>by</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/>a<sp/>watchdog<sp/>timer<sp/>timeout,<sp/>define<sp/>a<sp/>function<sp/>of<sp/>the<sp/>following<sp/>type:</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>typedef<sp/>void<sp/>(*Watchdog_Callback)(uintptr_t);</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/><sp/>Then<sp/>pass<sp/>the<sp/>function<sp/>to<sp/>Watchdog_open()<sp/>through<sp/>the<sp/>#Watchdog_Params</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/>structure.</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/>An<sp/>example<sp/>of<sp/>the<sp/>Watchdog<sp/>creation<sp/>process<sp/>that<sp/>uses<sp/>a<sp/>callback</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/>function:</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_Watchdog_example_callback</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/><sp/>void<sp/>UserCallbackFxn(Watchdog_Handle<sp/>handle)</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Watchdog<sp/>timer<sp/>triggered!\n&quot;);</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>releaseResources();</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/><sp/>...</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/>Watchdog_Params<sp/>params;</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/><sp/>Watchdog_Handle<sp/>watchdogHandle;</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/><sp/>Watchdog_init();</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/><sp/>Watchdog_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/><sp/>params.resetMode<sp/>=<sp/>Watchdog_RESET_ON;</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/><sp/>params.callbackFxn<sp/>=<sp/>(Watchdog_Callback)<sp/>UserCallbackFxn;</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/><sp/>watchdogHandle<sp/>=<sp/>Watchdog_open(Board_WATCHDOG0,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(watchdogHandle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>Error<sp/>opening<sp/>Watchdog</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>no<sp/>#Watchdog_Params<sp/>structure<sp/>is<sp/>passed<sp/>to<sp/>Watchdog_open(),<sp/>the</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/><sp/>default<sp/>values<sp/>are<sp/>used.<sp/>By<sp/>default,<sp/>the<sp/>Watchdog<sp/>driver<sp/>has<sp/>resets</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/><sp/>turned<sp/>on,<sp/>no<sp/>callback<sp/>function<sp/>specified,<sp/>and<sp/>stalls<sp/>the<sp/>timer<sp/>at</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/>breakpoints<sp/>during<sp/>debugging.</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/><sp/>Options<sp/>for<sp/>the<sp/>resetMode<sp/>parameter<sp/>are<sp/>#Watchdog_RESET_ON<sp/>and</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/><sp/>#Watchdog_RESET_OFF.<sp/>The<sp/>latter<sp/>allows<sp/>the<sp/>watchdog<sp/>to<sp/>be<sp/>used<sp/>like</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/><sp/>another<sp/>timer<sp/>interrupt.<sp/>When<sp/>resetMode<sp/>is<sp/>#Watchdog_RESET_ON,<sp/>it<sp/>is<sp/>up</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/><sp/>to<sp/>the<sp/>application<sp/>to<sp/>call<sp/>Watchdog_clear()<sp/>to<sp/>clear<sp/>the<sp/>Watchdog</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/><sp/>interrupt<sp/>flag<sp/>to<sp/>prevent<sp/>a<sp/>reset.<sp/>Watchdog_clear()<sp/>can<sp/>be<sp/>called<sp/>at</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/><sp/>any<sp/>time.</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_Watchdog_Examples</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Examples</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>@ref<sp/>ti_drivers_Watchdog_Synopsis<sp/>&quot;Default<sp/>Example&quot;</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>@ref<sp/>ti_drivers_Watchdog_example_callback<sp/>&quot;Callback<sp/>Function<sp/>before<sp/>watchdog<sp/>reset&quot;</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_Watchdog_Configuration</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Configuration</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/><sp/>Refer<sp/>to<sp/>the<sp/>@ref<sp/>driver_configuration<sp/>&quot;Driver&apos;s<sp/>Configuration&quot;<sp/>section</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/><sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*******************************************************************************</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_Watchdog__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_Watchdog__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="group___watchdog___c_o_n_t_r_o_l_1ga4d1b16e67bf555b8fe49182eb8a28b97" refkind="member"><highlight class="preprocessor">#define<sp/>Watchdog_CMD_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="group___watchdog___c_o_n_t_r_o_l_1gaf7d1273929fd4d1f630c31b90def9684" refkind="member"><highlight class="preprocessor">#define<sp/>Watchdog_STATUS_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="group___watchdog___s_t_a_t_u_s_1gaa8dd490de97398b1da33798d8e54b53f" refkind="member"><highlight class="preprocessor">#define<sp/>Watchdog_STATUS_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="group___watchdog___s_t_a_t_u_s_1ga7cc28c1119ebecae88a5ae0735228489" refkind="member"><highlight class="preprocessor">#define<sp/>Watchdog_STATUS_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="group___watchdog___s_t_a_t_u_s_1ga589be79a7f8ce642863f231e1dae7577" refkind="member"><highlight class="preprocessor">#define<sp/>Watchdog_STATUS_UNDEFINEDCMD<sp/><sp/><sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="group___watchdog___s_t_a_t_u_s_1ga4f4ea82c3209f4acc21607ee0e9e053c" refkind="member"><highlight class="preprocessor">#define<sp/>Watchdog_STATUS_UNSUPPORTED<sp/><sp/><sp/>(-3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="comment">/*<sp/>Add<sp/>Watchdog_CMD_&lt;commands&gt;<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="_watchdog_8h_1ab9ae92ba1721e383cedcff2eea73d9ca" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_watchdog___config__" kindref="compound">Watchdog_Config_</ref><sp/>*<ref refid="_watchdog_8h_1ab9ae92ba1721e383cedcff2eea73d9ca" kindref="member">Watchdog_Handle</ref>;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="_watchdog_8h_1ab7cc980c0ab934800cf77f768c2ac5d6" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_watchdog_8h_1ab7cc980c0ab934800cf77f768c2ac5d6" kindref="member">Watchdog_DebugMode_</ref><sp/>{</highlight></codeline>
<codeline lineno="265" refid="_watchdog_8h_1ab7cc980c0ab934800cf77f768c2ac5d6a787c87976091a6f294070dadd1747ed0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_watchdog_8h_1ab7cc980c0ab934800cf77f768c2ac5d6a787c87976091a6f294070dadd1747ed0" kindref="member">Watchdog_DEBUG_STALL_ON</ref>,<sp/></highlight></codeline>
<codeline lineno="266" refid="_watchdog_8h_1ab7cc980c0ab934800cf77f768c2ac5d6a745be9d89bc0c15eda5c4082020f8bb2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_watchdog_8h_1ab7cc980c0ab934800cf77f768c2ac5d6a745be9d89bc0c15eda5c4082020f8bb2" kindref="member">Watchdog_DEBUG_STALL_OFF</ref><sp/></highlight></codeline>
<codeline lineno="267"><highlight class="normal">}<sp/><ref refid="_watchdog_8h_1a9e44509e7d94eac768c6f33e6c85e038" kindref="member">Watchdog_DebugMode</ref>;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="276" refid="_watchdog_8h_1a14a5aaacb2ab91f555ec55e349d9546f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_watchdog_8h_1a14a5aaacb2ab91f555ec55e349d9546f" kindref="member">Watchdog_ResetMode_</ref><sp/>{</highlight></codeline>
<codeline lineno="277" refid="_watchdog_8h_1a14a5aaacb2ab91f555ec55e349d9546fa78ba6b49345f0116143f4d4e7a9ec488" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_watchdog_8h_1a14a5aaacb2ab91f555ec55e349d9546fa78ba6b49345f0116143f4d4e7a9ec488" kindref="member">Watchdog_RESET_OFF</ref>,<sp/></highlight></codeline>
<codeline lineno="278" refid="_watchdog_8h_1a14a5aaacb2ab91f555ec55e349d9546faafccd6330c396d9ffc2786524625bf1f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_watchdog_8h_1a14a5aaacb2ab91f555ec55e349d9546faafccd6330c396d9ffc2786524625bf1f" kindref="member">Watchdog_RESET_ON</ref><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="279"><highlight class="normal">}<sp/><ref refid="_watchdog_8h_1afb96d6e8d483083ce85f89d67341d866" kindref="member">Watchdog_ResetMode</ref>;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="289" refid="_watchdog_8h_1a2d201451a10bb67efc3e222ac7f099c1" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_watchdog_8h_1a2d201451a10bb67efc3e222ac7f099c1" kindref="member">Watchdog_Callback</ref>)(uintptr_t<sp/>handle);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="struct_watchdog___params__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_watchdog___params__" kindref="compound">Watchdog_Params_</ref><sp/>{</highlight></codeline>
<codeline lineno="300" refid="struct_watchdog___params___1a26a219dd0a8c1972a721a40aca0b52e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_watchdog_8h_1a2d201451a10bb67efc3e222ac7f099c1" kindref="member">Watchdog_Callback</ref><sp/><sp/><sp/><ref refid="struct_watchdog___params___1a26a219dd0a8c1972a721a40aca0b52e6" kindref="member">callbackFxn</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="302" refid="struct_watchdog___params___1ac695f58c6e582d98c9171bf02a760c12" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Watchdog_ResetMode<sp/><sp/><ref refid="struct_watchdog___params___1ac695f58c6e582d98c9171bf02a760c12" kindref="member">resetMode</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="304" refid="struct_watchdog___params___1adfd763090a1a67a2cb8069c5c5ba135a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Watchdog_DebugMode<sp/><sp/><ref refid="struct_watchdog___params___1adfd763090a1a67a2cb8069c5c5ba135a" kindref="member">debugStallMode</ref>;<sp/></highlight></codeline>
<codeline lineno="306" refid="struct_watchdog___params___1a4f6448256335e7f67199fda107f84faa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_watchdog___params___1a4f6448256335e7f67199fda107f84faa" kindref="member">custom</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="308"><highlight class="normal">}<sp/><ref refid="_watchdog_8h_1a24c29fb9023f176ac6b7810ab149e67c" kindref="member">Watchdog_Params</ref>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="_watchdog_8h_1a0315c4931ba68423472f47c23c86f296" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_watchdog_8h_1a0315c4931ba68423472f47c23c86f296" kindref="member">Watchdog_ClearFxn</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Watchdog_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="_watchdog_8h_1a2d13686bc3dd7fdb05ec97d63be489ee" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_watchdog_8h_1a2d13686bc3dd7fdb05ec97d63be489ee" kindref="member">Watchdog_CloseFxn</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Watchdog_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="_watchdog_8h_1aefe9152c3cd5afd45d7ef61d398169a1" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_watchdog_8h_1aefe9152c3cd5afd45d7ef61d398169a1" kindref="member">Watchdog_ControlFxn</ref>)<sp/>(Watchdog_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_fast16_t<sp/>cmd,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="_watchdog_8h_1a6401b1a23d9048efb4ed69a074ea60f9" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_watchdog_8h_1a6401b1a23d9048efb4ed69a074ea60f9" kindref="member">Watchdog_InitFxn</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Watchdog_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="_watchdog_8h_1a05ae778da809a34e4d84c95d35ba5f58" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_watchdog_8h_1ab9ae92ba1721e383cedcff2eea73d9ca" kindref="member">Watchdog_Handle</ref><sp/>(*<ref refid="_watchdog_8h_1a05ae778da809a34e4d84c95d35ba5f58" kindref="member">Watchdog_OpenFxn</ref>)<sp/><sp/>(Watchdog_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_watchdog___params__" kindref="compound">Watchdog_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="_watchdog_8h_1afced0e92286fe54ad1fe51c496da7a0c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_watchdog_8h_1afced0e92286fe54ad1fe51c496da7a0c" kindref="member">Watchdog_SetReloadFxn</ref>)(Watchdog_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ticks);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="_watchdog_8h_1a18910effbe7c123ab85385e9b34ac54f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/>(*<ref refid="_watchdog_8h_1a18910effbe7c123ab85385e9b34ac54f" kindref="member">Watchdog_ConvertMsToTicksFxn</ref>)<sp/><sp/><sp/>(Watchdog_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>milliseconds);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="362" refid="struct_watchdog___fxn_table__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_watchdog___fxn_table__" kindref="compound">Watchdog_FxnTable_</ref><sp/>{</highlight></codeline>
<codeline lineno="363" refid="struct_watchdog___fxn_table___1a2a54d653160c28f8e9247f108bdeddaa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_watchdog_8h_1a0315c4931ba68423472f47c23c86f296" kindref="member">Watchdog_ClearFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_watchdog___fxn_table___1a2a54d653160c28f8e9247f108bdeddaa" kindref="member">watchdogClear</ref>;</highlight></codeline>
<codeline lineno="364" refid="struct_watchdog___fxn_table___1a1a6cf64a9b9a6ab04bf73d08caea0d86" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_watchdog_8h_1a2d13686bc3dd7fdb05ec97d63be489ee" kindref="member">Watchdog_CloseFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_watchdog___fxn_table___1a1a6cf64a9b9a6ab04bf73d08caea0d86" kindref="member">watchdogClose</ref>;</highlight></codeline>
<codeline lineno="365" refid="struct_watchdog___fxn_table___1ad1c171a0d986dc229e20f7cec61cacd1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_watchdog_8h_1aefe9152c3cd5afd45d7ef61d398169a1" kindref="member">Watchdog_ControlFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_watchdog___fxn_table___1ad1c171a0d986dc229e20f7cec61cacd1" kindref="member">watchdogControl</ref>;</highlight></codeline>
<codeline lineno="366" refid="struct_watchdog___fxn_table___1a15d382257d3dc884dfeacf2b58f9c3f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_watchdog_8h_1a6401b1a23d9048efb4ed69a074ea60f9" kindref="member">Watchdog_InitFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_watchdog___fxn_table___1a15d382257d3dc884dfeacf2b58f9c3f0" kindref="member">watchdogInit</ref>;</highlight></codeline>
<codeline lineno="367" refid="struct_watchdog___fxn_table___1a7f356e48718e93891d400486d1f22db3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_watchdog_8h_1a05ae778da809a34e4d84c95d35ba5f58" kindref="member">Watchdog_OpenFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_watchdog___fxn_table___1a7f356e48718e93891d400486d1f22db3" kindref="member">watchdogOpen</ref>;</highlight></codeline>
<codeline lineno="368" refid="struct_watchdog___fxn_table___1a61d4f1bbadcc529418776c6bc9797511" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_watchdog_8h_1afced0e92286fe54ad1fe51c496da7a0c" kindref="member">Watchdog_SetReloadFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_watchdog___fxn_table___1a61d4f1bbadcc529418776c6bc9797511" kindref="member">watchdogSetReload</ref>;</highlight></codeline>
<codeline lineno="369" refid="struct_watchdog___fxn_table___1a3deac0545a5885bb7bcace8535f808b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_watchdog_8h_1a18910effbe7c123ab85385e9b34ac54f" kindref="member">Watchdog_ConvertMsToTicksFxn</ref><sp/><sp/><ref refid="struct_watchdog___fxn_table___1a3deac0545a5885bb7bcace8535f808b1" kindref="member">watchdogConvertMsToTicks</ref>;</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}<sp/><ref refid="_watchdog_8h_1aa8370f2ff642b6a253e37c0b7b44fbed" kindref="member">Watchdog_FxnTable</ref>;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="383" refid="struct_watchdog___config__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_watchdog___config__" kindref="compound">Watchdog_Config_</ref><sp/>{</highlight></codeline>
<codeline lineno="387" refid="struct_watchdog___config___1a2ceb6aabf71a42cf6e4162d1ce314e58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_watchdog___fxn_table__" kindref="compound">Watchdog_FxnTable</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_watchdog___config___1a2ceb6aabf71a42cf6e4162d1ce314e58" kindref="member">fxnTablePtr</ref>;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="390" refid="struct_watchdog___config___1a445dc09c39f77c050e15f83a5b431943" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_watchdog___config___1a445dc09c39f77c050e15f83a5b431943" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="struct_watchdog___config___1a839535d8cd9c2c46e4112cd6e99c684f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_watchdog___config___1a839535d8cd9c2c46e4112cd6e99c684f" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}<sp/><ref refid="_watchdog_8h_1a7e9f9a94559ff298a7a288a0618bbcf0" kindref="member">Watchdog_Config</ref>;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_watchdog_8h_1a396decd6b1807db10c636f9987c3be4c" kindref="member">Watchdog_clear</ref>(Watchdog_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_watchdog_8h_1a1c0dfea7011b06f303d01afb631ffbdd" kindref="member">Watchdog_close</ref>(Watchdog_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_watchdog_8h_1a513c121c62f277318a7c35b0b2bdc869" kindref="member">Watchdog_control</ref>(Watchdog_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_fast16_t<sp/>cmd,</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_watchdog_8h_1afaadfb59be17661ae95562f2081355e7" kindref="member">Watchdog_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Watchdog_Handle<sp/><ref refid="_watchdog_8h_1a26795f67f599b74de830ca7bf36bdced" kindref="member">Watchdog_open</ref>(uint_least8_t<sp/>index,<sp/><ref refid="struct_watchdog___params__" kindref="compound">Watchdog_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_watchdog_8h_1a6a6f54cfdac33d3bf33464a212262afc" kindref="member">Watchdog_Params_init</ref>(<ref refid="struct_watchdog___params__" kindref="compound">Watchdog_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_watchdog_8h_1a63ea82dda83e42e236578b9810e56880" kindref="member">Watchdog_setReload</ref>(Watchdog_Handle<sp/>handle,<sp/>uint32_t<sp/>ticks);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="_watchdog_8h_1a7b93cd0bd3a6f11aa28b0c7219755979" kindref="member">Watchdog_convertMsToTicks</ref>(Watchdog_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>milliseconds);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_Watchdog__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_msp432/source/ti/drivers/Watchdog.h"/>
  </compounddef>
</doxygen>
