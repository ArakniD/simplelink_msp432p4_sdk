<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="struct_power_m_s_p432___config_v1" kind="struct" language="C++" prot="public">
    <compoundname>PowerMSP432_ConfigV1</compoundname>
    <includes refid="_power_m_s_p432_8h" local="no">PowerMSP432.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_power_m_s_p432___config_v1_1a63f02b72038cd340fd3e3bd634c11035" prot="public" static="no" mutable="no">
        <type><ref refid="_power_8h_1a435fdeb71d13ea6be86f599c9b6a0d78" kindref="member">Power_PolicyInitFxn</ref></type>
        <definition>Power_PolicyInitFxn PowerMSP432_ConfigV1::policyInitFxn</definition>
        <argsstring></argsstring>
        <name>policyInitFxn</name>
        <briefdescription>
<para>The Power Policy&apos;s initialization function. </para>        </briefdescription>
        <detaileddescription>
<para>If the policy does not have an initialization function, &apos;NULL&apos; should be specified. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" line="554" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" bodystart="554" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_m_s_p432___config_v1_1a1e2c8cb5a370da047f71df03b57675ca" prot="public" static="no" mutable="no">
        <type><ref refid="_power_8h_1a333038d1e9cd5f93dda7b83f8a1afa8b" kindref="member">Power_PolicyFxn</ref></type>
        <definition>Power_PolicyFxn PowerMSP432_ConfigV1::policyFxn</definition>
        <argsstring></argsstring>
        <name>policyFxn</name>
        <briefdescription>
<para>The Power Policy function. </para>        </briefdescription>
        <detaileddescription>
<para>When enabled, this function is invoked in the idle loop, to opportunistically select and activate sleep states.</para><para>Two reference policies are provided:</para><para><ref refid="_power_m_s_p432_8h_1ab75793914213da623d441edab4ad4d7b" kindref="member">PowerMSP432_sleepPolicy()</ref> - a simple policy that will put the device in either the PowerMSP432_SLEEP state (unless there is a constraint prohibiting this), or CPU wait for interrupt (WFI)</para><para><ref refid="_power_m_s_p432_8h_1a2d7baf3841bd309a52acabd6b5dbc5ec" kindref="member">PowerMSP432_deepSleepPolicy()</ref> - a more agressive policy that checks constraints and optionally chooses PowerMSP432_DEEPSLEEP_1, PowerMSP432_DEEPSLEEP_0, PowerMSP432_SLEEP, or WFI, in that order of preference.</para><para>Custom policies can be written, and specified via this function pointer.</para><para>In addition to this static selection, the Power Policy can be dynamically changed at runtime, via the <ref refid="_power_8h_1aa4af0d238813058bf6146df6021df8cc" kindref="member">Power_setPolicy()</ref> API. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" line="577" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" bodystart="577" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_m_s_p432___config_v1_1aaab800db7539de6ba4453f8446ae373a" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int PowerMSP432_ConfigV1::initialPerfLevel</definition>
        <argsstring></argsstring>
        <name>initialPerfLevel</name>
        <briefdescription>
<para>The initial performance level to be established during Power Manager initialization. </para>        </briefdescription>
        <detaileddescription>
<para>The performance level is identified by a numeric index into the table of available performance levels.</para><para>This performance level will be activated during initialization only when performance scaling is enabled (below, via specification of enablePerf). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" line="589" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" bodystart="589" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_m_s_p432___config_v1_1aa43c45bb9070d3ca7278d5f9196820d0" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool PowerMSP432_ConfigV1::enablePolicy</definition>
        <argsstring></argsstring>
        <name>enablePolicy</name>
        <briefdescription>
<para>Boolean specifying if the Power Policy function is enabled. </para>        </briefdescription>
        <detaileddescription>
<para>If &apos;true&apos;, the policy function will be invoked once for each pass of the idle loop.</para><para>If &apos;false&apos;, the policy will not be invoked.</para><para>In addition to this static setting, the Power Policy can be dynamically enabled and disabled at runtime, via the <ref refid="_power_8h_1ae8d6092a8fb35b6db52a69a35fcc327f" kindref="member">Power_enablePolicy()</ref> and <ref refid="_power_8h_1acf9706c39bd0fa07ec977dd643e5dd2a" kindref="member">Power_disablePolicy()</ref> functions, respectively. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" line="602" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" bodystart="602" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_m_s_p432___config_v1_1a7b988b4449d135f852daafad190a746d" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool PowerMSP432_ConfigV1::enablePerf</definition>
        <argsstring></argsstring>
        <name>enablePerf</name>
        <briefdescription>
<para>Boolean specifying if performance scaling is enabled. </para>        </briefdescription>
        <detaileddescription>
<para>If &apos;true&apos;, the performance scaling feature will be enabled for the application. And, the initial performance level (specified above, via initialPerfLevel) will be established during Power Manager initialization.</para><para>If &apos;false&apos;, performance scaling is disabled for the application. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" line="613" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" bodystart="613" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_m_s_p432___config_v1_1aae8d9d7952363165a73b8679e56926f5" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool PowerMSP432_ConfigV1::enableParking</definition>
        <argsstring></argsstring>
        <name>enableParking</name>
        <briefdescription>
<para>Boolean specifying if pull resistors should be automatically applied to input pins during <ref refid="_power_m_s_p432_8h_1a2a4fd7bba646587655e8de0fdfda82d9" kindref="member">PowerMSP432_DEEPSLEEP_0</ref> and <ref refid="_power_m_s_p432_8h_1a13c3fb19e15734f5da0cb39c1f11c59c" kindref="member">PowerMSP432_DEEPSLEEP_1</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Leaving an input pin floating during a device deepsleep state will result in an increase in power consumption. The Power Manager provides an option to automatically apply pull resistors to input pins during deepsleep, so that none are left floating. The type of pull (pull-up or pull-down) is determined by the current state sensed for each input pin, as the device is transitioning into deepsleep. This feature is referred to as &apos;automatic pin parking&apos;, and is enabled with this enableParking configuration parameter.</para><para>If &apos;true&apos;, before completing a transition into deepsleep, pull resistors will be applied to all pins configured as input, with General Purpose I/O (GPIO) function (as configured in the PxSEL1 and PxSEL0 registers). On wake from deepsleep, the pull resistor settings will be restored to those in effect prior to deepsleep.</para><para>If &apos;false&apos;, pull resistors will not be automatically applied during deepsleep states.</para><para><simplesect kind="note"><para>When auto pin parking is enabled special attention must be paid to the interrupt trigger selection for GPIO pins that are expected to wake the device from deepsleep. Specifically, the interrupt should be triggered on the leading edge of the signal transition.</para></simplesect>
As an example, consider a pin that is connected via a debounced button switch to ground. An internal pull-up resistor is used versus an external pull-up resistor. The <ref refid="_g_p_i_o_8h" kindref="compound">GPIO.h</ref> driver is used to manage this pin, with the following entry in the pin configuration array: <programlisting><codeline><highlight class="normal">GPIOMSP432_P1_1<sp/>|<sp/>GPIO_CFG_IN_PU<sp/>|<sp/>GPIO_CFG_IN_INT_FALLING,</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para><ref refid="group___g_p_i_o___pin_config_settings_1ga7a69ee26049dc2f8b5059b00a24b9f74" kindref="member">GPIO_CFG_IN_INT_FALLING</ref> is specifically selected so that the interrupt triggers immediately upon a button press.</para></simplesect>
If <ref refid="group___g_p_i_o___pin_config_settings_1ga4a9f53e525d1f1659b485274d08ff91f" kindref="member">GPIO_CFG_IN_INT_RISING</ref> were selected, in certain situations there may be a problem with this pin being able to trigger a wakeup from deepsleep. For example, consider the case where there is an additional mechanism to wake the device from deepsleep, for example, the watchdog timer is programmed in interval timer mode, to periodically wake the device every 250ms. If the button is not pressed, when the device goes to deepsleep the pin state is sensed as high, and a pull-up resistor is automatically applied by the Power driver. At some point the button is pressed, and the pin is pulled to ground. But since &quot;RISING&quot; edge was configured for the interrupt, the interrupt request has not yet been sent to the CPU. Now, while the button is still low, the interval timer wakes the device, the necessary work is done, the power policy runs in the idle loop again, and puts the device back to deepsleep. On this transition to deepsleep, the auto pin parking code runs again, but this time the button pin level is sensed as low (since the button is depressed); so this time, a pull-down resistor is applied to the pin. The device goes to deepsleep, and then eventually the button is released... but the pin is still held low by the internal pull-down resistor, so no rising edge occurs, no interrupt is signalled to the CPU, and the device stays in deesleep.</para><para>The above is a hypothetical example, but illustrates the importance of selecting the appropriate interrupt trigger configuration for GPIO pins when auto pin parking is enabled. If a pin is being driven by an external circuit (versus floating with weak pull resistors as in the above example), as long as the external circuit can sufficiently drive the pin to counteract the weak pull resistor, there won&apos;t be a similar issue. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" line="684" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" bodystart="684" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_m_s_p432___config_v1_1ad2d02c6b0e9cf8d76f7b07cf6d72487e" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* PowerMSP432_ConfigV1::resumeShutdownHookFxn) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>resumeShutdownHookFxn</name>
        <briefdescription>
<para>Hook function called when resuming from a SHUTDOWN state. </para>        </briefdescription>
        <detaileddescription>
<para>This function is called when the device wakes and resumes from a previous entry into either the SHUTDOWN_0 or SHUTDOWN_1 states. If this function is defined (i.e., this pointer is not NULL), it will be called during <ref refid="_power_8h_1a3c4e1eab2809636848b2758fb201707c" kindref="member">Power_init()</ref>, right before the Power driver clears the LOCKLPM5 and LOCKBKUP bits in the PMCTL1 register, to unlock I/Os and the backup domain. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" line="695" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" bodystart="695" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_m_s_p432___config_v1_1a0061adc62566f040e61f06b5e690a0f1" prot="public" static="no" mutable="no">
        <type><ref refid="struct_power_m_s_p432___perf_level" kindref="compound">PowerMSP432_PerfLevel</ref> *</type>
        <definition>PowerMSP432_PerfLevel* PowerMSP432_ConfigV1::customPerfLevels</definition>
        <argsstring></argsstring>
        <name>customPerfLevels</name>
        <briefdescription>
<para>Pointer to an optional array of custom performance levels. </para>        </briefdescription>
        <detaileddescription>
<para>A value of NULL indicates no custom performance levels are defined </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" line="701" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" bodystart="701" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_m_s_p432___config_v1_1a73cc1453617468264d219b323d6881d0" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t PowerMSP432_ConfigV1::numCustom</definition>
        <argsstring></argsstring>
        <name>numCustom</name>
        <briefdescription>
<para>Number of custom performance levels. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" line="705" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" bodystart="705" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_m_s_p432___config_v1_1aaf4ce1856651b1ff374990c7340e22a3" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool PowerMSP432_ConfigV1::useExtendedPerf</definition>
        <argsstring></argsstring>
        <name>useExtendedPerf</name>
        <briefdescription>
<para>Boolean specifying if extended performance scaling features are to be supported. </para>        </briefdescription>
        <detaileddescription>
<para>If &apos;true&apos;, the following configuration parameters for crystal oscillator support are enabled.</para><para>If &apos;false&apos;, the extended configuration parameters are not suppored.</para><para>This Boolean is used to maintain backwards compatibility with previous releases. Older board files won&apos;t include the extended configuration parameters, and by default, crystal oscillators won&apos;t be supported in those applications. New board files can include the extended configuration parameters, and by including and setting this Boolean to true, the extended support with crystals will be enabled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" line="722" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" bodystart="722" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_m_s_p432___config_v1_1a76cb76813f92d7d01a201489c9622736" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int PowerMSP432_ConfigV1::HFXTFREQ</definition>
        <argsstring></argsstring>
        <name>HFXTFREQ</name>
        <briefdescription>
<para>The high frequency crystal (HFXT) frequency. </para>        </briefdescription>
        <detaileddescription>
<para>The source is specified via an enumerated value from cs.h, for example: CS_48MHZ, CS_24MHZ, etc. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" line="729" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" bodystart="729" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_m_s_p432___config_v1_1ab15f74c7e5824a2dae49038a0358d76d" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int PowerMSP432_ConfigV1::LFXTDRIVE</definition>
        <argsstring></argsstring>
        <name>LFXTDRIVE</name>
        <briefdescription>
<para>The low frequency crystal (LFXT) drive level. </para>        </briefdescription>
        <detaileddescription>
<para>The source is specified via an enumerated value from cs.h, for example: CS_LFXT_DRIVE3, CS_LFXT_DRIVE2, etc. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" line="736" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" bodystart="736" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_m_s_p432___config_v1_1aa3e499bec4c23efaf82038fd5e5b59db" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool PowerMSP432_ConfigV1::configurePinHFXT</definition>
        <argsstring></argsstring>
        <name>configurePinHFXT</name>
        <briefdescription>
<para>Boolean specifying if the HFXT pin should be configured for HFXT function. </para>        </briefdescription>
        <detaileddescription>
<para>If &apos;true&apos;, the HFXT pin will be configured for HFXT function.</para><para>If &apos;false&apos;, the pin will not be configured. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" line="745" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" bodystart="745" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_m_s_p432___config_v1_1a3c5818485fe078c4e6ab9e44bf825d67" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool PowerMSP432_ConfigV1::bypassHFXT</definition>
        <argsstring></argsstring>
        <name>bypassHFXT</name>
        <briefdescription>
<para>Boolean specifying if the HFXT pin should be configured for HFXT bypass. </para>        </briefdescription>
        <detaileddescription>
<para>If &apos;true&apos;, the HFXT pin will be configured for HFXT bypass.</para><para>If &apos;false&apos;, the pin will not be configured for HFXT bypass. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" line="754" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" bodystart="754" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_m_s_p432___config_v1_1af4e39077e80ff90b3cfbb314dcea5149" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool PowerMSP432_ConfigV1::configurePinLFXT</definition>
        <argsstring></argsstring>
        <name>configurePinLFXT</name>
        <briefdescription>
<para>Boolean specifying if the LFXT pin should be configured for LFXT function. </para>        </briefdescription>
        <detaileddescription>
<para>If &apos;true&apos;, the LFXT pin will be configured for LFXT function.</para><para>If &apos;false&apos;, the pin will not be configured. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" line="763" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" bodystart="763" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_m_s_p432___config_v1_1a0365ac9ecab7c32b6aae9ccb9a6dac13" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool PowerMSP432_ConfigV1::bypassLFXT</definition>
        <argsstring></argsstring>
        <name>bypassLFXT</name>
        <briefdescription>
<para>Boolean specifying if the LFXT pin should be configured for LFXT bypass. </para>        </briefdescription>
        <detaileddescription>
<para>If &apos;true&apos;, the LFXT pin will be configured for LFXT bypass.</para><para>If &apos;false&apos;, the pin will not be configured for LFXT bypass. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" line="772" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" bodystart="772" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_m_s_p432___config_v1_1aeb6e54d58c9f297e9dcef1b666dd8df3" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool PowerMSP432_ConfigV1::enableInterruptsCS</definition>
        <argsstring></argsstring>
        <name>enableInterruptsCS</name>
        <briefdescription>
<para>Boolean specifying if interrupts from the Clock System (CS) should be enabled for catching clock and oscillator fault conditions. </para>        </briefdescription>
        <detaileddescription>
<para>If &apos;true&apos;, an application-provided interrupt service routine will be configured for catching CS interrupts.</para><para>If &apos;false&apos;, interrupts from the CS will not be enabled.</para><para>When a performance level is activated that uses HFXT and/or LFXT, and this Boolean is true, the corresponding interrupt sources (HFXTIE and/or LFXTIE) will be enabled at the CS. If HFXT and/or LFXT are later disabled, the corresponding interrupt sources will likewise be disabled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" line="788" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" bodystart="788" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_m_s_p432___config_v1_1a0a9f17e1e6b344e08c057870cc363c42" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int PowerMSP432_ConfigV1::priorityInterruptsCS</definition>
        <argsstring></argsstring>
        <name>priorityInterruptsCS</name>
        <briefdescription>
<para>The interrupt priority to be configured for CS interrupts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" line="792" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" bodystart="792" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_m_s_p432___config_v1_1a8e983faf2c1d8bd65bba5320c3a03019" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* PowerMSP432_ConfigV1::isrCS) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>isrCS</name>
        <briefdescription>
<para>The application-provided interrupt service routine that should be configured for handling CS interrupts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" line="797" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" bodystart="797" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Power global configuration (MSP432-specific) </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="176">
        <label>PowerMSP432_PerfLevel</label>
        <link refid="struct_power_m_s_p432___perf_level"/>
      </node>
      <node id="175">
        <label>PowerMSP432_ConfigV1</label>
        <link refid="struct_power_m_s_p432___config_v1"/>
        <childnode refid="176" relation="usage">
          <edgelabel>customPerfLevels</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" line="547" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/power/PowerMSP432.h" bodystart="547" bodyend="798"/>
    <listofallmembers>
      <member refid="struct_power_m_s_p432___config_v1_1a3c5818485fe078c4e6ab9e44bf825d67" prot="public" virt="non-virtual"><scope>PowerMSP432_ConfigV1</scope><name>bypassHFXT</name></member>
      <member refid="struct_power_m_s_p432___config_v1_1a0365ac9ecab7c32b6aae9ccb9a6dac13" prot="public" virt="non-virtual"><scope>PowerMSP432_ConfigV1</scope><name>bypassLFXT</name></member>
      <member refid="struct_power_m_s_p432___config_v1_1aa3e499bec4c23efaf82038fd5e5b59db" prot="public" virt="non-virtual"><scope>PowerMSP432_ConfigV1</scope><name>configurePinHFXT</name></member>
      <member refid="struct_power_m_s_p432___config_v1_1af4e39077e80ff90b3cfbb314dcea5149" prot="public" virt="non-virtual"><scope>PowerMSP432_ConfigV1</scope><name>configurePinLFXT</name></member>
      <member refid="struct_power_m_s_p432___config_v1_1a0061adc62566f040e61f06b5e690a0f1" prot="public" virt="non-virtual"><scope>PowerMSP432_ConfigV1</scope><name>customPerfLevels</name></member>
      <member refid="struct_power_m_s_p432___config_v1_1aeb6e54d58c9f297e9dcef1b666dd8df3" prot="public" virt="non-virtual"><scope>PowerMSP432_ConfigV1</scope><name>enableInterruptsCS</name></member>
      <member refid="struct_power_m_s_p432___config_v1_1aae8d9d7952363165a73b8679e56926f5" prot="public" virt="non-virtual"><scope>PowerMSP432_ConfigV1</scope><name>enableParking</name></member>
      <member refid="struct_power_m_s_p432___config_v1_1a7b988b4449d135f852daafad190a746d" prot="public" virt="non-virtual"><scope>PowerMSP432_ConfigV1</scope><name>enablePerf</name></member>
      <member refid="struct_power_m_s_p432___config_v1_1aa43c45bb9070d3ca7278d5f9196820d0" prot="public" virt="non-virtual"><scope>PowerMSP432_ConfigV1</scope><name>enablePolicy</name></member>
      <member refid="struct_power_m_s_p432___config_v1_1a76cb76813f92d7d01a201489c9622736" prot="public" virt="non-virtual"><scope>PowerMSP432_ConfigV1</scope><name>HFXTFREQ</name></member>
      <member refid="struct_power_m_s_p432___config_v1_1aaab800db7539de6ba4453f8446ae373a" prot="public" virt="non-virtual"><scope>PowerMSP432_ConfigV1</scope><name>initialPerfLevel</name></member>
      <member refid="struct_power_m_s_p432___config_v1_1a8e983faf2c1d8bd65bba5320c3a03019" prot="public" virt="non-virtual"><scope>PowerMSP432_ConfigV1</scope><name>isrCS</name></member>
      <member refid="struct_power_m_s_p432___config_v1_1ab15f74c7e5824a2dae49038a0358d76d" prot="public" virt="non-virtual"><scope>PowerMSP432_ConfigV1</scope><name>LFXTDRIVE</name></member>
      <member refid="struct_power_m_s_p432___config_v1_1a73cc1453617468264d219b323d6881d0" prot="public" virt="non-virtual"><scope>PowerMSP432_ConfigV1</scope><name>numCustom</name></member>
      <member refid="struct_power_m_s_p432___config_v1_1a1e2c8cb5a370da047f71df03b57675ca" prot="public" virt="non-virtual"><scope>PowerMSP432_ConfigV1</scope><name>policyFxn</name></member>
      <member refid="struct_power_m_s_p432___config_v1_1a63f02b72038cd340fd3e3bd634c11035" prot="public" virt="non-virtual"><scope>PowerMSP432_ConfigV1</scope><name>policyInitFxn</name></member>
      <member refid="struct_power_m_s_p432___config_v1_1a0a9f17e1e6b344e08c057870cc363c42" prot="public" virt="non-virtual"><scope>PowerMSP432_ConfigV1</scope><name>priorityInterruptsCS</name></member>
      <member refid="struct_power_m_s_p432___config_v1_1ad2d02c6b0e9cf8d76f7b07cf6d72487e" prot="public" virt="non-virtual"><scope>PowerMSP432_ConfigV1</scope><name>resumeShutdownHookFxn</name></member>
      <member refid="struct_power_m_s_p432___config_v1_1aaf4ce1856651b1ff374990c7340e22a3" prot="public" virt="non-virtual"><scope>PowerMSP432_ConfigV1</scope><name>useExtendedPerf</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
