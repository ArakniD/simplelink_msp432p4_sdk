<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_p_w_m_8h" kind="file" language="C++">
    <compoundname>PWM.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includedby refid="_p_w_m_timer_m_s_p432_8h" local="no">PWMTimerMSP432.h</includedby>
    <incdepgraph>
      <node id="197">
        <label>stdint.h</label>
      </node>
      <node id="196">
        <label>PWM.h</label>
        <link refid="_p_w_m_8h"/>
        <childnode refid="197" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="198">
        <label>PWM.h</label>
        <link refid="_p_w_m_8h"/>
        <childnode refid="199" relation="include">
        </childnode>
      </node>
      <node id="199">
        <label>PWMTimerMSP432.h</label>
        <link refid="_p_w_m_timer_m_s_p432_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_p_w_m___params" prot="public">PWM_Params</innerclass>
    <innerclass refid="struct_p_w_m___fxn_table__" prot="public">PWM_FxnTable_</innerclass>
    <innerclass refid="struct_p_w_m___config__" prot="public">PWM_Config_</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_p_w_m_8h_1a8b2763bf16c6446a35d536ea532f6a6c" prot="public" static="no">
        <name>PWM_DUTY_FRACTION_MAX</name>
        <initializer>((uint32_t) ~0)</initializer>
        <briefdescription>
<para>Maximum duty (100%) when configuring duty cycle as a fraction of period. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="216" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/PWM.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_w_m_8h_1ad731f4db58c72d280900da4be6e3434c" prot="public" static="no">
        <name>PWM_CMD_RESERVED</name>
        <initializer>(32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common PWM_control command code reservation offset. PWM driver implementations should offset command codes with <ref refid="_p_w_m_8h_1ad731f4db58c72d280900da4be6e3434c" kindref="member">PWM_CMD_RESERVED</ref> growing positively.</para><para>Example implementation specific command codes: <programlisting><codeline><highlight class="normal">#define<sp/>PWMXYZ_COMMAND0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PWM_CMD_RESERVED<sp/>+<sp/>0)</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PWMXYZ_COMMAND1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PWM_CMD_RESERVED<sp/>+<sp/>1)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="229" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/PWM.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_w_m_8h_1a88616e9288d6e3a4dbab321af26cc04a" prot="public" static="no">
        <name>PWM_STATUS_RESERVED</name>
        <initializer>(-32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common PWM_control status code reservation offset. PWM driver implementations should offset status codes with <ref refid="_p_w_m_8h_1a88616e9288d6e3a4dbab321af26cc04a" kindref="member">PWM_STATUS_RESERVED</ref> growing negatively.</para><para>Example implementation specific status codes: <programlisting><codeline><highlight class="normal">#define<sp/>PWMXYZ_STATUS_ERROR0<sp/><sp/><sp/><sp/>(PWM_STATUS_RESERVED<sp/>-<sp/>0)</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PWMXYZ_STATUS_ERROR1<sp/><sp/><sp/><sp/>(PWM_STATUS_RESERVED<sp/>-<sp/>1)</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PWMXYZ_STATUS_ERROR2<sp/><sp/><sp/><sp/>(PWM_STATUS_RESERVED<sp/>-<sp/>2)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="243" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/PWM.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_w_m_8h_1a9b234f3cd0bdffc3da5b56a6c4db9563" prot="public" static="no">
        <name>PWM_STATUS_SUCCESS</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>Success status code returned by: <ref refid="_p_w_m_8h_1a7f5a5dd263b9d95f4fd71fbb69455369" kindref="member">PWM_control()</ref>, <ref refid="_p_w_m_8h_1af72b43e2bcd68c0e78ae5dbe28db05c8" kindref="member">PWM_setDuty()</ref>, <ref refid="_p_w_m_8h_1afc1925126582a5a0721f992b92739e06" kindref="member">PWM_setPeriod()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return <ref refid="_p_w_m_8h_1a9b234f3cd0bdffc3da5b56a6c4db9563" kindref="member">PWM_STATUS_SUCCESS</ref> if the call was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="252" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/PWM.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_w_m_8h_1a739297dfb10ab4363e7b5db30fdd1ce0" prot="public" static="no">
        <name>PWM_STATUS_ERROR</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>Generic error status code returned by <ref refid="_p_w_m_8h_1a7f5a5dd263b9d95f4fd71fbb69455369" kindref="member">PWM_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_p_w_m_8h_1a7f5a5dd263b9d95f4fd71fbb69455369" kindref="member">PWM_control()</ref> returns <ref refid="_p_w_m_8h_1a739297dfb10ab4363e7b5db30fdd1ce0" kindref="member">PWM_STATUS_ERROR</ref> if the control code was not executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="260" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/PWM.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_w_m_8h_1afed58384f49ce364218eeaabb0858bea" prot="public" static="no">
        <name>PWM_STATUS_UNDEFINEDCMD</name>
        <initializer>(-2)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_p_w_m_8h_1a7f5a5dd263b9d95f4fd71fbb69455369" kindref="member">PWM_control()</ref> for undefined command codes. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_p_w_m_8h_1a7f5a5dd263b9d95f4fd71fbb69455369" kindref="member">PWM_control()</ref> returns <ref refid="_p_w_m_8h_1afed58384f49ce364218eeaabb0858bea" kindref="member">PWM_STATUS_UNDEFINEDCMD</ref> if the control code is not recognized by the driver implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="269" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/PWM.h" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_w_m_8h_1a5541b99566b02450b1d44b3bf0c344bc" prot="public" static="no">
        <name>PWM_STATUS_INVALID_PERIOD</name>
        <initializer>(-3)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_p_w_m_8h_1afc1925126582a5a0721f992b92739e06" kindref="member">PWM_setPeriod()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_p_w_m_8h_1afc1925126582a5a0721f992b92739e06" kindref="member">PWM_setPeriod()</ref> returns <ref refid="_p_w_m_8h_1a5541b99566b02450b1d44b3bf0c344bc" kindref="member">PWM_STATUS_INVALID_PERIOD</ref> if the period argument is invalid for the current configuration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="277" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/PWM.h" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_w_m_8h_1ac3b90551ab071520eccaabe4cabe1f1a" prot="public" static="no">
        <name>PWM_STATUS_INVALID_DUTY</name>
        <initializer>(-4)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_p_w_m_8h_1af72b43e2bcd68c0e78ae5dbe28db05c8" kindref="member">PWM_setDuty()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_p_w_m_8h_1af72b43e2bcd68c0e78ae5dbe28db05c8" kindref="member">PWM_setDuty()</ref> returns <ref refid="_p_w_m_8h_1ac3b90551ab071520eccaabe4cabe1f1a" kindref="member">PWM_STATUS_INVALID_DUTY</ref> if the duty cycle argument is invalid for the current configuration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="285" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/PWM.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_p_w_m_8h_1a11aa442e82549992c98729216d64fd63" prot="public" static="no">
        <name>PWM_Period_Units</name>
        <enumvalue id="_p_w_m_8h_1a11aa442e82549992c98729216d64fd63a35d73e8e481d16fd8c3880d9519894cd" prot="public">
          <name>PWM_PERIOD_US</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Period in microseconds </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_w_m_8h_1a11aa442e82549992c98729216d64fd63a083c3462c199f39afc7a9d0541595b7a" prot="public">
          <name>PWM_PERIOD_HZ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Period in (reciprocal) Hertz (for example 2MHz = 0.5us period) </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_w_m_8h_1a11aa442e82549992c98729216d64fd63a52a5ee3b990d5edb816d19253bd9a571" prot="public">
          <name>PWM_PERIOD_COUNTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Period in timer counts </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>PWM period unit definitions. Refer to device specific implementation if using <ref refid="_p_w_m_8h_1a11aa442e82549992c98729216d64fd63a52a5ee3b990d5edb816d19253bd9a571" kindref="member">PWM_PERIOD_COUNTS</ref> (raw PWM/Timer counts). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="291" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/PWM.h" bodystart="291" bodyend="296"/>
      </memberdef>
      <memberdef kind="enum" id="_p_w_m_8h_1abc7bc5565f2767cf9f06c1572044a8ee" prot="public" static="no">
        <name>PWM_Duty_Units</name>
        <enumvalue id="_p_w_m_8h_1abc7bc5565f2767cf9f06c1572044a8eeaf93cd02d0c2744e2d6a68a8e7070b7a6" prot="public">
          <name>PWM_DUTY_US</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Duty cycle in microseconds </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_w_m_8h_1abc7bc5565f2767cf9f06c1572044a8eea004d0d56bfc7f629990e7b6b55c3dd4f" prot="public">
          <name>PWM_DUTY_FRACTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Duty as a fractional part of <ref refid="_p_w_m_8h_1a8b2763bf16c6446a35d536ea532f6a6c" kindref="member">PWM_DUTY_FRACTION_MAX</ref>. A duty cycle value of 0 will yield a 0% duty cycle while a duty cycle value of <ref refid="_p_w_m_8h_1a8b2763bf16c6446a35d536ea532f6a6c" kindref="member">PWM_DUTY_FRACTION_MAX</ref> will yield a duty cycle value of 100%. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_w_m_8h_1abc7bc5565f2767cf9f06c1572044a8eea4a20018a9620ed669dff0893858a44b2" prot="public">
          <name>PWM_DUTY_COUNTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Duty in timer counts </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>PWM duty cycle unit definitions. Refer to device specific implementation if using PWM_DUTY_COUNTS (raw PWM/Timer counts). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="302" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/PWM.h" bodystart="302" bodyend="309"/>
      </memberdef>
      <memberdef kind="enum" id="_p_w_m_8h_1a5a40c7014745d15b0c1a604dae5593f9" prot="public" static="no">
        <name>PWM_IdleLevel</name>
        <enumvalue id="_p_w_m_8h_1a5a40c7014745d15b0c1a604dae5593f9a698cc876a94b3e0629d65fecfec8c8f5" prot="public">
          <name>PWM_IDLE_LOW</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_w_m_8h_1a5a40c7014745d15b0c1a604dae5593f9a0b126918629a951139ef9f17d417c50d" prot="public">
          <name>PWM_IDLE_HIGH</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Idle output level when PWM is not running (stopped / not started). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="314" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/PWM.h" bodystart="314" bodyend="317"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" prot="public" static="no">
        <type>struct <ref refid="struct_p_w_m___config__" kindref="compound">PWM_Config_</ref> *</type>
        <definition>typedef struct PWM_Config_* PWM_Handle</definition>
        <argsstring></argsstring>
        <name>PWM_Handle</name>
        <briefdescription>
<para>A handle that is returned from a <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="340" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/PWM.h" bodystart="340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1a1643d365dfa900197b324ea74035d2ec" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* PWM_CloseFxn) (PWM_Handle handle)</definition>
        <argsstring>)(PWM_Handle handle)</argsstring>
        <name>PWM_CloseFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_p_w_m_8h_1a0e0f5899b067d27653db566fb148db11" kindref="member">PWM_close()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="346" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/PWM.h" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1a0ac1147ec944a3873ec1dad81d8c949f" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* PWM_ControlFxn) (PWM_Handle handle, uint_fast16_t cmd, void *arg)</definition>
        <argsstring>)(PWM_Handle handle, uint_fast16_t cmd, void *arg)</argsstring>
        <name>PWM_ControlFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_p_w_m_8h_1a7f5a5dd263b9d95f4fd71fbb69455369" kindref="member">PWM_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="352" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/PWM.h" bodystart="352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1a38666ae4b117b81d35758258012b251a" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* PWM_InitFxn) (PWM_Handle handle)</definition>
        <argsstring>)(PWM_Handle handle)</argsstring>
        <name>PWM_InitFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_p_w_m_8h_1aadae3fe77e36cbf9643a22eeb99fb01e" kindref="member">PWM_init()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="358" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/PWM.h" bodystart="358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1a16b7b446398f8b90e4fa287c6e4a0981" prot="public" static="no">
        <type><ref refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" kindref="member">PWM_Handle</ref>(*</type>
        <definition>typedef PWM_Handle(* PWM_OpenFxn) (PWM_Handle handle, PWM_Params *params)</definition>
        <argsstring>)(PWM_Handle handle, PWM_Params *params)</argsstring>
        <name>PWM_OpenFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="364" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/PWM.h" bodystart="364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1a7e90114309f62bc7ddf878c2e1b46cd2" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* PWM_SetDutyFxn) (PWM_Handle handle, uint32_t duty)</definition>
        <argsstring>)(PWM_Handle handle, uint32_t duty)</argsstring>
        <name>PWM_SetDutyFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_p_w_m_8h_1af72b43e2bcd68c0e78ae5dbe28db05c8" kindref="member">PWM_setDuty()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="370" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/PWM.h" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1a2761c0836cae3a3d56cf8e819d54a214" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* PWM_SetPeriodFxn) (PWM_Handle handle, uint32_t period)</definition>
        <argsstring>)(PWM_Handle handle, uint32_t period)</argsstring>
        <name>PWM_SetPeriodFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_p_w_m_8h_1afc1925126582a5a0721f992b92739e06" kindref="member">PWM_setPeriod()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="377" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/PWM.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1a1e01d56b827255daf0b927e3d6d35ea8" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* PWM_SetDutyAndPeriodFxn) (PWM_Handle handle, uint32_t duty, uint32_t period)</definition>
        <argsstring>)(PWM_Handle handle, uint32_t duty, uint32_t period)</argsstring>
        <name>PWM_SetDutyAndPeriodFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_p_w_m_8h_1a3cc7201c72502a6d294ad1320e5a3c25" kindref="member">PWM_setDutyAndPeriod()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="384" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/PWM.h" bodystart="384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1af0a392fb66c104f9d60e80e023dd3b89" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* PWM_StartFxn) (PWM_Handle handle)</definition>
        <argsstring>)(PWM_Handle handle)</argsstring>
        <name>PWM_StartFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_p_w_m_8h_1aa1bd0cc3f0fa52879422fca74d254378" kindref="member">PWM_start()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="391" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/PWM.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1aff8ad682f40a810ecf03824e8e190087" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* PWM_StopFxn) (PWM_Handle handle)</definition>
        <argsstring>)(PWM_Handle handle)</argsstring>
        <name>PWM_StopFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_p_w_m_8h_1ae83a4cd327a07d6037ff1a8d72fb3ae6" kindref="member">PWM_stop()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="397" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/PWM.h" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1a1c3809a9bd3c63a04edc1bafa78cc2e2" prot="public" static="no">
        <type>struct <ref refid="struct_p_w_m___fxn_table__" kindref="compound">PWM_FxnTable_</ref></type>
        <definition>typedef struct PWM_FxnTable_  PWM_FxnTable</definition>
        <argsstring></argsstring>
        <name>PWM_FxnTable</name>
        <briefdescription>
<para>The definition of a PWM function table that contains the required set of functions to control a specific PWM driver implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="423" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1af4fdcd36077e2aba99d6996ae1ea64ec" prot="public" static="no">
        <type>struct <ref refid="struct_p_w_m___config__" kindref="compound">PWM_Config_</ref></type>
        <definition>typedef struct PWM_Config_  PWM_Config</definition>
        <argsstring></argsstring>
        <name>PWM_Config</name>
        <briefdescription>
<para>PWM Global configuration. </para>        </briefdescription>
        <detaileddescription>
<para>The PWM_Config structure contains a set of pointers used to characterize the PWM driver implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="439" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_p_w_m_8h_1a0e0f5899b067d27653db566fb148db11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PWM_close</definition>
        <argsstring>(PWM_Handle handle)</argsstring>
        <name>PWM_close</name>
        <param>
          <type><ref refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" kindref="member">PWM_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to close a PWM instance specified by the PWM handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> must have been called first. </para></simplesect>
<simplesect kind="pre"><para><ref refid="_p_w_m_8h_1ae83a4cd327a07d6037ff1a8d72fb3ae6" kindref="member">PWM_stop()</ref> must have been called first if PWM was started.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A PWM handle returned from <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1aa1bd0cc3f0fa52879422fca74d254378" kindref="member">PWM_start()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1ae83a4cd327a07d6037ff1a8d72fb3ae6" kindref="member">PWM_stop()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="453" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_w_m_8h_1a7f5a5dd263b9d95f4fd71fbb69455369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t PWM_control</definition>
        <argsstring>(PWM_Handle handle, uint_fast16_t cmd, void *arg)</argsstring>
        <name>PWM_control</name>
        <param>
          <type><ref refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" kindref="member">PWM_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint_fast16_t</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Function performs implementation specific features on a given PWM_Handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> must have been called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A PWM handle returned from <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>A command value defined by the driver specific implementation.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">arg</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an optional R/W (read/write) argument that is accompanied with cmd.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_p_w_m_8h_1a9b234f3cd0bdffc3da5b56a6c4db9563" kindref="member">PWM_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The control call was successful. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_p_w_m_8h_1a739297dfb10ab4363e7b5db30fdd1ce0" kindref="member">PWM_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The control call failed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="474" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_w_m_8h_1aadae3fe77e36cbf9643a22eeb99fb01e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PWM_init</definition>
        <argsstring>(void)</argsstring>
        <name>PWM_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function initializes the PWM module. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The PWM_config structure must exist and be persistent before this function can be called. This function must be called before any other PWM driver APIs. This function does not modify any peripheral registers &amp; should only be called once. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="485" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" kindref="member">PWM_Handle</ref></type>
        <definition>PWM_Handle PWM_open</definition>
        <argsstring>(uint_least8_t index, PWM_Params *params)</argsstring>
        <name>PWM_open</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="struct_p_w_m___params" kindref="compound">PWM_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>This function opens a given PWM instance and sets the period, duty and idle level to those specified in the params argument. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical instance number for the PWM indexed into the PWM_config table.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an parameter structure. If NULL default values are used.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" kindref="member">PWM_Handle</ref> if successful or NULL on an error or if it has been opened already. If NULL is returned further PWM API calls will result in undefined behavior.</para></simplesect>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1a0e0f5899b067d27653db566fb148db11" kindref="member">PWM_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="503" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_w_m_8h_1acbdd3192f9f06bf689e4a3855926dcac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PWM_Params_init</definition>
        <argsstring>(PWM_Params *params)</argsstring>
        <name>PWM_Params_init</name>
        <param>
          <type><ref refid="struct_p_w_m___params" kindref="compound">PWM_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize the <ref refid="struct_p_w_m___params" kindref="compound">PWM_Params</ref> structure to default values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to <ref refid="struct_p_w_m___params" kindref="compound">PWM_Params</ref> structure for initialization.</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults values are: Period units: PWM_PERIOD_HZ Period: 1e6 (1MHz) Duty cycle units: PWM_DUTY_FRACTION Duty cycle: 0% Idle level: PWM_IDLE_LOW </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="517" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_w_m_8h_1af72b43e2bcd68c0e78ae5dbe28db05c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t PWM_setDuty</definition>
        <argsstring>(PWM_Handle handle, uint32_t duty)</argsstring>
        <name>PWM_setDuty</name>
        <param>
          <type><ref refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" kindref="member">PWM_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>duty</declname>
        </param>
        <briefdescription>
<para>Function to set the duty cycle of the specified PWM handle. PWM instances run in active high output mode; 0% is always low output, 100% is always high output. This API can be called while the PWM is running &amp; duty must always be lower than or equal to the period. If an error occurs while calling the function the PWM duty cycle will remain unchanged. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> must have been called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A PWM handle returned from <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">duty</parametername>
</parameternamelist>
<parameterdescription>
<para>Duty cycle in the units specified by the params used in <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_p_w_m_8h_1a9b234f3cd0bdffc3da5b56a6c4db9563" kindref="member">PWM_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The duty was set successfully. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_p_w_m_8h_1a739297dfb10ab4363e7b5db30fdd1ce0" kindref="member">PWM_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The duty was not set and remains unchanged.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="539" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_w_m_8h_1afc1925126582a5a0721f992b92739e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t PWM_setPeriod</definition>
        <argsstring>(PWM_Handle handle, uint32_t period)</argsstring>
        <name>PWM_setPeriod</name>
        <param>
          <type><ref refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" kindref="member">PWM_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Function to set the period of the specified PWM handle. This API can be called while the PWM is running &amp; the period must always be larger than the duty cycle. If an error occurs while calling the function the PWM period will remain unchanged. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> must have been called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A PWM handle returned from <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">period</parametername>
</parameternamelist>
<parameterdescription>
<para>Period in the units specified by the params used in <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_p_w_m_8h_1a9b234f3cd0bdffc3da5b56a6c4db9563" kindref="member">PWM_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The period was set successfully. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_p_w_m_8h_1a739297dfb10ab4363e7b5db30fdd1ce0" kindref="member">PWM_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The period was not set and remains unchanged.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="560" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_w_m_8h_1a3cc7201c72502a6d294ad1320e5a3c25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t PWM_setDutyAndPeriod</definition>
        <argsstring>(PWM_Handle handle, uint32_t duty, uint32_t period)</argsstring>
        <name>PWM_setDutyAndPeriod</name>
        <param>
          <type><ref refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" kindref="member">PWM_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>duty</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Function to set both the period and the duty cycle of the specified PWM handle. This API must be called while the PWM is running &amp; the period must always be larger than the duty cycle. If an error occurs while calling the function the period and duty will remain unchanged. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This API should only be called while the PWM is running.</para></simplesect>
<simplesect kind="note"><para>If the period is lower than a certain platform-specific amount, the output of the PWM timer may be paused to set these values. Some implementations may also pause the PWM if the remaining time before the next timeout is less than this value. This is to guard against an edge case where a timeout happens in between setting period and duty.</para></simplesect>
<simplesect kind="pre"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> must have been called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A PWM handle returned from <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">duty</parametername>
</parameternamelist>
<parameterdescription>
<para>Duty cycle in the units specified by the params used in <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">period</parametername>
</parameternamelist>
<parameterdescription>
<para>Period in the units specified by the params used in <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_p_w_m_8h_1a9b234f3cd0bdffc3da5b56a6c4db9563" kindref="member">PWM_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The duty and period was set successfully. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_p_w_m_8h_1a739297dfb10ab4363e7b5db30fdd1ce0" kindref="member">PWM_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The duty and period was not set and remains unchanged.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="593" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_w_m_8h_1aa1bd0cc3f0fa52879422fca74d254378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PWM_start</definition>
        <argsstring>(PWM_Handle handle)</argsstring>
        <name>PWM_start</name>
        <param>
          <type><ref refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" kindref="member">PWM_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to start the specified PWM handle with current settings. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> has to have been called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A PWM handle returned from <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1ae83a4cd327a07d6037ff1a8d72fb3ae6" kindref="member">PWM_stop()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="605" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_w_m_8h_1ae83a4cd327a07d6037ff1a8d72fb3ae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PWM_stop</definition>
        <argsstring>(PWM_Handle handle)</argsstring>
        <name>PWM_stop</name>
        <param>
          <type><ref refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" kindref="member">PWM_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to stop the specified PWM handle. Output will set to the idle level specified by params in <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> has to have been called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A PWM handle returned from <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1aa1bd0cc3f0fa52879422fca74d254378" kindref="member">PWM_start()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h" line="618" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Pulse Width Modulation (PWM) driver. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para><anchor id="_p_w_m_8h_1ti_drivers_PWM_Overview"/><heading level="1">Overview</heading>
</para><para>The PWM driver in TI-RTOS facilitates the generation of Pulse Width Modulated signals via simple and portable APIs.</para><para>When a PWM instance is opened, the period, duty cycle and idle level are configured and the PWM is stopped (waveforms not generated until <ref refid="_p_w_m_8h_1aa1bd0cc3f0fa52879422fca74d254378" kindref="member">PWM_start()</ref> is called). The maximum period and duty supported is device dependent; refer to the implementation specific documentation for values.</para><para>PWM outputs are active-high, meaning the duty will control the duration of high output on the pin (at 0% duty, the output is always low, at 100% duty, the output is always high).</para><para><hruler/>
 <anchor id="_p_w_m_8h_1ti_drivers_PWM_Usage"/><heading level="1">Usage</heading>
</para><para>This documentation provides a basic <ref refid="_p_w_m_8h_1ti_drivers_PWM_Synopsis" kindref="member">usage summary</ref> and a set of <ref refid="_p_w_m_8h_1ti_drivers_PWM_Examples" kindref="member">examples</ref> in the form of commented code fragments. Detailed descriptions of the APIs are provided in subsequent sections.</para><para><anchor id="_p_w_m_8h_1ti_drivers_PWM_Synopsis"/><heading level="2">Synopsis</heading>
</para><para><anchor id="_p_w_m_8h_1ti_drivers_PWM_Synopsis_Code"/><programlisting><codeline><highlight class="normal">//<sp/>Import<sp/>PWM<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/PWM.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">PWM_Handle<sp/>pwm;</highlight></codeline>
<codeline><highlight class="normal">PWM_Params<sp/>pwmParams;</highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/><sp/><sp/>dutyValue;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>the<sp/>PWM<sp/>driver.</highlight></codeline>
<codeline><highlight class="normal">PWM_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>the<sp/>PWM<sp/>parameters</highlight></codeline>
<codeline><highlight class="normal">PWM_Params_init(&amp;pwmParams);</highlight></codeline>
<codeline><highlight class="normal">pwmParams.idleLevel<sp/>=<sp/>PWM_IDLE_LOW;<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Output<sp/>low<sp/>when<sp/>PWM<sp/>is<sp/>not<sp/>running</highlight></codeline>
<codeline><highlight class="normal">pwmParams.periodUnits<sp/>=<sp/>PWM_PERIOD_HZ;<sp/><sp/><sp/>//<sp/>Period<sp/>is<sp/>in<sp/>Hz</highlight></codeline>
<codeline><highlight class="normal">pwmParams.periodValue<sp/>=<sp/>1e6;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>1MHz</highlight></codeline>
<codeline><highlight class="normal">pwmParams.dutyUnits<sp/>=<sp/>PWM_DUTY_FRACTION;<sp/>//<sp/>Duty<sp/>is<sp/>in<sp/>fractional<sp/>percentage</highlight></codeline>
<codeline><highlight class="normal">pwmParams.dutyValue<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>0%<sp/>initial<sp/>duty<sp/>cycle</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Open<sp/>the<sp/>PWM<sp/>instance</highlight></codeline>
<codeline><highlight class="normal">pwm<sp/>=<sp/>PWM_open(Board_PWM0,<sp/>&amp;pwmParams);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(pwm<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>PWM_open()<sp/>failed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">PWM_start(pwm);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>start<sp/>PWM<sp/>with<sp/>0%<sp/>duty<sp/>cycle</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">dutyValue<sp/>=<sp/>(uint32_t)<sp/>(((uint64_t)<sp/>PWM_DUTY_FRACTION_MAX<sp/>*<sp/>37)<sp/>/<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">PWM_setDuty(pwm,<sp/>dutyValue);<sp/><sp/>//<sp/>set<sp/>duty<sp/>cycle<sp/>to<sp/>37%</highlight></codeline>
</programlisting></para><para><hruler/>
 <anchor id="_p_w_m_8h_1ti_drivers_PWM_Examples"/><heading level="1">Examples</heading>
</para><para><itemizedlist>
<listitem><para><ref refid="_p_w_m_8h_1ti_drivers_PWM_Examples_open" kindref="member">Opening a PWM instance</ref> </para></listitem>
<listitem><para><ref refid="_p_w_m_8h_1ti_drivers_PWM_Examples_duty" kindref="member">Setting PWM duty</ref> </para></listitem>
<listitem><para><ref refid="_p_w_m_8h_1ti_drivers_PWM_Examples_dutyperiod" kindref="member">Setting PWM Duty and Period</ref></para></listitem>
</itemizedlist>
<anchor id="_p_w_m_8h_1ti_drivers_PWM_Examples_open"/><heading level="1">Opening a PWM instance</heading>
</para><para><programlisting><codeline><highlight class="normal">PWM_Handle<sp/>pwm;</highlight></codeline>
<codeline><highlight class="normal">PWM_Params<sp/>pwmParams;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">PWM_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">PWM_Params_init(&amp;pwmParams);</highlight></codeline>
<codeline><highlight class="normal">pwmParams.idleLevel<sp/>=<sp/>PWM_IDLE_LOW;</highlight></codeline>
<codeline><highlight class="normal">pwmParams.periodUnits<sp/>=<sp/>PWM_PERIOD_HZ;</highlight></codeline>
<codeline><highlight class="normal">pwmParams.periodValue<sp/>=<sp/>1e6;</highlight></codeline>
<codeline><highlight class="normal">pwmParams.dutyUnits<sp/>=<sp/>PWM_DUTY_FRACTION;</highlight></codeline>
<codeline><highlight class="normal">pwmParams.dutyValue<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">pwm<sp/>=<sp/>PWM_open(Board_PWM0,<sp/>&amp;pwmParams);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(pwm<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>PWM_open()<sp/>failed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><anchor id="_p_w_m_8h_1ti_drivers_PWM_Examples_duty"/><heading level="1">Setting PWM duty</heading>
</para><para>Once the PWM instance has been opened and started, the primary API used by the application will be <ref refid="_p_w_m_8h_1af72b43e2bcd68c0e78ae5dbe28db05c8" kindref="member">PWM_setDuty()</ref> to control the duty cycle of a PWM pin:</para><para>Below demonstrates setting the duty cycle to 45%.</para><para><programlisting><codeline><highlight class="normal">uint32_t<sp/>dutyCycle;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">dutyCycle<sp/>=<sp/>(uint32_t)<sp/>(((uint64_t)<sp/>PWM_DUTY_FRACTION_MAX<sp/>*<sp/>45)<sp/>/<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">PWM_setDuty(pwm,<sp/>dutyCycle);</highlight></codeline>
</programlisting></para><para><anchor id="_p_w_m_8h_1ti_drivers_PWM_Examples_dutyperiod"/><heading level="1">Setting PWM Duty and Period</heading>
</para><para>If an application needs to modify the duty and period of a running timer, an API is available to set both with as little interim time as possible. This minimises the possibility that a timeout will occur between one set call and the other. For low periods or for instances close to timeout, this API will pause the instance output briefly and must only be called when the PWM is already running.</para><para>Below demonstrates setting the duty cycle to 75% of the new period (100us).</para><para><programlisting><codeline><highlight class="normal">uint32_t<sp/>dutyCycle;</highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>periodUs<sp/>=<sp/>100;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">dutyCycle<sp/>=<sp/>(uint32_t)<sp/>(((uint64_t)<sp/>PWM_DUTY_FRACTION_MAX<sp/>*<sp/>75)<sp/>/<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">PWM_setDutyAndPeriod(pwm,<sp/>dutyCycle,<sp/>periodUs);</highlight></codeline>
</programlisting></para><para><heading level="3">Modes of Operation</heading>
</para><para>A PWM instance can be configured to interpret the period as one of three units:<itemizedlist>
<listitem><para><ref refid="_p_w_m_8h_1a11aa442e82549992c98729216d64fd63a35d73e8e481d16fd8c3880d9519894cd" kindref="member">PWM_PERIOD_US</ref>: The period is in microseconds.</para></listitem><listitem><para><ref refid="_p_w_m_8h_1a11aa442e82549992c98729216d64fd63a083c3462c199f39afc7a9d0541595b7a" kindref="member">PWM_PERIOD_HZ</ref>: The period is in (reciprocal) Hertz.</para></listitem><listitem><para><ref refid="_p_w_m_8h_1a11aa442e82549992c98729216d64fd63a52a5ee3b990d5edb816d19253bd9a571" kindref="member">PWM_PERIOD_COUNTS</ref>: The period is in timer counts.</para></listitem></itemizedlist>
</para><para>A PWM instance can be configured to interpret the duty as one of three units:<itemizedlist>
<listitem><para><ref refid="_p_w_m_8h_1abc7bc5565f2767cf9f06c1572044a8eeaf93cd02d0c2744e2d6a68a8e7070b7a6" kindref="member">PWM_DUTY_US</ref>: The duty is in microseconds.</para></listitem><listitem><para><ref refid="_p_w_m_8h_1abc7bc5565f2767cf9f06c1572044a8eea004d0d56bfc7f629990e7b6b55c3dd4f" kindref="member">PWM_DUTY_FRACTION</ref>: The duty is in a fractional part of the period where 0 is 0% and <ref refid="_p_w_m_8h_1a8b2763bf16c6446a35d536ea532f6a6c" kindref="member">PWM_DUTY_FRACTION_MAX</ref> is 100%.</para></listitem><listitem><para><ref refid="_p_w_m_8h_1abc7bc5565f2767cf9f06c1572044a8eea4a20018a9620ed669dff0893858a44b2" kindref="member">PWM_DUTY_COUNTS</ref>: The period is in timer counts and must be less than the period.</para></listitem></itemizedlist>
</para><para>The idle level parameter is used to set the output to high/low when the PWM is not running (stopped or not started). The idle level can be set to:<itemizedlist>
<listitem><para><ref refid="_p_w_m_8h_1a5a40c7014745d15b0c1a604dae5593f9a698cc876a94b3e0629d65fecfec8c8f5" kindref="member">PWM_IDLE_LOW</ref></para></listitem><listitem><para><ref refid="_p_w_m_8h_1a5a40c7014745d15b0c1a604dae5593f9a0b126918629a951139ef9f17d417c50d" kindref="member">PWM_IDLE_HIGH</ref></para></listitem></itemizedlist>
</para><para>The default PWM configuration is to set a duty of 0% with a 1MHz frequency. The default period units are in <ref refid="_p_w_m_8h_1a11aa442e82549992c98729216d64fd63a083c3462c199f39afc7a9d0541595b7a" kindref="member">PWM_PERIOD_HZ</ref> and the default duty units are in <ref refid="_p_w_m_8h_1abc7bc5565f2767cf9f06c1572044a8eea004d0d56bfc7f629990e7b6b55c3dd4f" kindref="member">PWM_DUTY_FRACTION</ref>. Finally, the default output idle level is <ref refid="_p_w_m_8h_1a5a40c7014745d15b0c1a604dae5593f9a698cc876a94b3e0629d65fecfec8c8f5" kindref="member">PWM_IDLE_LOW</ref>. It is the application&apos;s responsibility to set the duty for each PWM output used.</para><para><hruler/>
 <anchor id="_p_w_m_8h_1ti_drivers_PWM_Configuration"/><heading level="1">Configuration</heading>
</para><para>Refer to the <ref refid="index_1driver_configuration" kindref="member">Driver&apos;s Configuration</ref> section for driver configuration information. <hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2019,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*!****************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>PWM.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>Pulse<sp/>Width<sp/>Modulation<sp/>(PWM)<sp/>driver</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_PWM_Overview</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Overview<sp/>#</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>PWM<sp/>driver<sp/>in<sp/>TI-RTOS<sp/>facilitates<sp/>the<sp/>generation<sp/>of<sp/>Pulse<sp/>Width</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/>Modulated<sp/>signals<sp/>via<sp/>simple<sp/>and<sp/>portable<sp/>APIs.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/>When<sp/>a<sp/>PWM<sp/>instance<sp/>is<sp/>opened,<sp/>the<sp/>period,<sp/>duty<sp/>cycle<sp/>and<sp/>idle<sp/>level<sp/>are</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/>configured<sp/>and<sp/>the<sp/>PWM<sp/>is<sp/>stopped<sp/>(waveforms<sp/>not<sp/>generated<sp/>until<sp/>PWM_start()</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/>is<sp/>called).<sp/><sp/>The<sp/>maximum<sp/>period<sp/>and<sp/>duty<sp/>supported<sp/>is<sp/>device<sp/>dependent;</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/>refer<sp/>to<sp/>the<sp/>implementation<sp/>specific<sp/>documentation<sp/>for<sp/>values.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/>PWM<sp/>outputs<sp/>are<sp/>active-high,<sp/>meaning<sp/>the<sp/>duty<sp/>will<sp/>control<sp/>the<sp/>duration<sp/>of</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/>high<sp/>output<sp/>on<sp/>the<sp/>pin<sp/>(at<sp/>0%<sp/>duty,<sp/>the<sp/>output<sp/>is<sp/>always<sp/>low,<sp/>at<sp/>100%<sp/>duty,</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>output<sp/>is<sp/>always<sp/>high).</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_PWM_Usage</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Usage</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>documentation<sp/>provides<sp/>a<sp/>basic<sp/>@ref<sp/>ti_drivers_PWM_Synopsis</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/>&quot;usage<sp/>summary&quot;<sp/>and<sp/>a<sp/>set<sp/>of<sp/>@ref<sp/>ti_drivers_PWM_Examples<sp/>&quot;examples&quot;</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/>in<sp/>the<sp/>form<sp/>of<sp/>commented<sp/>code<sp/>fragments.<sp/>Detailed<sp/>descriptions<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/>APIs<sp/>are<sp/>provided<sp/>in<sp/>subsequent<sp/>sections.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_PWM_Synopsis</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Synopsis</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_PWM_Synopsis_Code</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Import<sp/>PWM<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/PWM.h&gt;</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/>PWM_Handle<sp/>pwm;</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/>PWM_Params<sp/>pwmParams;</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/>uint32_t<sp/><sp/><sp/>dutyValue;</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Initialize<sp/>the<sp/>PWM<sp/>driver.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/>PWM_init();</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Initialize<sp/>the<sp/>PWM<sp/>parameters</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/>PWM_Params_init(&amp;pwmParams);</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/>pwmParams.idleLevel<sp/>=<sp/>PWM_IDLE_LOW;<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Output<sp/>low<sp/>when<sp/>PWM<sp/>is<sp/>not<sp/>running</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/><sp/>pwmParams.periodUnits<sp/>=<sp/>PWM_PERIOD_HZ;<sp/><sp/><sp/>//<sp/>Period<sp/>is<sp/>in<sp/>Hz</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/><sp/>pwmParams.periodValue<sp/>=<sp/>1e6;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>1MHz</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/><sp/>pwmParams.dutyUnits<sp/>=<sp/>PWM_DUTY_FRACTION;<sp/>//<sp/>Duty<sp/>is<sp/>in<sp/>fractional<sp/>percentage</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/>pwmParams.dutyValue<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>0%<sp/>initial<sp/>duty<sp/>cycle</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Open<sp/>the<sp/>PWM<sp/>instance</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/>pwm<sp/>=<sp/>PWM_open(Board_PWM0,<sp/>&amp;pwmParams);</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(pwm<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>PWM_open()<sp/>failed</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/>PWM_start(pwm);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>start<sp/>PWM<sp/>with<sp/>0%<sp/>duty<sp/>cycle</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/>dutyValue<sp/>=<sp/>(uint32_t)<sp/>(((uint64_t)<sp/>PWM_DUTY_FRACTION_MAX<sp/>*<sp/>37)<sp/>/<sp/>100);</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/>PWM_setDuty(pwm,<sp/>dutyValue);<sp/><sp/>//<sp/>set<sp/>duty<sp/>cycle<sp/>to<sp/>37%</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_PWM_Examples</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Examples</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>@ref<sp/>ti_drivers_PWM_Examples_open<sp/>&quot;Opening<sp/>a<sp/>PWM<sp/>instance&quot;</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>@ref<sp/>ti_drivers_PWM_Examples_duty<sp/>&quot;Setting<sp/>PWM<sp/>duty&quot;</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>@ref<sp/>ti_drivers_PWM_Examples_dutyperiod<sp/>&quot;Setting<sp/>PWM<sp/>Duty<sp/>and<sp/>Period&quot;</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_PWM_Examples_open</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Opening<sp/>a<sp/>PWM<sp/>instance</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/><sp/>PWM_Handle<sp/>pwm;</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/>PWM_Params<sp/>pwmParams;</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/><sp/>PWM_init();</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/><sp/>PWM_Params_init(&amp;pwmParams);</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/><sp/>pwmParams.idleLevel<sp/>=<sp/>PWM_IDLE_LOW;</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/><sp/>pwmParams.periodUnits<sp/>=<sp/>PWM_PERIOD_HZ;</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/><sp/>pwmParams.periodValue<sp/>=<sp/>1e6;</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/><sp/>pwmParams.dutyUnits<sp/>=<sp/>PWM_DUTY_FRACTION;</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/><sp/>pwmParams.dutyValue<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/><sp/>pwm<sp/>=<sp/>PWM_open(Board_PWM0,<sp/>&amp;pwmParams);</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(pwm<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>PWM_open()<sp/>failed</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_PWM_Examples_duty</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Setting<sp/>PWM<sp/>duty</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/><sp/>Once<sp/>the<sp/>PWM<sp/>instance<sp/>has<sp/>been<sp/>opened<sp/>and<sp/>started,<sp/>the<sp/>primary<sp/>API<sp/>used</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/><sp/>by<sp/>the<sp/>application<sp/>will<sp/>be<sp/>#PWM_setDuty()<sp/>to<sp/>control<sp/>the<sp/>duty<sp/>cycle<sp/>of<sp/>a</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/><sp/>PWM<sp/>pin:</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/><sp/>Below<sp/>demonstrates<sp/>setting<sp/>the<sp/>duty<sp/>cycle<sp/>to<sp/>45%.</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/><sp/>uint32_t<sp/>dutyCycle;</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/><sp/>dutyCycle<sp/>=<sp/>(uint32_t)<sp/>(((uint64_t)<sp/>PWM_DUTY_FRACTION_MAX<sp/>*<sp/>45)<sp/>/<sp/>100);</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/><sp/>PWM_setDuty(pwm,<sp/>dutyCycle);</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_PWM_Examples_dutyperiod</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Setting<sp/>PWM<sp/>Duty<sp/>and<sp/>Period</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>an<sp/>application<sp/>needs<sp/>to<sp/>modify<sp/>the<sp/>duty<sp/>and<sp/>period<sp/>of<sp/>a<sp/>running<sp/>timer,</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/><sp/>an<sp/>API<sp/>is<sp/>available<sp/>to<sp/>set<sp/>both<sp/>with<sp/>as<sp/>little<sp/>interim<sp/>time<sp/>as<sp/>possible.</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>minimises<sp/>the<sp/>possibility<sp/>that<sp/>a<sp/>timeout<sp/>will<sp/>occur<sp/>between<sp/>one<sp/>set</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/><sp/>call<sp/>and<sp/>the<sp/>other.<sp/>For<sp/>low<sp/>periods<sp/>or<sp/>for<sp/>instances<sp/>close<sp/>to<sp/>timeout,<sp/>this</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/><sp/>API<sp/>will<sp/>pause<sp/>the<sp/>instance<sp/>output<sp/>briefly<sp/>and<sp/>must<sp/>only<sp/>be<sp/>called<sp/>when<sp/>the</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/><sp/>PWM<sp/>is<sp/>already<sp/>running.</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/><sp/>Below<sp/>demonstrates<sp/>setting<sp/>the<sp/>duty<sp/>cycle<sp/>to<sp/>75%<sp/>of<sp/>the<sp/>new<sp/>period<sp/>(100us).</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/><sp/>uint32_t<sp/>dutyCycle;</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/><sp/>uint32_t<sp/>periodUs<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/><sp/>dutyCycle<sp/>=<sp/>(uint32_t)<sp/>(((uint64_t)<sp/>PWM_DUTY_FRACTION_MAX<sp/>*<sp/>75)<sp/>/<sp/>100);</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/><sp/>PWM_setDutyAndPeriod(pwm,<sp/>dutyCycle,<sp/>periodUs);</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Modes<sp/>of<sp/>Operation<sp/>#</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/><sp/>A<sp/>PWM<sp/>instance<sp/>can<sp/>be<sp/>configured<sp/>to<sp/>interpret<sp/>the<sp/>period<sp/>as<sp/>one<sp/>of<sp/>three</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/><sp/>units:</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>#PWM_PERIOD_US:<sp/>The<sp/>period<sp/>is<sp/>in<sp/>microseconds.</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>#PWM_PERIOD_HZ:<sp/>The<sp/>period<sp/>is<sp/>in<sp/>(reciprocal)<sp/>Hertz.</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>#PWM_PERIOD_COUNTS:<sp/>The<sp/>period<sp/>is<sp/>in<sp/>timer<sp/>counts.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/><sp/>A<sp/>PWM<sp/>instance<sp/>can<sp/>be<sp/>configured<sp/>to<sp/>interpret<sp/>the<sp/>duty<sp/>as<sp/>one<sp/>of<sp/>three</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/><sp/>units:</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>#PWM_DUTY_US:<sp/>The<sp/>duty<sp/>is<sp/>in<sp/>microseconds.</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>#PWM_DUTY_FRACTION:<sp/>The<sp/>duty<sp/>is<sp/>in<sp/>a<sp/>fractional<sp/>part<sp/>of<sp/>the<sp/>period</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>where<sp/>0<sp/>is<sp/>0%<sp/>and<sp/>#PWM_DUTY_FRACTION_MAX<sp/>is<sp/>100%.</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>#PWM_DUTY_COUNTS:<sp/>The<sp/>period<sp/>is<sp/>in<sp/>timer<sp/>counts<sp/>and<sp/>must<sp/>be<sp/>less<sp/>than</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>period.</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>idle<sp/>level<sp/>parameter<sp/>is<sp/>used<sp/>to<sp/>set<sp/>the<sp/>output<sp/>to<sp/>high/low<sp/>when<sp/>the</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/><sp/>PWM<sp/>is<sp/>not<sp/>running<sp/>(stopped<sp/>or<sp/>not<sp/>started).<sp/><sp/>The<sp/>idle<sp/>level<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/><sp/>set<sp/>to:</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>#PWM_IDLE_LOW</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>#PWM_IDLE_HIGH</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>default<sp/>PWM<sp/>configuration<sp/>is<sp/>to<sp/>set<sp/>a<sp/>duty<sp/>of<sp/>0%<sp/>with<sp/>a<sp/>1MHz<sp/>frequency.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>default<sp/>period<sp/>units<sp/>are<sp/>in<sp/>#PWM_PERIOD_HZ<sp/>and<sp/>the<sp/>default<sp/>duty<sp/>units</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/><sp/>are<sp/>in<sp/>#PWM_DUTY_FRACTION.<sp/><sp/>Finally,<sp/>the<sp/>default<sp/>output<sp/>idle<sp/>level<sp/>is</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/><sp/>#PWM_IDLE_LOW.<sp/><sp/>It<sp/>is<sp/>the<sp/>application&apos;s<sp/>responsibility<sp/>to<sp/>set<sp/>the<sp/>duty<sp/>for</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/><sp/>each<sp/>PWM<sp/>output<sp/>used.</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_PWM_Configuration</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Configuration</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/><sp/>Refer<sp/>to<sp/>the<sp/>@ref<sp/>driver_configuration<sp/>&quot;Driver&apos;s<sp/>Configuration&quot;<sp/>section</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/><sp/>for<sp/>driver<sp/>configuration<sp/>information.</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_PWM__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_PWM__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="_p_w_m_8h_1a8b2763bf16c6446a35d536ea532f6a6c" refkind="member"><highlight class="preprocessor">#define<sp/>PWM_DUTY_FRACTION_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)<sp/>~0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="_p_w_m_8h_1ad731f4db58c72d280900da4be6e3434c" refkind="member"><highlight class="preprocessor">#define<sp/>PWM_CMD_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="243" refid="_p_w_m_8h_1a88616e9288d6e3a4dbab321af26cc04a" refkind="member"><highlight class="preprocessor">#define<sp/>PWM_STATUS_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="_p_w_m_8h_1a9b234f3cd0bdffc3da5b56a6c4db9563" refkind="member"><highlight class="preprocessor">#define<sp/>PWM_STATUS_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="_p_w_m_8h_1a739297dfb10ab4363e7b5db30fdd1ce0" refkind="member"><highlight class="preprocessor">#define<sp/>PWM_STATUS_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="269" refid="_p_w_m_8h_1afed58384f49ce364218eeaabb0858bea" refkind="member"><highlight class="preprocessor">#define<sp/>PWM_STATUS_UNDEFINEDCMD<sp/><sp/><sp/><sp/><sp/><sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="_p_w_m_8h_1a5541b99566b02450b1d44b3bf0c344bc" refkind="member"><highlight class="preprocessor">#define<sp/>PWM_STATUS_INVALID_PERIOD<sp/><sp/><sp/><sp/>(-3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="_p_w_m_8h_1ac3b90551ab071520eccaabe4cabe1f1a" refkind="member"><highlight class="preprocessor">#define<sp/>PWM_STATUS_INVALID_DUTY<sp/><sp/><sp/><sp/><sp/><sp/>(-4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="_p_w_m_8h_1a11aa442e82549992c98729216d64fd63" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="292" refid="_p_w_m_8h_1a11aa442e82549992c98729216d64fd63a35d73e8e481d16fd8c3880d9519894cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a11aa442e82549992c98729216d64fd63a35d73e8e481d16fd8c3880d9519894cd" kindref="member">PWM_PERIOD_US</ref>,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="293" refid="_p_w_m_8h_1a11aa442e82549992c98729216d64fd63a083c3462c199f39afc7a9d0541595b7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a11aa442e82549992c98729216d64fd63a083c3462c199f39afc7a9d0541595b7a" kindref="member">PWM_PERIOD_HZ</ref>,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="295" refid="_p_w_m_8h_1a11aa442e82549992c98729216d64fd63a52a5ee3b990d5edb816d19253bd9a571" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a11aa442e82549992c98729216d64fd63a52a5ee3b990d5edb816d19253bd9a571" kindref="member">PWM_PERIOD_COUNTS</ref><sp/></highlight></codeline>
<codeline lineno="296"><highlight class="normal">}<sp/><ref refid="_p_w_m_8h_1a11aa442e82549992c98729216d64fd63" kindref="member">PWM_Period_Units</ref>;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="_p_w_m_8h_1abc7bc5565f2767cf9f06c1572044a8ee" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="303" refid="_p_w_m_8h_1abc7bc5565f2767cf9f06c1572044a8eeaf93cd02d0c2744e2d6a68a8e7070b7a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1abc7bc5565f2767cf9f06c1572044a8eeaf93cd02d0c2744e2d6a68a8e7070b7a6" kindref="member">PWM_DUTY_US</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="304" refid="_p_w_m_8h_1abc7bc5565f2767cf9f06c1572044a8eea004d0d56bfc7f629990e7b6b55c3dd4f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1abc7bc5565f2767cf9f06c1572044a8eea004d0d56bfc7f629990e7b6b55c3dd4f" kindref="member">PWM_DUTY_FRACTION</ref>,<sp/></highlight></codeline>
<codeline lineno="308" refid="_p_w_m_8h_1abc7bc5565f2767cf9f06c1572044a8eea4a20018a9620ed669dff0893858a44b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1abc7bc5565f2767cf9f06c1572044a8eea4a20018a9620ed669dff0893858a44b2" kindref="member">PWM_DUTY_COUNTS</ref><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="309"><highlight class="normal">}<sp/><ref refid="_p_w_m_8h_1abc7bc5565f2767cf9f06c1572044a8ee" kindref="member">PWM_Duty_Units</ref>;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="_p_w_m_8h_1a5a40c7014745d15b0c1a604dae5593f9" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="315" refid="_p_w_m_8h_1a5a40c7014745d15b0c1a604dae5593f9a698cc876a94b3e0629d65fecfec8c8f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a5a40c7014745d15b0c1a604dae5593f9a698cc876a94b3e0629d65fecfec8c8f5" kindref="member">PWM_IDLE_LOW</ref><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="316" refid="_p_w_m_8h_1a5a40c7014745d15b0c1a604dae5593f9a0b126918629a951139ef9f17d417c50d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a5a40c7014745d15b0c1a604dae5593f9a0b126918629a951139ef9f17d417c50d" kindref="member">PWM_IDLE_HIGH</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}<sp/><ref refid="_p_w_m_8h_1a5a40c7014745d15b0c1a604dae5593f9" kindref="member">PWM_IdleLevel</ref>;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="struct_p_w_m___params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="328" refid="struct_p_w_m___params_1a9b31d4a26ee33211085b5a9a983f6f9c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PWM_Period_Units<sp/><ref refid="struct_p_w_m___params_1a9b31d4a26ee33211085b5a9a983f6f9c" kindref="member">periodUnits</ref>;<sp/></highlight></codeline>
<codeline lineno="329" refid="struct_p_w_m___params_1abb64879de715fcfa14e9c756f279b972" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_p_w_m___params_1abb64879de715fcfa14e9c756f279b972" kindref="member">periodValue</ref>;<sp/></highlight></codeline>
<codeline lineno="330" refid="struct_p_w_m___params_1aa8616ac3e487fe6b46fd0486c10873d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PWM_Duty_Units<sp/><sp/><sp/><ref refid="struct_p_w_m___params_1aa8616ac3e487fe6b46fd0486c10873d3" kindref="member">dutyUnits</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="331" refid="struct_p_w_m___params_1ad0ed6daabdc32e1eecfae60ebe13e975" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_p_w_m___params_1ad0ed6daabdc32e1eecfae60ebe13e975" kindref="member">dutyValue</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="332" refid="struct_p_w_m___params_1adc9d7e702b3e45b68e448ad4811a3691" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a5a40c7014745d15b0c1a604dae5593f9" kindref="member">PWM_IdleLevel</ref><sp/><sp/><sp/><sp/><ref refid="struct_p_w_m___params_1adc9d7e702b3e45b68e448ad4811a3691" kindref="member">idleLevel</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="333" refid="struct_p_w_m___params_1a37396e0fa9aac45d2a8292cf5d653471" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_p_w_m___params_1a37396e0fa9aac45d2a8292cf5d653471" kindref="member">custom</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="335"><highlight class="normal">}<sp/><ref refid="struct_p_w_m___params" kindref="compound">PWM_Params</ref>;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_p_w_m___config__" kindref="compound">PWM_Config_</ref><sp/>*<ref refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" kindref="member">PWM_Handle</ref>;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="_p_w_m_8h_1a1643d365dfa900197b324ea74035d2ec" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_p_w_m_8h_1a1643d365dfa900197b324ea74035d2ec" kindref="member">PWM_CloseFxn</ref>)<sp/>(PWM_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="_p_w_m_8h_1a0ac1147ec944a3873ec1dad81d8c949f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_p_w_m_8h_1a0ac1147ec944a3873ec1dad81d8c949f" kindref="member">PWM_ControlFxn</ref>)<sp/>(PWM_Handle<sp/>handle,<sp/>uint_fast16_t<sp/>cmd,</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="358" refid="_p_w_m_8h_1a38666ae4b117b81d35758258012b251a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_p_w_m_8h_1a38666ae4b117b81d35758258012b251a" kindref="member">PWM_InitFxn</ref>)<sp/>(PWM_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="364" refid="_p_w_m_8h_1a16b7b446398f8b90e4fa287c6e4a0981" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" kindref="member">PWM_Handle</ref><sp/>(*<ref refid="_p_w_m_8h_1a16b7b446398f8b90e4fa287c6e4a0981" kindref="member">PWM_OpenFxn</ref>)<sp/>(PWM_Handle<sp/>handle,<sp/><ref refid="struct_p_w_m___params" kindref="compound">PWM_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="370" refid="_p_w_m_8h_1a7e90114309f62bc7ddf878c2e1b46cd2" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_p_w_m_8h_1a7e90114309f62bc7ddf878c2e1b46cd2" kindref="member">PWM_SetDutyFxn</ref>)<sp/>(PWM_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>duty);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="377" refid="_p_w_m_8h_1a2761c0836cae3a3d56cf8e819d54a214" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_p_w_m_8h_1a2761c0836cae3a3d56cf8e819d54a214" kindref="member">PWM_SetPeriodFxn</ref>)<sp/>(PWM_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>period);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="384" refid="_p_w_m_8h_1a1e01d56b827255daf0b927e3d6d35ea8" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_p_w_m_8h_1a1e01d56b827255daf0b927e3d6d35ea8" kindref="member">PWM_SetDutyAndPeriodFxn</ref>)<sp/>(PWM_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>duty,<sp/>uint32_t<sp/>period);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="391" refid="_p_w_m_8h_1af0a392fb66c104f9d60e80e023dd3b89" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_p_w_m_8h_1af0a392fb66c104f9d60e80e023dd3b89" kindref="member">PWM_StartFxn</ref>)<sp/>(PWM_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="_p_w_m_8h_1aff8ad682f40a810ecf03824e8e190087" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_p_w_m_8h_1aff8ad682f40a810ecf03824e8e190087" kindref="member">PWM_StopFxn</ref>)<sp/>(PWM_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="struct_p_w_m___fxn_table__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_p_w_m___fxn_table__" kindref="compound">PWM_FxnTable_</ref><sp/>{</highlight></codeline>
<codeline lineno="406" refid="struct_p_w_m___fxn_table___1aa762279c4052544260de1030664f2ab0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a1643d365dfa900197b324ea74035d2ec" kindref="member">PWM_CloseFxn</ref><sp/><sp/><sp/><sp/><sp/><ref refid="struct_p_w_m___fxn_table___1aa762279c4052544260de1030664f2ab0" kindref="member">closeFxn</ref>;</highlight></codeline>
<codeline lineno="408" refid="struct_p_w_m___fxn_table___1a0fa8ed3f89c78c39be160efedf5344d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a0ac1147ec944a3873ec1dad81d8c949f" kindref="member">PWM_ControlFxn</ref><sp/><sp/><sp/><ref refid="struct_p_w_m___fxn_table___1a0fa8ed3f89c78c39be160efedf5344d8" kindref="member">controlFxn</ref>;</highlight></codeline>
<codeline lineno="410" refid="struct_p_w_m___fxn_table___1a1698c7ea2dc391cd3b445c1ac532ce3f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a38666ae4b117b81d35758258012b251a" kindref="member">PWM_InitFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_p_w_m___fxn_table___1a1698c7ea2dc391cd3b445c1ac532ce3f" kindref="member">initFxn</ref>;</highlight></codeline>
<codeline lineno="412" refid="struct_p_w_m___fxn_table___1a29e0d64f10ef19b8729f8fec2a07f9e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a16b7b446398f8b90e4fa287c6e4a0981" kindref="member">PWM_OpenFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_p_w_m___fxn_table___1a29e0d64f10ef19b8729f8fec2a07f9e1" kindref="member">openFxn</ref>;</highlight></codeline>
<codeline lineno="414" refid="struct_p_w_m___fxn_table___1a0f886757fbe16e89545ab64b8d5c4ac5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a7e90114309f62bc7ddf878c2e1b46cd2" kindref="member">PWM_SetDutyFxn</ref><sp/><sp/><sp/><ref refid="struct_p_w_m___fxn_table___1a0f886757fbe16e89545ab64b8d5c4ac5" kindref="member">setDutyFxn</ref>;</highlight></codeline>
<codeline lineno="416" refid="struct_p_w_m___fxn_table___1a47c0e665d032075f42dd41841a0eb9e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a2761c0836cae3a3d56cf8e819d54a214" kindref="member">PWM_SetPeriodFxn</ref><sp/><ref refid="struct_p_w_m___fxn_table___1a47c0e665d032075f42dd41841a0eb9e0" kindref="member">setPeriodFxn</ref>;</highlight></codeline>
<codeline lineno="418" refid="struct_p_w_m___fxn_table___1a3bce9431abacba278ae460c511f37940" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a1e01d56b827255daf0b927e3d6d35ea8" kindref="member">PWM_SetDutyAndPeriodFxn</ref><sp/><ref refid="struct_p_w_m___fxn_table___1a3bce9431abacba278ae460c511f37940" kindref="member">setDutyAndPeriodFxn</ref>;</highlight></codeline>
<codeline lineno="420" refid="struct_p_w_m___fxn_table___1aca222c4acfc632a9855fdfdefb833780" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1af0a392fb66c104f9d60e80e023dd3b89" kindref="member">PWM_StartFxn</ref><sp/><sp/><sp/><sp/><sp/><ref refid="struct_p_w_m___fxn_table___1aca222c4acfc632a9855fdfdefb833780" kindref="member">startFxn</ref>;</highlight></codeline>
<codeline lineno="422" refid="struct_p_w_m___fxn_table___1aa7ab83d44d13aa21391180e3cc39a687" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1aff8ad682f40a810ecf03824e8e190087" kindref="member">PWM_StopFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_p_w_m___fxn_table___1aa7ab83d44d13aa21391180e3cc39a687" kindref="member">stopFxn</ref>;</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}<sp/><ref refid="_p_w_m_8h_1a1c3809a9bd3c63a04edc1bafa78cc2e2" kindref="member">PWM_FxnTable</ref>;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="432" refid="struct_p_w_m___config__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_p_w_m___config__" kindref="compound">PWM_Config_</ref><sp/>{</highlight></codeline>
<codeline lineno="434" refid="struct_p_w_m___config___1a36b812aeed91072b4a917e7342278d3b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_p_w_m___fxn_table__" kindref="compound">PWM_FxnTable</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_p_w_m___config___1a36b812aeed91072b4a917e7342278d3b" kindref="member">fxnTablePtr</ref>;</highlight></codeline>
<codeline lineno="436" refid="struct_p_w_m___config___1ab0f7f8412e33fb690759b836069356a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_p_w_m___config___1ab0f7f8412e33fb690759b836069356a2" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="438" refid="struct_p_w_m___config___1a93a946b1ade9f430d4d1aae474e41f6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_p_w_m___config___1a93a946b1ade9f430d4d1aae474e41f6c" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}<sp/><ref refid="_p_w_m_8h_1af4fdcd36077e2aba99d6996ae1ea64ec" kindref="member">PWM_Config</ref>;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_p_w_m_8h_1a0e0f5899b067d27653db566fb148db11" kindref="member">PWM_close</ref>(PWM_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_p_w_m_8h_1a7f5a5dd263b9d95f4fd71fbb69455369" kindref="member">PWM_control</ref>(PWM_Handle<sp/>handle,<sp/>uint_fast16_t<sp/>cmd,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_p_w_m_8h_1aadae3fe77e36cbf9643a22eeb99fb01e" kindref="member">PWM_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>PWM_Handle<sp/><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open</ref>(uint_least8_t<sp/>index,<sp/><ref refid="struct_p_w_m___params" kindref="compound">PWM_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_p_w_m_8h_1acbdd3192f9f06bf689e4a3855926dcac" kindref="member">PWM_Params_init</ref>(<ref refid="struct_p_w_m___params" kindref="compound">PWM_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_p_w_m_8h_1af72b43e2bcd68c0e78ae5dbe28db05c8" kindref="member">PWM_setDuty</ref>(PWM_Handle<sp/>handle,<sp/>uint32_t<sp/>duty);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_p_w_m_8h_1afc1925126582a5a0721f992b92739e06" kindref="member">PWM_setPeriod</ref>(PWM_Handle<sp/>handle,<sp/>uint32_t<sp/>period);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_p_w_m_8h_1a3cc7201c72502a6d294ad1320e5a3c25" kindref="member">PWM_setDutyAndPeriod</ref>(PWM_Handle<sp/>handle,<sp/>uint32_t<sp/>duty,<sp/>uint32_t<sp/>period);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_p_w_m_8h_1aa1bd0cc3f0fa52879422fca74d254378" kindref="member">PWM_start</ref>(PWM_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_p_w_m_8h_1ae83a4cd327a07d6037ff1a8d72fb3ae6" kindref="member">PWM_stop</ref>(PWM_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_PWM__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_msp432/source/ti/drivers/PWM.h"/>
  </compounddef>
</doxygen>
