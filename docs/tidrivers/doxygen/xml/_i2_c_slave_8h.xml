<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_i2_c_slave_8h" kind="file" language="C++">
    <compoundname>I2CSlave.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <includedby refid="_i2_c_slave_m_s_p432_8h" local="no">I2CSlaveMSP432.h</includedby>
    <incdepgraph>
      <node id="119">
        <label>stdbool.h</label>
      </node>
      <node id="121">
        <label>stdint.h</label>
      </node>
      <node id="120">
        <label>stddef.h</label>
      </node>
      <node id="118">
        <label>I2CSlave.h</label>
        <link refid="_i2_c_slave_8h"/>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="122">
        <label>I2CSlave.h</label>
        <link refid="_i2_c_slave_8h"/>
        <childnode refid="123" relation="include">
        </childnode>
      </node>
      <node id="123">
        <label>I2CSlaveMSP432.h</label>
        <link refid="_i2_c_slave_m_s_p432_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_i2_c_slave___params__" prot="public">I2CSlave_Params_</innerclass>
    <innerclass refid="struct_i2_c_slave___fxn_table__" prot="public">I2CSlave_FxnTable_</innerclass>
    <innerclass refid="struct_i2_c_slave___config__" prot="public">I2CSlave_Config_</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___i2_c_s_l_a_v_e___c_o_n_t_r_o_l_1ga50e2b786948f487d4cb975e5581d93df" prot="public" static="no">
        <name>I2CSLAVE_CMD_RESERVED</name>
        <initializer>(32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common I2CSlave_control command code reservation offset. I2CSlave driver implementations should offset command codes with I2CSLAVE_CMD_RESERVED growing positively</para><para>Example implementation specific command codes: <programlisting><codeline><highlight class="normal">#define<sp/>I2CSLAVEXYZ_COMMAND0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2CSLAVE_CMD_RESERVED<sp/>+<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>I2CSLAVEXYZ_COMMAND1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2CSLAVE_CMD_RESERVED<sp/>+<sp/>1</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="146" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c_s_l_a_v_e___c_o_n_t_r_o_l_1ga9fe1fa8f941643c68c443fc089fadf3c" prot="public" static="no">
        <name>I2CSLAVE_STATUS_RESERVED</name>
        <initializer>(-32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common I2CSlave_control status code reservation offset. I2CSlave driver implementations should offset status codes with I2CSLAVE_STATUS_RESERVED growing negatively.</para><para>Example implementation specific status codes: <programlisting><codeline><highlight class="normal">#define<sp/>I2CSLAVEXYZ_STATUS_ERROR0<sp/><sp/><sp/><sp/><sp/>I2CSLAVE_STATUS_RESERVED<sp/>-<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>I2CSLAVEXYZ_STATUS_ERROR1<sp/><sp/><sp/><sp/><sp/>I2CSLAVE_STATUS_RESERVED<sp/>-<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>I2CSLAVEXYZ_STATUS_ERROR2<sp/><sp/><sp/><sp/><sp/>I2CSLAVE_STATUS_RESERVED<sp/>-<sp/>2</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="160" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c_s_l_a_v_e___s_t_a_t_u_s_1ga5fefb558e9268fd792ec49f80b697474" prot="public" static="no">
        <name>I2CSLAVE_STATUS_SUCCESS</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>Successful status code returned by <ref refid="_i2_c_slave_8h_1a42d235433a86656597ae52d44a005513" kindref="member">I2CSlave_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_i2_c_slave_8h_1a42d235433a86656597ae52d44a005513" kindref="member">I2CSlave_control()</ref> returns I2CSLAVE_STATUS_SUCCESS if the control code was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="174" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c_s_l_a_v_e___s_t_a_t_u_s_1gacae8b3350c196cdb215b25d7ca170708" prot="public" static="no">
        <name>I2CSLAVE_STATUS_ERROR</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>Generic error status code returned by <ref refid="_i2_c_slave_8h_1a42d235433a86656597ae52d44a005513" kindref="member">I2CSlave_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_i2_c_slave_8h_1a42d235433a86656597ae52d44a005513" kindref="member">I2CSlave_control()</ref> returns I2CSLAVE_STATUS_ERROR if the control code was not executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="182" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c_s_l_a_v_e___s_t_a_t_u_s_1ga379b9d624bb9cd78f3d4991cc2d15dd2" prot="public" static="no">
        <name>I2CSLAVE_STATUS_UNDEFINEDCMD</name>
        <initializer>(-2)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_i2_c_slave_8h_1a42d235433a86656597ae52d44a005513" kindref="member">I2CSlave_control()</ref> for undefined command codes. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_i2_c_slave_8h_1a42d235433a86656597ae52d44a005513" kindref="member">I2CSlave_control()</ref> returns I2CSLAVE_STATUS_UNDEFINEDCMD if the control code is not recognized by the driver implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="191" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_i2_c_slave_8h_1a48d362407dc4c3375d9193e2990616ce" prot="public" static="no">
        <name>I2CSlave_Mode_</name>
        <enumvalue id="_i2_c_slave_8h_1a48d362407dc4c3375d9193e2990616cea0e5216f404dc3b5adf0da3c292d9217a" prot="public">
          <name>I2CSLAVE_IDLE_MODE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>I2CSlave is not performing a transaction </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_c_slave_8h_1a48d362407dc4c3375d9193e2990616cea74dcfa16de3abf3db4438ab4b0714522" prot="public">
          <name>I2CSLAVE_WRITE_MODE</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>I2CSlave is currently performing write </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_c_slave_8h_1a48d362407dc4c3375d9193e2990616ceada9f2fb28cb0a3bb13520f6e77c8f126" prot="public">
          <name>I2CSLAVE_READ_MODE</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>I2CSlave is currently performing read </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_c_slave_8h_1a48d362407dc4c3375d9193e2990616ceaa4f7f07c5cb10d98cc9dd08ffc40cf9a" prot="public">
          <name>I2CSLAVE_START_MODE</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>I2CSlave received a START from a master </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_c_slave_8h_1a48d362407dc4c3375d9193e2990616cea3f8c8244ead6629a301932793995b790" prot="public">
          <name>I2CSLAVE_ERROR</name>
          <initializer>= 0xFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>I2CSlave error has occurred, exit gracefully </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>I2CSlave mode. </para>        </briefdescription>
        <detaileddescription>
<para>This enum defines the state of the I2CSlave driver&apos;s state-machine. Do not modify. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="219" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="219" bodyend="225"/>
      </memberdef>
      <memberdef kind="enum" id="_i2_c_slave_8h_1a0c4c07ed8e3602b10c8ea9dd8fdf453c" prot="public" static="no">
        <name>I2CSlave_TransferMode_</name>
        <enumvalue id="_i2_c_slave_8h_1a0c4c07ed8e3602b10c8ea9dd8fdf453cac85f5a1e6bca3d9402b2e5704387fa8f" prot="public">
          <name>I2CSLAVE_MODE_BLOCKING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>I2CSlave read/write blocks execution </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_c_slave_8h_1a0c4c07ed8e3602b10c8ea9dd8fdf453ca1dda6ae35d8aa92739d2714a4eaa4107" prot="public">
          <name>I2CSLAVE_MODE_CALLBACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>I2CSlave read/wrire queues transactions and does not block </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>I2CSlave transfer mode. </para>        </briefdescription>
        <detaileddescription>
<para>I2CSLAVE_MODE_BLOCKING block task execution a I2CSlave transfer is in progress. I2CSLAVE_MODE_CALLBACK does not block task execution; but calls a callback function when the I2CSlave transfer has completed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="234" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="234" bodyend="238"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" prot="public" static="no">
        <type>struct <ref refid="struct_i2_c_slave___config__" kindref="compound">I2CSlave_Config_</ref> *</type>
        <definition>typedef struct I2CSlave_Config_* I2CSlave_Handle</definition>
        <argsstring></argsstring>
        <name>I2CSlave_Handle</name>
        <briefdescription>
<para>A handle that is returned from a <ref refid="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" kindref="member">I2CSlave_open()</ref> call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="211" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_slave_8h_1a1d4cf7dea3087f639e0731f6d04f2b33" prot="public" static="no">
        <type>enum <ref refid="_i2_c_slave_8h_1a48d362407dc4c3375d9193e2990616ce" kindref="member">I2CSlave_Mode_</ref></type>
        <definition>typedef enum I2CSlave_Mode_  I2CSlave_Mode</definition>
        <argsstring></argsstring>
        <name>I2CSlave_Mode</name>
        <briefdescription>
<para>I2CSlave mode. </para>        </briefdescription>
        <detaileddescription>
<para>This enum defines the state of the I2CSlave driver&apos;s state-machine. Do not modify. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="225" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_slave_8h_1a8797c0931604cbc2cc7ca6d362e9cb3e" prot="public" static="no">
        <type>enum <ref refid="_i2_c_slave_8h_1a0c4c07ed8e3602b10c8ea9dd8fdf453c" kindref="member">I2CSlave_TransferMode_</ref></type>
        <definition>typedef enum I2CSlave_TransferMode_  I2CSlave_TransferMode</definition>
        <argsstring></argsstring>
        <name>I2CSlave_TransferMode</name>
        <briefdescription>
<para>I2CSlave transfer mode. </para>        </briefdescription>
        <detaileddescription>
<para>I2CSLAVE_MODE_BLOCKING block task execution a I2CSlave transfer is in progress. I2CSLAVE_MODE_CALLBACK does not block task execution; but calls a callback function when the I2CSlave transfer has completed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_slave_8h_1a22bd71094a8a815bccdf665d85900412" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* I2CSlave_CallbackFxn) (I2CSlave_Handle handle, bool status)</definition>
        <argsstring>)(I2CSlave_Handle handle, bool status)</argsstring>
        <name>I2CSlave_CallbackFxn</name>
        <briefdescription>
<para>I2CSlave callback function. </para>        </briefdescription>
        <detaileddescription>
<para>User definable callback function prototype. The I2CSlave driver will call the defined function and pass in the I2CSlave driver&apos;s handle, and the return value of I2CSlave_read/I2CSlave_write.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2CSlave_Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2CSlave_Handle</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bool</parametername>
</parameternamelist>
<parameterdescription>
<para>Results of the I2CSlave transaction </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="251" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_slave_8h_1a0379ebfe2190ab186dc4bf9f08434210" prot="public" static="no">
        <type>struct <ref refid="struct_i2_c_slave___params__" kindref="compound">I2CSlave_Params_</ref></type>
        <definition>typedef struct I2CSlave_Params_  I2CSlave_Params</definition>
        <argsstring></argsstring>
        <name>I2CSlave_Params</name>
        <briefdescription>
<para>I2CSlave Parameters. </para>        </briefdescription>
        <detaileddescription>
<para>I2CSlave parameters are used to with the <ref refid="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" kindref="member">I2CSlave_open()</ref> call. Default values for these parameters are set using <ref refid="_i2_c_slave_8h_1a3c29bf7436be17348ea73fabb6ede3ae" kindref="member">I2CSlave_Params_init()</ref>.</para><para>If I2CSlave_TransferMode is set to I2CSLAVE_MODE_BLOCKING then I2CSlave_read or I2CSlave_write function calls will block thread execution until the transaction has completed.</para><para>If I2CSlave_TransferMode is set to I2CSLAVE_MODE_CALLBACK then I2CSlave read/write will not block thread execution and it will call the function specified by transferCallbackFxn. (regardless of error state).</para><para><simplesect kind="see"><para><ref refid="_i2_c_slave_8h_1a3c29bf7436be17348ea73fabb6ede3ae" kindref="member">I2CSlave_Params_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_slave_8h_1a9a2e6a8574316d6a494d208de4329fc7" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* I2CSlave_CloseFxn) (I2CSlave_Handle handle)</definition>
        <argsstring>)(I2CSlave_Handle handle)</argsstring>
        <name>I2CSlave_CloseFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_i2_c_slave_8h_1a323cbb394c10ab1018820c9a76eccc18" kindref="member">I2CSlave_close()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="285" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_slave_8h_1a14dd40af6e271fa3911a51526427d12f" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* I2CSlave_ControlFxn) (I2CSlave_Handle handle, uint_fast16_t cmd, void *arg)</definition>
        <argsstring>)(I2CSlave_Handle handle, uint_fast16_t cmd, void *arg)</argsstring>
        <name>I2CSlave_ControlFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_i2_c_slave_8h_1a42d235433a86656597ae52d44a005513" kindref="member">I2CSlave_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="291" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_slave_8h_1ae821c2b97cf6640cd58b8e0c40efb464" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* I2CSlave_InitFxn) (I2CSlave_Handle handle)</definition>
        <argsstring>)(I2CSlave_Handle handle)</argsstring>
        <name>I2CSlave_InitFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_i2_c_slave_8h_1ad7518283a3f3fb80cefe6cb7ca7a4a36" kindref="member">I2CSlave_init()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="299" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_slave_8h_1a7c6638bde6397024b1f1ece4f9baed37" prot="public" static="no">
        <type><ref refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" kindref="member">I2CSlave_Handle</ref>(*</type>
        <definition>typedef I2CSlave_Handle(* I2CSlave_OpenFxn) (I2CSlave_Handle handle, I2CSlave_Params *params)</definition>
        <argsstring>)(I2CSlave_Handle handle, I2CSlave_Params *params)</argsstring>
        <name>I2CSlave_OpenFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" kindref="member">I2CSlave_open()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="305" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_slave_8h_1a7515207a9b0bde39ff2744ac3ed366ea" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* I2CSlave_WriteFxn) (I2CSlave_Handle handle, const void *buffer, size_t size)</definition>
        <argsstring>)(I2CSlave_Handle handle, const void *buffer, size_t size)</argsstring>
        <name>I2CSlave_WriteFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of I2CSlave_WriteTransaction(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="312" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_slave_8h_1ac74d6f05afaf02a4238fe59a588cd787" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* I2CSlave_ReadFxn) (I2CSlave_Handle handle, void *buffer, size_t size)</definition>
        <argsstring>)(I2CSlave_Handle handle, void *buffer, size_t size)</argsstring>
        <name>I2CSlave_ReadFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_i2_c_slave_8h_1ac74d6f05afaf02a4238fe59a588cd787" kindref="member">I2CSlave_ReadFxn()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="320" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_slave_8h_1a4adcea9698de83af86f5d9d4e4331977" prot="public" static="no">
        <type>struct <ref refid="struct_i2_c_slave___fxn_table__" kindref="compound">I2CSlave_FxnTable_</ref></type>
        <definition>typedef struct I2CSlave_FxnTable_  I2CSlave_FxnTable</definition>
        <argsstring></argsstring>
        <name>I2CSlave_FxnTable</name>
        <briefdescription>
<para>The definition of a I2CSlave function table that contains the required set of functions to control a specific I2CSlave driver implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_slave_8h_1ae81019e35004896b31ade1170297886a" prot="public" static="no">
        <type>struct <ref refid="struct_i2_c_slave___config__" kindref="compound">I2CSlave_Config_</ref></type>
        <definition>typedef struct I2CSlave_Config_  I2CSlave_Config</definition>
        <argsstring></argsstring>
        <name>I2CSlave_Config</name>
        <briefdescription>
<para>I2CSlave Global configuration. </para>        </briefdescription>
        <detaileddescription>
<para>The I2CSlave_Config structure contains a set of pointers used to characterize the I2CSlave driver implementation.</para><para>This structure needs to be defined before calling <ref refid="_i2_c_slave_8h_1ad7518283a3f3fb80cefe6cb7ca7a4a36" kindref="member">I2CSlave_init()</ref> and it must not be changed thereafter.</para><para><simplesect kind="see"><para><ref refid="_i2_c_slave_8h_1ad7518283a3f3fb80cefe6cb7ca7a4a36" kindref="member">I2CSlave_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="369" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_i2_c_slave_8h_1a323cbb394c10ab1018820c9a76eccc18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2CSlave_close</definition>
        <argsstring>(I2CSlave_Handle handle)</argsstring>
        <name>I2CSlave_close</name>
        <param>
          <type><ref refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" kindref="member">I2CSlave_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to close a I2CSlave peripheral specified by the I2CSlave handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" kindref="member">I2CSlave_open()</ref> had to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A I2CSlave_Handle returned from I2CSlave_open</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" kindref="member">I2CSlave_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="381" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_c_slave_8h_1a42d235433a86656597ae52d44a005513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t I2CSlave_control</definition>
        <argsstring>(I2CSlave_Handle handle, uint_fast16_t cmd, void *arg)</argsstring>
        <name>I2CSlave_control</name>
        <param>
          <type><ref refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" kindref="member">I2CSlave_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint_fast16_t</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Function performs implementation specific features on a given I2CSlave_Handle. </para>        </briefdescription>
        <detaileddescription>
<para>Commands for I2CSlave_control can originate from <ref refid="_i2_c_slave_8h" kindref="compound">I2CSlave.h</ref> or from implementation specific I2CSlave*.h (<emphasis><ref refid="_i2_c_m_s_p432_8h" kindref="compound">I2CMSP432.h</ref></emphasis>, etc.. ) files. While commands from <ref refid="_i2_c_slave_8h" kindref="compound">I2CSlave.h</ref> are API portable across driver implementations, not all implementations may support all these commands. Conversely, commands from driver implementation specific I2CSlave*.h files add unique driver capabilities but are not API portable across all I2CSlave driver implementations.</para><para>Commands supported by <ref refid="_i2_c_slave_8h" kindref="compound">I2CSlave.h</ref> follow a I2CSLAVE_CMD_&lt;cmd&gt; naming convention.<linebreak/>
 Commands supported by I2CSlave*.h follow a I2CSLAVE*_CMD_&lt;cmd&gt; naming convention.<linebreak/>
 Each control command defines <bold>arg</bold> differently. The types of <bold>arg</bold> are documented with each command.</para><para>See <ref refid="group___i2_c_s_l_a_v_e___c_m_d" kindref="compound">I2CSlave_control command codes</ref> for command codes.</para><para>See <ref refid="group___i2_c_s_l_a_v_e___s_t_a_t_u_s" kindref="compound">I2CSlave_control return status codes</ref> for status codes.</para><para><simplesect kind="pre"><para><ref refid="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" kindref="member">I2CSlave_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A I2CSlave handle returned from <ref refid="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" kindref="member">I2CSlave_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>A command value defined by the driver specific implementation</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional R/W (read/write) argument that is accompanied with cmd</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Implementation specific return codes. Negative values indicate unsuccessful operations.</para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" kindref="member">I2CSlave_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="421" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_c_slave_8h_1ad7518283a3f3fb80cefe6cb7ca7a4a36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2CSlave_init</definition>
        <argsstring>(void)</argsstring>
        <name>I2CSlave_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to initializes the I2CSlave module. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The I2CSlave_config structure must exist and be persistent before this function can be called. This function must also be called before any other I2CSlave driver APIs. This function call does not modify any peripheral registers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="432" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" kindref="member">I2CSlave_Handle</ref></type>
        <definition>I2CSlave_Handle I2CSlave_open</definition>
        <argsstring>(uint_least8_t index, I2CSlave_Params *params)</argsstring>
        <name>I2CSlave_open</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="_i2_c_slave_8h_1a0379ebfe2190ab186dc4bf9f08434210" kindref="member">I2CSlave_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize a given I2CSlave peripheral specified by the particular index value. The parameter specifies which mode the I2CSlave will operate. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>I2CSlave controller has been initialized</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical peripheral number for the I2CSlave indexed into the I2CSlave_config table</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an parameter block, if NULL it will use default values. All the fields in this structure are RO (read-only).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A I2CSlave_Handle on success or a NULL on an error or if it has been opened already.</para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_c_slave_8h_1ad7518283a3f3fb80cefe6cb7ca7a4a36" kindref="member">I2CSlave_init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_c_slave_8h_1a323cbb394c10ab1018820c9a76eccc18" kindref="member">I2CSlave_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="454" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_c_slave_8h_1a3c29bf7436be17348ea73fabb6ede3ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2CSlave_Params_init</definition>
        <argsstring>(I2CSlave_Params *params)</argsstring>
        <name>I2CSlave_Params_init</name>
        <param>
          <type><ref refid="_i2_c_slave_8h_1a0379ebfe2190ab186dc4bf9f08434210" kindref="member">I2CSlave_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize the I2CSlave_Params struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>An pointer to I2CSlave_Params structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults values are: transferMode = I2CSLAVE_MODE_BLOCKING transferCallbackFxn = NULL </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="467" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_c_slave_8h_1ad5409f453e769676593a1a14d0ba6d7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool I2CSlave_read</definition>
        <argsstring>(I2CSlave_Handle handle, void *buffer, size_t size)</argsstring>
        <name>I2CSlave_read</name>
        <param>
          <type><ref refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" kindref="member">I2CSlave_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Function that handles the I2CSlave read for SYS/BIOS. </para>        </briefdescription>
        <detaileddescription>
<para>This function will start a I2CSlave read and can only be called from a Task context when in I2CSLAVE_MODE_BLOCKING. The I2CSlave read procedure starts with evaluating how many bytes are to be readby the I2CSlave peripheral.</para><para>The data written by the I2CSlave is synchronized with the START and STOP from the master.</para><para>In I2CSLAVE_MODE_BLOCKING, I2CSlave read/write will block task execution until the transaction has completed.</para><para>In I2CSLAVE_MODE_CALLBACK, I2CSlave read/write does not block task execution and calls a callback function specified by transferCallbackFxn. If a transfer is already taking place, the transaction is put on an internal queue. The queue is serviced in a first come first served basis.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A I2CSlave_Handle</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A RO (read-only) pointer to an empty buffer in which received data should be written to.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to be written into buffer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> on successful transfer, <computeroutput>false</computeroutput> on an error</para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" kindref="member">I2CSlave_open</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="501" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_c_slave_8h_1a66c5d4103e022318c746c592ab2295f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool I2CSlave_write</definition>
        <argsstring>(I2CSlave_Handle handle, const void *buffer, size_t size)</argsstring>
        <name>I2CSlave_write</name>
        <param>
          <type><ref refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" kindref="member">I2CSlave_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Function that handles the I2CSlave write for SYS/BIOS. </para>        </briefdescription>
        <detaileddescription>
<para>This function will start a I2CSlave write and can only be called from a Task context when in I2CSLAVE_MODE_BLOCKING. The I2CSlave transfer procedure starts with evaluating how many bytes are to be written.</para><para>The data written by the I2CSlave is synchronized with the START and STOP from the master. If slave does not have as many bytes requested by master it writes 0xFF. I2CSlave keeps sending 0xFF till master sends a STOP.</para><para>In I2CSLAVE_MODE_BLOCKING, I2CSlave read/write will block task execution until the transaction has completed.</para><para>In I2CSLAVE_MODE_CALLBACK, I2CSlave read/write does not block task execution and calls a callback function specified by transferCallbackFxn. If a transfer is already taking place, the transaction is put on an internal queue. The queue is serviced in a first come first served basis. The I2CSlave_Transaction structure must stay persistent until the I2CSlave read/write function has completed!</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A I2CSlave_Handle</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A WO (write-only) pointer to buffer containing data to be written to the master.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes in buffer that should be written onto the master.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> on successful write <computeroutput>false</computeroutput> on an error</para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" kindref="member">I2CSlave_open</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="538" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>I2CSlave driver interface. </para>    </briefdescription>
    <detaileddescription>
<para>============================================================================</para><para>The I2CSlave header file should be included in an application as follows: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/I2CSlave.h&gt;</highlight></codeline>
</programlisting></para><para><heading level="1">Operation</heading>
</para><para>The I2CSlave driver operates as a slave on an I2C bus in either I2CSLAVE_MODE_BLOCKING or I2CSLAVE_MODE_CALLBACK. In blocking mode, the task&apos;s execution is blocked during the I2CSlave read/write transfer. When the transfer has completed, code execution will resume. In callback mode, the task&apos;s execution is not blocked, allowing for other transactions to be queued up or to process some other code. When the transfer has completed, the I2CSlave driver will call a user-specified callback function (from a HWI context).</para><para>The APIs in this driver serve as an interface to a typical TI-RTOS application. The specific peripheral implementations are responsible to create all the SYS/BIOS specific primitives to allow for thread-safe operation.</para><para><heading level="2">Opening the driver</heading>
</para><para><programlisting><codeline><highlight class="normal">I2CSlave_Handle<sp/><sp/><sp/><sp/><sp/><sp/>handle;</highlight></codeline>
<codeline><highlight class="normal">I2CSlave_Params<sp/><sp/><sp/><sp/><sp/><sp/>params;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">I2CSlave_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">params.transferMode<sp/><sp/>=<sp/>I2CSLAVE_MODE_CALLBACK;</highlight></codeline>
<codeline><highlight class="normal">params.transferCallbackFxn<sp/>=<sp/>someI2CSlaveCallbackFunction;</highlight></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>I2CSlave_open(Board_I2CSLAVE0,<sp/>&amp;params);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(handle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>I2C<sp/>Slave<sp/>failed<sp/>to<sp/>open</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><heading level="2">Transferring data</heading>
</para><para>A I2CSlave transaction with a I2CSlave peripheral is started by calling <ref refid="_i2_c_slave_8h_1ad5409f453e769676593a1a14d0ba6d7b" kindref="member">I2CSlave_read()</ref> or <ref refid="_i2_c_slave_8h_1a66c5d4103e022318c746c592ab2295f8" kindref="member">I2CSlave_write()</ref>. Each transfer is performed atomically with the I2CSlave peripheral.</para><para><programlisting><codeline><highlight class="normal">ret<sp/>=<sp/>I2CSlave_read(i2cSlave,<sp/>buffer,<sp/>5)</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(!ret)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//Unsuccessful<sp/>I2CSlave<sp/>read</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">I2CSlave_write(i2cSlave,<sp/>buffer,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(!ret)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//Unsuccessful<sp/>I2CSlave<sp/>write</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><heading level="1">Implementation</heading>
</para><para>This module serves as the main interface for TI-RTOS applications. Its purpose is to redirect the module&apos;s APIs to specific peripheral implementations which are specified using a pointer to a I2CSlave_FxnTable.</para><para>The I2CSlave driver interface module is joined (at link time) to a NULL-terminated array of I2CSlave_Config data structures named <emphasis>I2CSlave_config</emphasis>. <emphasis>I2CSlave_config</emphasis> is implemented in the application with each entry being an instance of a I2CSlave peripheral. Each entry in <emphasis>I2CSlave_config</emphasis> contains a:<itemizedlist>
<listitem><para>(I2CSlave_FxnTable *) to a set of functions that implement an I2CSlave</para></listitem><listitem><para>(void *) data object that is associated with the I2CSlave_FxnTable</para></listitem><listitem><para>(void *) hardware attributes that are associated to the I2CSlave_FxnTable</para></listitem></itemizedlist>
</para><para><heading level="1">Instrumentation</heading>
</para><para>The I2CSlave driver interface produces log statements if instrumentation is enabled.</para><para><table rows="3" cols="2"><row>
<entry thead="yes"><para>Diagnostics Mask </para></entry><entry thead="yes"><para>Log details  </para></entry></row>
<row>
<entry thead="no"><para>Diags_USER1 </para></entry><entry thead="no"><para>basic operations performed </para></entry></row>
<row>
<entry thead="no"><para>Diags_USER2 </para></entry><entry thead="no"><para>detailed operations performed </para></entry></row>
</table>
<hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2018,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor">#ifndef<sp/>ti_drivers_I2CSLAVE__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_I2CSLAVE__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="group___i2_c_s_l_a_v_e___c_o_n_t_r_o_l_1ga50e2b786948f487d4cb975e5581d93df" refkind="member"><highlight class="preprocessor">#define<sp/>I2CSLAVE_CMD_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="group___i2_c_s_l_a_v_e___c_o_n_t_r_o_l_1ga9fe1fa8f941643c68c443fc089fadf3c" refkind="member"><highlight class="preprocessor">#define<sp/>I2CSLAVE_STATUS_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="group___i2_c_s_l_a_v_e___s_t_a_t_u_s_1ga5fefb558e9268fd792ec49f80b697474" refkind="member"><highlight class="preprocessor">#define<sp/>I2CSLAVE_STATUS_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="group___i2_c_s_l_a_v_e___s_t_a_t_u_s_1gacae8b3350c196cdb215b25d7ca170708" refkind="member"><highlight class="preprocessor">#define<sp/>I2CSLAVE_STATUS_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="group___i2_c_s_l_a_v_e___s_t_a_t_u_s_1ga379b9d624bb9cd78f3d4991cc2d15dd2" refkind="member"><highlight class="preprocessor">#define<sp/>I2CSLAVE_STATUS_UNDEFINEDCMD<sp/><sp/><sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="comment">/*<sp/>Add<sp/>I2CSLAVE_CMD_&lt;commands&gt;<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_i2_c_slave___config__" kindref="compound">I2CSlave_Config_</ref><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" kindref="member">I2CSlave_Handle</ref>;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="_i2_c_slave_8h_1a48d362407dc4c3375d9193e2990616ce" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_i2_c_slave_8h_1a48d362407dc4c3375d9193e2990616ce" kindref="member">I2CSlave_Mode_</ref><sp/>{</highlight></codeline>
<codeline lineno="220" refid="_i2_c_slave_8h_1a48d362407dc4c3375d9193e2990616cea0e5216f404dc3b5adf0da3c292d9217a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_slave_8h_1a48d362407dc4c3375d9193e2990616cea0e5216f404dc3b5adf0da3c292d9217a" kindref="member">I2CSLAVE_IDLE_MODE</ref><sp/>=<sp/>0,<sp/><sp/></highlight></codeline>
<codeline lineno="221" refid="_i2_c_slave_8h_1a48d362407dc4c3375d9193e2990616cea74dcfa16de3abf3db4438ab4b0714522" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_slave_8h_1a48d362407dc4c3375d9193e2990616cea74dcfa16de3abf3db4438ab4b0714522" kindref="member">I2CSLAVE_WRITE_MODE</ref><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="222" refid="_i2_c_slave_8h_1a48d362407dc4c3375d9193e2990616ceada9f2fb28cb0a3bb13520f6e77c8f126" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_slave_8h_1a48d362407dc4c3375d9193e2990616ceada9f2fb28cb0a3bb13520f6e77c8f126" kindref="member">I2CSLAVE_READ_MODE</ref><sp/>=<sp/>2,<sp/><sp/></highlight></codeline>
<codeline lineno="223" refid="_i2_c_slave_8h_1a48d362407dc4c3375d9193e2990616ceaa4f7f07c5cb10d98cc9dd08ffc40cf9a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_slave_8h_1a48d362407dc4c3375d9193e2990616ceaa4f7f07c5cb10d98cc9dd08ffc40cf9a" kindref="member">I2CSLAVE_START_MODE</ref><sp/>=<sp/>3,<sp/></highlight></codeline>
<codeline lineno="224" refid="_i2_c_slave_8h_1a48d362407dc4c3375d9193e2990616cea3f8c8244ead6629a301932793995b790" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_slave_8h_1a48d362407dc4c3375d9193e2990616cea3f8c8244ead6629a301932793995b790" kindref="member">I2CSLAVE_ERROR</ref><sp/>=<sp/>0xFF<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="225"><highlight class="normal">}<sp/><ref refid="_i2_c_slave_8h_1a1d4cf7dea3087f639e0731f6d04f2b33" kindref="member">I2CSlave_Mode</ref>;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="_i2_c_slave_8h_1a0c4c07ed8e3602b10c8ea9dd8fdf453c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_i2_c_slave_8h_1a0c4c07ed8e3602b10c8ea9dd8fdf453c" kindref="member">I2CSlave_TransferMode_</ref><sp/>{</highlight></codeline>
<codeline lineno="235" refid="_i2_c_slave_8h_1a0c4c07ed8e3602b10c8ea9dd8fdf453cac85f5a1e6bca3d9402b2e5704387fa8f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_slave_8h_1a0c4c07ed8e3602b10c8ea9dd8fdf453cac85f5a1e6bca3d9402b2e5704387fa8f" kindref="member">I2CSLAVE_MODE_BLOCKING</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="236" refid="_i2_c_slave_8h_1a0c4c07ed8e3602b10c8ea9dd8fdf453ca1dda6ae35d8aa92739d2714a4eaa4107" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_slave_8h_1a0c4c07ed8e3602b10c8ea9dd8fdf453ca1dda6ae35d8aa92739d2714a4eaa4107" kindref="member">I2CSLAVE_MODE_CALLBACK</ref><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal">}<sp/><ref refid="_i2_c_slave_8h_1a8797c0931604cbc2cc7ca6d362e9cb3e" kindref="member">I2CSlave_TransferMode</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="251" refid="_i2_c_slave_8h_1a22bd71094a8a815bccdf665d85900412" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_i2_c_slave_8h_1a22bd71094a8a815bccdf665d85900412" kindref="member">I2CSlave_CallbackFxn</ref>)(I2CSlave_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>status);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="272" refid="struct_i2_c_slave___params__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_i2_c_slave___params__" kindref="compound">I2CSlave_Params_</ref><sp/>{</highlight></codeline>
<codeline lineno="274" refid="struct_i2_c_slave___params___1aa60e2165d3547d72019a5580c1215a00" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>I2CSlave_TransferMode<sp/><sp/><sp/><ref refid="struct_i2_c_slave___params___1aa60e2165d3547d72019a5580c1215a00" kindref="member">transferMode</ref>;</highlight></codeline>
<codeline lineno="276" refid="struct_i2_c_slave___params___1a037f4cd5e7b287114f3be57fc87c4f73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_slave_8h_1a22bd71094a8a815bccdf665d85900412" kindref="member">I2CSlave_CallbackFxn</ref><sp/><sp/><sp/><sp/><ref refid="struct_i2_c_slave___params___1a037f4cd5e7b287114f3be57fc87c4f73" kindref="member">transferCallbackFxn</ref>;</highlight></codeline>
<codeline lineno="278" refid="struct_i2_c_slave___params___1a2ba42d304328ef32b99f3f800c4e1187" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_i2_c_slave___params___1a2ba42d304328ef32b99f3f800c4e1187" kindref="member">custom</ref>;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}<sp/><ref refid="_i2_c_slave_8h_1a0379ebfe2190ab186dc4bf9f08434210" kindref="member">I2CSlave_Params</ref>;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="_i2_c_slave_8h_1a9a2e6a8574316d6a494d208de4329fc7" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="_i2_c_slave_8h_1a9a2e6a8574316d6a494d208de4329fc7" kindref="member">I2CSlave_CloseFxn</ref>)<sp/><sp/><sp/><sp/>(I2CSlave_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="_i2_c_slave_8h_1a14dd40af6e271fa3911a51526427d12f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_i2_c_slave_8h_1a14dd40af6e271fa3911a51526427d12f" kindref="member">I2CSlave_ControlFxn</ref>)<sp/><sp/>(I2CSlave_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_fast16_t<sp/>cmd,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="_i2_c_slave_8h_1ae821c2b97cf6640cd58b8e0c40efb464" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="_i2_c_slave_8h_1ae821c2b97cf6640cd58b8e0c40efb464" kindref="member">I2CSlave_InitFxn</ref>)<sp/><sp/><sp/><sp/><sp/>(I2CSlave_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="_i2_c_slave_8h_1a7c6638bde6397024b1f1ece4f9baed37" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" kindref="member">I2CSlave_Handle</ref><sp/><sp/>(*<ref refid="_i2_c_slave_8h_1a7c6638bde6397024b1f1ece4f9baed37" kindref="member">I2CSlave_OpenFxn</ref>)<sp/><sp/><sp/><sp/><sp/>(I2CSlave_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_c_slave___params__" kindref="compound">I2CSlave_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="312" refid="_i2_c_slave_8h_1a7515207a9b0bde39ff2744ac3ed366ea" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="_i2_c_slave_8h_1a7515207a9b0bde39ff2744ac3ed366ea" kindref="member">I2CSlave_WriteFxn</ref>)<sp/>(I2CSlave_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="_i2_c_slave_8h_1ac74d6f05afaf02a4238fe59a588cd787" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="_i2_c_slave_8h_1ac74d6f05afaf02a4238fe59a588cd787" kindref="member">I2CSlave_ReadFxn</ref>)<sp/>(I2CSlave_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="struct_i2_c_slave___fxn_table__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_i2_c_slave___fxn_table__" kindref="compound">I2CSlave_FxnTable_</ref><sp/>{</highlight></codeline>
<codeline lineno="331" refid="struct_i2_c_slave___fxn_table___1a58c3a8a3fcfdc435626d586c97818390" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_slave_8h_1a9a2e6a8574316d6a494d208de4329fc7" kindref="member">I2CSlave_CloseFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_c_slave___fxn_table___1a58c3a8a3fcfdc435626d586c97818390" kindref="member">closeFxn</ref>;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="struct_i2_c_slave___fxn_table___1a7f714d3324edd23fbe779f34146a5620" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_slave_8h_1a14dd40af6e271fa3911a51526427d12f" kindref="member">I2CSlave_ControlFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_c_slave___fxn_table___1a7f714d3324edd23fbe779f34146a5620" kindref="member">controlFxn</ref>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="struct_i2_c_slave___fxn_table___1a40212f62343f74ee9a381b908090a0f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_slave_8h_1ae821c2b97cf6640cd58b8e0c40efb464" kindref="member">I2CSlave_InitFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_c_slave___fxn_table___1a40212f62343f74ee9a381b908090a0f9" kindref="member">initFxn</ref>;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="struct_i2_c_slave___fxn_table___1a56d99a43b2f9583d6a5089248ec9d6d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_slave_8h_1a7c6638bde6397024b1f1ece4f9baed37" kindref="member">I2CSlave_OpenFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_c_slave___fxn_table___1a56d99a43b2f9583d6a5089248ec9d6d5" kindref="member">openFxn</ref>;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="343" refid="struct_i2_c_slave___fxn_table___1a27f4873b5fd1bf73dc96d99994cb5bda" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_slave_8h_1ac74d6f05afaf02a4238fe59a588cd787" kindref="member">I2CSlave_ReadFxn</ref><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_c_slave___fxn_table___1a27f4873b5fd1bf73dc96d99994cb5bda" kindref="member">readFxn</ref>;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="struct_i2_c_slave___fxn_table___1aa45a44ef0c7c538d68a7b51c13e8c777" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_slave_8h_1a7515207a9b0bde39ff2744ac3ed366ea" kindref="member">I2CSlave_WriteFxn</ref><sp/><sp/><ref refid="struct_i2_c_slave___fxn_table___1aa45a44ef0c7c538d68a7b51c13e8c777" kindref="member">writeFxn</ref>;</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}<sp/><ref refid="_i2_c_slave_8h_1a4adcea9698de83af86f5d9d4e4331977" kindref="member">I2CSlave_FxnTable</ref>;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="struct_i2_c_slave___config__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_i2_c_slave___config__" kindref="compound">I2CSlave_Config_</ref><sp/>{</highlight></codeline>
<codeline lineno="362" refid="struct_i2_c_slave___config___1a124fe47ff36f185767431d7c5b0b8e39" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_i2_c_slave___fxn_table__" kindref="compound">I2CSlave_FxnTable</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_i2_c_slave___config___1a124fe47ff36f185767431d7c5b0b8e39" kindref="member">fxnTablePtr</ref>;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="365" refid="struct_i2_c_slave___config___1a90f00f2ccb6e37009372a462c7ac991e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_i2_c_slave___config___1a90f00f2ccb6e37009372a462c7ac991e" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="struct_i2_c_slave___config___1a555ca8226a0f64d0e8877d256575e136" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_i2_c_slave___config___1a555ca8226a0f64d0e8877d256575e136" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}<sp/><ref refid="_i2_c_slave_8h_1ae81019e35004896b31ade1170297886a" kindref="member">I2CSlave_Config</ref>;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_i2_c_slave_8h_1a323cbb394c10ab1018820c9a76eccc18" kindref="member">I2CSlave_close</ref>(I2CSlave_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_i2_c_slave_8h_1a42d235433a86656597ae52d44a005513" kindref="member">I2CSlave_control</ref>(I2CSlave_Handle<sp/>handle,<sp/>uint_fast16_t<sp/>cmd,</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_i2_c_slave_8h_1ad7518283a3f3fb80cefe6cb7ca7a4a36" kindref="member">I2CSlave_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>I2CSlave_Handle<sp/><ref refid="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" kindref="member">I2CSlave_open</ref>(uint_least8_t<sp/>index,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_i2_c_slave___params__" kindref="compound">I2CSlave_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_i2_c_slave_8h_1a3c29bf7436be17348ea73fabb6ede3ae" kindref="member">I2CSlave_Params_init</ref>(<ref refid="struct_i2_c_slave___params__" kindref="compound">I2CSlave_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_i2_c_slave_8h_1ad5409f453e769676593a1a14d0ba6d7b" kindref="member">I2CSlave_read</ref>(I2CSlave_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="538"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_i2_c_slave_8h_1a66c5d4103e022318c746c592ab2295f8" kindref="member">I2CSlave_write</ref>(I2CSlave_Handle<sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_I2CSLAVE__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h"/>
  </compounddef>
</doxygen>
