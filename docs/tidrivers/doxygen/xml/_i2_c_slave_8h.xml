<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_i2_c_slave_8h" kind="file" language="C++">
    <compoundname>I2CSlave.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <includedby refid="_i2_c_slave_m_s_p432_8h" local="no">I2CSlaveMSP432.h</includedby>
    <incdepgraph>
      <node id="128">
        <label>stdbool.h</label>
      </node>
      <node id="130">
        <label>stdint.h</label>
      </node>
      <node id="127">
        <label>I2CSlave.h</label>
        <link refid="_i2_c_slave_8h"/>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
      </node>
      <node id="129">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="131">
        <label>I2CSlave.h</label>
        <link refid="_i2_c_slave_8h"/>
        <childnode refid="132" relation="include">
        </childnode>
      </node>
      <node id="132">
        <label>I2CSlaveMSP432.h</label>
        <link refid="_i2_c_slave_m_s_p432_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_i2_c_slave___params" prot="public">I2CSlave_Params</innerclass>
    <innerclass refid="struct_i2_c_slave___fxn_table" prot="public">I2CSlave_FxnTable</innerclass>
    <innerclass refid="struct_i2_c_slave___config__" prot="public">I2CSlave_Config_</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___i2_c_s_l_a_v_e___c_o_n_t_r_o_l_1ga50e2b786948f487d4cb975e5581d93df" prot="public" static="no">
        <name>I2CSLAVE_CMD_RESERVED</name>
        <initializer>(32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common I2CSlave_control command code reservation offset. I2CSlave driver implementations should offset command codes with I2CSLAVE_CMD_RESERVED growing positively</para><para>Example implementation specific command codes: <programlisting><codeline><highlight class="normal">#define<sp/>I2CSLAVEXYZ_COMMAND0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2CSLAVE_CMD_RESERVED<sp/>+<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>I2CSLAVEXYZ_COMMAND1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2CSLAVE_CMD_RESERVED<sp/>+<sp/>1</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="166" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c_s_l_a_v_e___c_o_n_t_r_o_l_1ga9fe1fa8f941643c68c443fc089fadf3c" prot="public" static="no">
        <name>I2CSLAVE_STATUS_RESERVED</name>
        <initializer>(-32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common I2CSlave_control status code reservation offset. I2CSlave driver implementations should offset status codes with I2CSLAVE_STATUS_RESERVED growing negatively.</para><para>Example implementation specific status codes: <programlisting><codeline><highlight class="normal">#define<sp/>I2CSLAVEXYZ_STATUS_ERROR0<sp/><sp/><sp/><sp/><sp/>I2CSLAVE_STATUS_RESERVED<sp/>-<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>I2CSLAVEXYZ_STATUS_ERROR1<sp/><sp/><sp/><sp/><sp/>I2CSLAVE_STATUS_RESERVED<sp/>-<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>I2CSLAVEXYZ_STATUS_ERROR2<sp/><sp/><sp/><sp/><sp/>I2CSLAVE_STATUS_RESERVED<sp/>-<sp/>2</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="180" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c_s_l_a_v_e___s_t_a_t_u_s_1ga5fefb558e9268fd792ec49f80b697474" prot="public" static="no">
        <name>I2CSLAVE_STATUS_SUCCESS</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>Successful status code returned by <ref refid="_i2_c_slave_8h_1a42d235433a86656597ae52d44a005513" kindref="member">I2CSlave_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_i2_c_slave_8h_1a42d235433a86656597ae52d44a005513" kindref="member">I2CSlave_control()</ref> returns I2CSLAVE_STATUS_SUCCESS if the control code was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="194" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c_s_l_a_v_e___s_t_a_t_u_s_1gacae8b3350c196cdb215b25d7ca170708" prot="public" static="no">
        <name>I2CSLAVE_STATUS_ERROR</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>Generic error status code returned by <ref refid="_i2_c_slave_8h_1a42d235433a86656597ae52d44a005513" kindref="member">I2CSlave_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_i2_c_slave_8h_1a42d235433a86656597ae52d44a005513" kindref="member">I2CSlave_control()</ref> returns I2CSLAVE_STATUS_ERROR if the control code was not executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="202" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c_s_l_a_v_e___s_t_a_t_u_s_1ga379b9d624bb9cd78f3d4991cc2d15dd2" prot="public" static="no">
        <name>I2CSLAVE_STATUS_UNDEFINEDCMD</name>
        <initializer>(-2)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_i2_c_slave_8h_1a42d235433a86656597ae52d44a005513" kindref="member">I2CSlave_control()</ref> for undefined command codes. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_i2_c_slave_8h_1a42d235433a86656597ae52d44a005513" kindref="member">I2CSlave_control()</ref> returns I2CSLAVE_STATUS_UNDEFINEDCMD if the control code is not recognized by the driver implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="211" column="9" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_i2_c_slave_8h_1a85d8ab819c05086d764dfd0a257b97ca" prot="private" static="no">
        <name>I2CSlave_Mode</name>
        <enumvalue id="_i2_c_slave_8h_1a85d8ab819c05086d764dfd0a257b97caa0e5216f404dc3b5adf0da3c292d9217a" prot="private">
          <name>I2CSLAVE_IDLE_MODE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>I2CSlave is not performing a transaction </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_c_slave_8h_1a85d8ab819c05086d764dfd0a257b97caa74dcfa16de3abf3db4438ab4b0714522" prot="private">
          <name>I2CSLAVE_WRITE_MODE</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>I2CSlave is currently performing write </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_c_slave_8h_1a85d8ab819c05086d764dfd0a257b97caada9f2fb28cb0a3bb13520f6e77c8f126" prot="private">
          <name>I2CSLAVE_READ_MODE</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>I2CSlave is currently performing read </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_c_slave_8h_1a85d8ab819c05086d764dfd0a257b97caaa4f7f07c5cb10d98cc9dd08ffc40cf9a" prot="private">
          <name>I2CSLAVE_START_MODE</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>I2CSlave received a START from a master </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_c_slave_8h_1a85d8ab819c05086d764dfd0a257b97caa3f8c8244ead6629a301932793995b790" prot="private">
          <name>I2CSLAVE_ERROR</name>
          <initializer>= 0xFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>I2CSlave error has occurred, exit gracefully </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>I2CSlave mode. </para>        </briefdescription>
        <detaileddescription>
<para>This enum defines the state of the I2CSlave driver&apos;s state-machine. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="239" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="239" bodyend="245"/>
      </memberdef>
      <memberdef kind="enum" id="_i2_c_slave_8h_1a5e27f9ba25088f9e7071e3e6f806559d" prot="public" static="no">
        <name>I2CSlave_TransferMode</name>
        <enumvalue id="_i2_c_slave_8h_1a5e27f9ba25088f9e7071e3e6f806559dac85f5a1e6bca3d9402b2e5704387fa8f" prot="public">
          <name>I2CSLAVE_MODE_BLOCKING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_c_slave_8h_1a5e27f9ba25088f9e7071e3e6f806559da1dda6ae35d8aa92739d2714a4eaa4107" prot="public">
          <name>I2CSLAVE_MODE_CALLBACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Return behavior of <ref refid="_i2_c_slave_8h_1a66c5d4103e022318c746c592ab2295f8" kindref="member">I2CSlave_write()</ref> and <ref refid="_i2_c_slave_8h_1ad5409f453e769676593a1a14d0ba6d7b" kindref="member">I2CSlave_read()</ref> specified in the <ref refid="struct_i2_c_slave___params" kindref="compound">I2CSlave_Params</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="struct_i2_c_slave___params" kindref="compound">I2CSlave_Params</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="253" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="253" bodyend="276"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" prot="public" static="no">
        <type>struct <ref refid="struct_i2_c_slave___config__" kindref="compound">I2CSlave_Config_</ref> *</type>
        <definition>typedef struct I2CSlave_Config_* I2CSlave_Handle</definition>
        <argsstring></argsstring>
        <name>I2CSlave_Handle</name>
        <briefdescription>
<para>A handle that is returned from a <ref refid="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" kindref="member">I2CSlave_open()</ref> call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="231" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_slave_8h_1a22bd71094a8a815bccdf665d85900412" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* I2CSlave_CallbackFxn) (I2CSlave_Handle handle, bool status)</definition>
        <argsstring>)(I2CSlave_Handle handle, bool status)</argsstring>
        <name>I2CSlave_CallbackFxn</name>
        <briefdescription>
<para>The definition of a callback function. </para>        </briefdescription>
        <detaileddescription>
<para>When operating in <ref refid="_i2_c_slave_8h_1a5e27f9ba25088f9e7071e3e6f806559da1dda6ae35d8aa92739d2714a4eaa4107" kindref="member">I2CSLAVE_MODE_CALLBACK</ref>, the callback function is called when a transfer completes. The application is responsible for declaring an <ref refid="_i2_c_slave_8h_1a22bd71094a8a815bccdf665d85900412" kindref="member">I2CSlave_CallbackFxn</ref> function and providing a pointer in <ref refid="struct_i2_c_slave___params_1afed4d41de559f2ba40d23c0b597db7b8" kindref="member">I2CSlave_Params.transferCallbackFxn</ref>.</para><para><simplesect kind="warning"><para>The callback function is called from an interrupt context.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">handle</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" kindref="member">I2CSlave_Handle</ref> used with the initial call to <ref refid="_i2_c_slave_8h_1ad5409f453e769676593a1a14d0ba6d7b" kindref="member">I2CSlave_read()</ref> or <ref refid="_i2_c_slave_8h_1a66c5d4103e022318c746c592ab2295f8" kindref="member">I2CSlave_write()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">status</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean indicating if the I2C transfer was successful. If <computeroutput>true</computeroutput>, the transfer was successful. If <computeroutput>false</computeroutput>, the transfer failed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="295" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_slave_8h_1a9a2e6a8574316d6a494d208de4329fc7" prot="private" static="no">
        <type>void(*</type>
        <definition>typedef void(* I2CSlave_CloseFxn) (I2CSlave_Handle handle)</definition>
        <argsstring>)(I2CSlave_Handle handle)</argsstring>
        <name>I2CSlave_CloseFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_i2_c_slave_8h_1a323cbb394c10ab1018820c9a76eccc18" kindref="member">I2CSlave_close()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="322" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_slave_8h_1a14dd40af6e271fa3911a51526427d12f" prot="private" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* I2CSlave_ControlFxn) (I2CSlave_Handle handle, uint_fast16_t cmd, void *arg)</definition>
        <argsstring>)(I2CSlave_Handle handle, uint_fast16_t cmd, void *arg)</argsstring>
        <name>I2CSlave_ControlFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_i2_c_slave_8h_1a42d235433a86656597ae52d44a005513" kindref="member">I2CSlave_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="329" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_slave_8h_1ae821c2b97cf6640cd58b8e0c40efb464" prot="private" static="no">
        <type>void(*</type>
        <definition>typedef void(* I2CSlave_InitFxn) (I2CSlave_Handle handle)</definition>
        <argsstring>)(I2CSlave_Handle handle)</argsstring>
        <name>I2CSlave_InitFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_i2_c_slave_8h_1ad7518283a3f3fb80cefe6cb7ca7a4a36" kindref="member">I2CSlave_init()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="338" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_slave_8h_1a7c6638bde6397024b1f1ece4f9baed37" prot="private" static="no">
        <type><ref refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" kindref="member">I2CSlave_Handle</ref>(*</type>
        <definition>typedef I2CSlave_Handle(* I2CSlave_OpenFxn) (I2CSlave_Handle handle, I2CSlave_Params *params)</definition>
        <argsstring>)(I2CSlave_Handle handle, I2CSlave_Params *params)</argsstring>
        <name>I2CSlave_OpenFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" kindref="member">I2CSlave_open()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="345" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_slave_8h_1a7515207a9b0bde39ff2744ac3ed366ea" prot="private" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* I2CSlave_WriteFxn) (I2CSlave_Handle handle, const void *buffer, size_t size)</definition>
        <argsstring>)(I2CSlave_Handle handle, const void *buffer, size_t size)</argsstring>
        <name>I2CSlave_WriteFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of I2CSlave_WriteTransaction(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="353" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_slave_8h_1ac74d6f05afaf02a4238fe59a588cd787" prot="private" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* I2CSlave_ReadFxn) (I2CSlave_Handle handle, void *buffer, size_t size)</definition>
        <argsstring>)(I2CSlave_Handle handle, void *buffer, size_t size)</argsstring>
        <name>I2CSlave_ReadFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of I2CSlave_ReadFxn(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="362" column="1" bodyfile="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_c_slave_8h_1ae81019e35004896b31ade1170297886a" prot="public" static="no">
        <type>struct <ref refid="struct_i2_c_slave___config__" kindref="compound">I2CSlave_Config_</ref></type>
        <definition>typedef struct I2CSlave_Config_  I2CSlave_Config</definition>
        <argsstring></argsstring>
        <name>I2CSlave_Config</name>
        <briefdescription>
<para>I2C Slave driver&apos;s custom <ref refid="index_1driver_configuration" kindref="member">configuration</ref> structure. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="_i2_c_slave_8h_1ad7518283a3f3fb80cefe6cb7ca7a4a36" kindref="member">I2CSlave_init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" kindref="member">I2CSlave_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="409" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_i2_c_slave_8h_1a323cbb394c10ab1018820c9a76eccc18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2CSlave_close</definition>
        <argsstring>(I2CSlave_Handle handle)</argsstring>
        <name>I2CSlave_close</name>
        <param>
          <type><ref refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" kindref="member">I2CSlave_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to close an I2CSlave driver instance. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" kindref="member">I2CSlave_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" kindref="member">I2CSlave_Handle</ref> returned from <ref refid="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" kindref="member">I2CSlave_open()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="419" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_c_slave_8h_1a42d235433a86656597ae52d44a005513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t I2CSlave_control</definition>
        <argsstring>(I2CSlave_Handle handle, uint_fast16_t cmd, void *arg)</argsstring>
        <name>I2CSlave_control</name>
        <param>
          <type><ref refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" kindref="member">I2CSlave_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint_fast16_t</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Function performs implementation specific features on a driver instance. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" kindref="member">I2CSlave_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" kindref="member">I2CSlave_Handle</ref> returned from <ref refid="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" kindref="member">I2CSlave_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>A command value defined by the device specific implementation</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">arg</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional R/W (read/write) argument that is accompanied with <computeroutput>cmd</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Implementation specific return codes. Negative values indicate unsuccessful operations.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group___i2_c_s_l_a_v_e___s_t_a_t_u_s_1ga379b9d624bb9cd78f3d4991cc2d15dd2" kindref="member">I2CSLAVE_STATUS_UNDEFINEDCMD</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>cmd</computeroutput> value is not supported by the device specific implementation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="441" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_c_slave_8h_1ad7518283a3f3fb80cefe6cb7ca7a4a36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2CSlave_init</definition>
        <argsstring>(void)</argsstring>
        <name>I2CSlave_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to initialize the I2C Slave driver. </para>        </briefdescription>
        <detaileddescription>
<para>This function must also be called before any other I2CSlave driver APIs. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="449" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" kindref="member">I2CSlave_Handle</ref></type>
        <definition>I2CSlave_Handle I2CSlave_open</definition>
        <argsstring>(uint_least8_t index, I2CSlave_Params *params)</argsstring>
        <name>I2CSlave_open</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="struct_i2_c_slave___params" kindref="compound">I2CSlave_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize the I2CSlave peripheral. </para>        </briefdescription>
        <detaileddescription>
<para>Function to initialize the I2CSlave peripheral specified by the particular index value.</para><para><simplesect kind="pre"><para><ref refid="_i2_c_slave_8h_1ad7518283a3f3fb80cefe6cb7ca7a4a36" kindref="member">I2CSlave_init()</ref> has been called</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index in the <computeroutput>I2CSlave_Config</computeroutput>[] array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an initialized <ref refid="struct_i2_c_slave___params" kindref="compound">I2CSlave_Params</ref> structure. If NULL, the default <ref refid="struct_i2_c_slave___params" kindref="compound">I2CSlave_Params</ref> values are used.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <ref refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" kindref="member">I2CSlave_Handle</ref> on success or NULL on error.</para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_c_slave_8h_1ad7518283a3f3fb80cefe6cb7ca7a4a36" kindref="member">I2CSlave_init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_c_slave_8h_1a323cbb394c10ab1018820c9a76eccc18" kindref="member">I2CSlave_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="469" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_c_slave_8h_1a3c29bf7436be17348ea73fabb6ede3ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2CSlave_Params_init</definition>
        <argsstring>(I2CSlave_Params *params)</argsstring>
        <name>I2CSlave_Params_init</name>
        <param>
          <type><ref refid="struct_i2_c_slave___params" kindref="compound">I2CSlave_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Initialize an <ref refid="struct_i2_c_slave___params" kindref="compound">I2CSlave_Params</ref> structure to its default values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an <ref refid="struct_i2_c_slave___params" kindref="compound">I2CSlave_Params</ref> structure.</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults values are: <itemizedlist>
<listitem><para><ref refid="struct_i2_c_slave___params_1a51c76c5694cd3a9e9102b9273cfe4a7f" kindref="member">I2CSlave_Params.transferMode</ref> = <ref refid="_i2_c_slave_8h_1a5e27f9ba25088f9e7071e3e6f806559dac85f5a1e6bca3d9402b2e5704387fa8f" kindref="member">I2CSLAVE_MODE_BLOCKING</ref> </para></listitem>
<listitem><para><ref refid="struct_i2_c_slave___params_1afed4d41de559f2ba40d23c0b597db7b8" kindref="member">I2CSlave_Params.transferCallbackFxn</ref> = NULL </para></listitem>
<listitem><para><ref refid="struct_i2_c_slave___params_1a7848665af6d0305dd9c2c779bf79c084" kindref="member">I2CSlave_Params.custom</ref> = NULL</para></listitem>
</itemizedlist>
<simplesect kind="see"><para><ref refid="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" kindref="member">I2CSlave_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="484" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_c_slave_8h_1ad5409f453e769676593a1a14d0ba6d7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool I2CSlave_read</definition>
        <argsstring>(I2CSlave_Handle handle, void *buffer, size_t size)</argsstring>
        <name>I2CSlave_read</name>
        <param>
          <type><ref refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" kindref="member">I2CSlave_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Perform an I2C read from an I2C master. </para>        </briefdescription>
        <detaileddescription>
<para>This function will perform an I2C read transfer.</para><para><simplesect kind="note"><para>When using <ref refid="_i2_c_slave_8h_1a5e27f9ba25088f9e7071e3e6f806559dac85f5a1e6bca3d9402b2e5704387fa8f" kindref="member">I2CSLAVE_MODE_BLOCKING</ref>, this must be called from a thread context.</para></simplesect>
The data written by the I2CSlave is synchronized with the START and STOP condition from an I2C master.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" kindref="member">I2CSlave_Handle</ref> returned from <ref refid="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" kindref="member">I2CSlave_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to buffer to store data read</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read into <computeroutput>buffer</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>on successful read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>on an error</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_i2_c_slave_8h_1ad5409f453e769676593a1a14d0ba6d7b" kindref="member">I2CSlave_read</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_c_slave_8h_1a5e27f9ba25088f9e7071e3e6f806559d" kindref="member">I2CSlave_TransferMode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="509" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_c_slave_8h_1a66c5d4103e022318c746c592ab2295f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool I2CSlave_write</definition>
        <argsstring>(I2CSlave_Handle handle, const void *buffer, size_t size)</argsstring>
        <name>I2CSlave_write</name>
        <param>
          <type><ref refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" kindref="member">I2CSlave_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Perform an I2C write to an I2C master. </para>        </briefdescription>
        <detaileddescription>
<para>This function will perform an I2C write transfer.</para><para><simplesect kind="note"><para>When using <ref refid="_i2_c_slave_8h_1a5e27f9ba25088f9e7071e3e6f806559dac85f5a1e6bca3d9402b2e5704387fa8f" kindref="member">I2CSLAVE_MODE_BLOCKING</ref>, this must be called from a thread context.</para></simplesect>
The data written by the I2CSlave is synchronized with the START and STOP conditions from an I2C master.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" kindref="member">I2CSlave_Handle</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to buffer containing data to write</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes in <computeroutput>buffer</computeroutput> to write. If the I2C master requests more than <computeroutput>size</computeroutput> bytes, this driver will transmit <computeroutput>0xFF</computeroutput> until a STOP condition is recieved.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>on successful write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>on an error</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_i2_c_slave_8h_1a66c5d4103e022318c746c592ab2295f8" kindref="member">I2CSlave_write</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_c_slave_8h_1a5e27f9ba25088f9e7071e3e6f806559d" kindref="member">I2CSlave_TransferMode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h" line="537" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Inter-Integrated Circuit (I2C) Slave Driver. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para><anchor id="_i2_c_slave_8h_1ti_drivers_I2CSlave_Overview"/><heading level="1">Overview</heading>
</para><para>The I2C Slave driver allows you to send and recieve I2C transfers. This driver complements the <ref refid="_i2_c_8h" kindref="compound">I2C.h</ref> driver which operates as an I2C master.</para><para><hruler/>
 <anchor id="_i2_c_slave_8h_1ti_drivers_I2CSlave_Usage"/><heading level="1">Usage</heading>
</para><para>This documentation provides a basic <ref refid="_i2_c_slave_8h_1ti_drivers_I2CSlave_Synopsis" kindref="member">usage summary</ref> and a set of <ref refid="_i2_c_slave_8h_1ti_drivers_I2CSlave_Examples" kindref="member">examples</ref> in the form of commented code fragments. Detailed descriptions of the APIs are provided in subsequent sections.</para><para><anchor id="_i2_c_slave_8h_1ti_drivers_I2CSlave_Synopsis"/><heading level="2">Synopsis</heading>
</para><para><anchor id="_i2_c_slave_8h_1ti_drivers_I2CSlave_Synopsis_Code"/><programlisting><codeline><highlight class="normal">//<sp/>Import<sp/>I2C<sp/>Slave<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/I2CSlave.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Define<sp/>name<sp/>for<sp/>an<sp/>index<sp/>of<sp/>an<sp/>I2C<sp/>Slave</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MASTER_BUS<sp/>0</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>One-time<sp/>init<sp/>of<sp/>I2C<sp/>driver</highlight></codeline>
<codeline><highlight class="normal">I2CSlave_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>initialize<sp/>optional<sp/>I2C<sp/>parameters</highlight></codeline>
<codeline><highlight class="normal">I2CSlave_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal">I2CSlave_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">params.transferMode<sp/>=<sp/>I2CSLAVE_MODE_BLOCKING;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Open<sp/>I2C<sp/>Slavefor<sp/>usage</highlight></codeline>
<codeline><highlight class="normal">I2CSlave_Handle<sp/>i2cHandle<sp/>=<sp/>I2CSlave_open(MASTER_BUS,<sp/>&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Wait<sp/>for<sp/>a<sp/>write<sp/>from<sp/>an<sp/>I2C<sp/>master<sp/>device</highlight></codeline>
<codeline><highlight class="normal">I2CSlave_read(i2cHandle,<sp/>buffer,<sp/>4);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Write<sp/>to<sp/>the<sp/>I2C<sp/>master<sp/>device</highlight></codeline>
<codeline><highlight class="normal">I2CSlave_write(i2cHandle,<sp/>buffer,<sp/>2);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Close<sp/>I2C</highlight></codeline>
<codeline><highlight class="normal">I2CSlave_close(i2cHandle);</highlight></codeline>
</programlisting></para><para><anchor id="_i2_c_slave_8h_1ti_drivers_I2CSlave_Examples"/><heading level="2">Examples</heading>
</para><para><itemizedlist>
<listitem><para><ref refid="_i2_c_slave_8h_1ti_drivers_I2CSlave_Example_open" kindref="member">Getting an I2C Slave handle</ref> </para></listitem>
<listitem><para><ref refid="_i2_c_slave_8h_1ti_drivers_I2CSlave_Example_transferring" kindref="member">Transferring data</ref></para></listitem>
</itemizedlist>
<anchor id="_i2_c_slave_8h_1ti_drivers_I2CSlave_Example_open"/><heading level="2">Opening the driver</heading>
</para><para><programlisting><codeline><highlight class="normal">//<sp/>Define<sp/>name<sp/>for<sp/>an<sp/>index<sp/>of<sp/>an<sp/>I2C<sp/>Slave</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MASTER_BUS<sp/>0</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">I2CSlave_Handle<sp/>handle;</highlight></codeline>
<codeline><highlight class="normal">I2CSlave_Params<sp/>params;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>One-time<sp/>init<sp/>of<sp/>I2C<sp/>Slave<sp/>driver</highlight></codeline>
<codeline><highlight class="normal">I2CSlave_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">I2CSlave_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">params.transferMode<sp/><sp/>=<sp/>I2CSLAVE_MODE_CALLBACK;</highlight></codeline>
<codeline><highlight class="normal">params.transferCallbackFxn<sp/>=<sp/>callbackFxn;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>I2CSlave_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(handle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>I2C<sp/>Slave<sp/>failed<sp/>to<sp/>open</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(1)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><anchor id="_i2_c_slave_8h_1ti_drivers_I2CSlave_Example_transferring"/><heading level="2">Transferring data</heading>
</para><para><programlisting><codeline><highlight class="normal">status<sp/>=<sp/>I2CSlave_read(handle,<sp/>buffer,<sp/>5)</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(status<sp/>==<sp/>false)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//Unsuccessful<sp/>I2CSlave<sp/>read</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>=<sp/>I2CSlave_write(handle,<sp/>buffer,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(status<sp/>==<sp/>false)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//Unsuccessful<sp/>I2CSlave<sp/>write</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><hruler/>
 <anchor id="_i2_c_slave_8h_1ti_drivers_I2CSlave_Configuration"/><heading level="1">Configuration</heading>
</para><para>Refer to the <ref refid="index_1driver_configuration" kindref="member">Driver&apos;s Configuration</ref> section for driver configuration information. <hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2019,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*!****************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/>I2CSlave.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/>Inter-Integrated<sp/>Circuit<sp/>(I2C)<sp/>Slave<sp/>Driver</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2CSlave_Overview</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Overview</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>I2C<sp/>Slave<sp/>driver<sp/>allows<sp/>you<sp/>to<sp/>send<sp/>and<sp/>recieve<sp/>I2C<sp/>transfers.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>driver<sp/>complements<sp/>the<sp/>@ref<sp/>I2C.h<sp/>driver<sp/>which<sp/>operates</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/>as<sp/>an<sp/>I2C<sp/>master.</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2CSlave_Usage</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Usage</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/>*<sp/><sp/>This<sp/>documentation<sp/>provides<sp/>a<sp/>basic<sp/>@ref<sp/>ti_drivers_I2CSlave_Synopsis</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/>&quot;usage<sp/>summary&quot;<sp/>and<sp/>a<sp/>set<sp/>of<sp/>@ref<sp/>ti_drivers_I2CSlave_Examples<sp/>&quot;examples&quot;</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/>in<sp/>the<sp/>form<sp/>of<sp/>commented<sp/>code<sp/>fragments.<sp/>Detailed<sp/>descriptions<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/>APIs<sp/>are<sp/>provided<sp/>in<sp/>subsequent<sp/>sections.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"></highlight></codeline>
<codeline lineno="52"><highlight class="comment"></highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2CSlave_Synopsis</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Synopsis<sp/>#</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2CSlave_Synopsis_Code</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Import<sp/>I2C<sp/>Slave<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/I2CSlave.h&gt;</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Define<sp/>name<sp/>for<sp/>an<sp/>index<sp/>of<sp/>an<sp/>I2C<sp/>Slave</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/>#define<sp/>MASTER_BUS<sp/>0</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>One-time<sp/>init<sp/>of<sp/>I2C<sp/>driver</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/>I2CSlave_init();</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>initialize<sp/>optional<sp/>I2C<sp/>parameters</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/>I2CSlave_Params<sp/>params;</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/>I2CSlave_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/>params.transferMode<sp/>=<sp/>I2CSLAVE_MODE_BLOCKING;</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Open<sp/>I2C<sp/>Slavefor<sp/>usage</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/>I2CSlave_Handle<sp/>i2cHandle<sp/>=<sp/>I2CSlave_open(MASTER_BUS,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Wait<sp/>for<sp/>a<sp/>write<sp/>from<sp/>an<sp/>I2C<sp/>master<sp/>device</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/>I2CSlave_read(i2cHandle,<sp/>buffer,<sp/>4);</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Write<sp/>to<sp/>the<sp/>I2C<sp/>master<sp/>device</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/><sp/>I2CSlave_write(i2cHandle,<sp/>buffer,<sp/>2);</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Close<sp/>I2C</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/>I2CSlave_close(i2cHandle);</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2CSlave_Examples</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Examples</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>@ref<sp/>ti_drivers_I2CSlave_Example_open<sp/>&quot;Getting<sp/>an<sp/>I2C<sp/>Slave<sp/>handle&quot;</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>@ref<sp/>ti_drivers_I2CSlave_Example_transferring<sp/>&quot;Transferring<sp/>data&quot;</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2CSlave_Example_open</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Opening<sp/>the<sp/>driver</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Define<sp/>name<sp/>for<sp/>an<sp/>index<sp/>of<sp/>an<sp/>I2C<sp/>Slave</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/><sp/>#define<sp/>MASTER_BUS<sp/>0</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/>I2CSlave_Handle<sp/>handle;</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/>I2CSlave_Params<sp/>params;</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>One-time<sp/>init<sp/>of<sp/>I2C<sp/>Slave<sp/>driver</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/>I2CSlave_init();</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/>I2CSlave_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/>params.transferMode<sp/><sp/>=<sp/>I2CSLAVE_MODE_CALLBACK;</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/>params.transferCallbackFxn<sp/>=<sp/>callbackFxn;</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/>handle<sp/>=<sp/>I2CSlave_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(handle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>I2C<sp/>Slave<sp/>failed<sp/>to<sp/>open</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(1)<sp/>{}</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2CSlave_Example_transferring</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Transferring<sp/>data</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/><sp/>status<sp/>=<sp/>I2CSlave_read(handle,<sp/>buffer,<sp/>5)</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(status<sp/>==<sp/>false)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//Unsuccessful<sp/>I2CSlave<sp/>read</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/>status<sp/>=<sp/>I2CSlave_write(handle,<sp/>buffer,<sp/>3);</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(status<sp/>==<sp/>false)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//Unsuccessful<sp/>I2CSlave<sp/>write</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2CSlave_Configuration</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Configuration</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/><sp/>Refer<sp/>to<sp/>the<sp/>@ref<sp/>driver_configuration<sp/>&quot;Driver&apos;s<sp/>Configuration&quot;<sp/>section</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/><sp/>for<sp/>driver<sp/>configuration<sp/>information.</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>******************************************************************************</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_I2CSLAVE__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_I2CSLAVE__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="group___i2_c_s_l_a_v_e___c_o_n_t_r_o_l_1ga50e2b786948f487d4cb975e5581d93df" refkind="member"><highlight class="preprocessor">#define<sp/>I2CSLAVE_CMD_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="group___i2_c_s_l_a_v_e___c_o_n_t_r_o_l_1ga9fe1fa8f941643c68c443fc089fadf3c" refkind="member"><highlight class="preprocessor">#define<sp/>I2CSLAVE_STATUS_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="group___i2_c_s_l_a_v_e___s_t_a_t_u_s_1ga5fefb558e9268fd792ec49f80b697474" refkind="member"><highlight class="preprocessor">#define<sp/>I2CSLAVE_STATUS_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="group___i2_c_s_l_a_v_e___s_t_a_t_u_s_1gacae8b3350c196cdb215b25d7ca170708" refkind="member"><highlight class="preprocessor">#define<sp/>I2CSLAVE_STATUS_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="group___i2_c_s_l_a_v_e___s_t_a_t_u_s_1ga379b9d624bb9cd78f3d4991cc2d15dd2" refkind="member"><highlight class="preprocessor">#define<sp/>I2CSLAVE_STATUS_UNDEFINEDCMD<sp/><sp/><sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="comment">/*<sp/>Add<sp/>I2CSLAVE_CMD_&lt;commands&gt;<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_i2_c_slave___config__" kindref="compound">I2CSlave_Config_</ref><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" kindref="member">I2CSlave_Handle</ref>;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>I2CSLAVE_IDLE_MODE<sp/>=<sp/>0,<sp/><sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>I2CSLAVE_WRITE_MODE<sp/>=<sp/>1,<sp/><sp/></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>I2CSLAVE_READ_MODE<sp/>=<sp/>2,<sp/><sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>I2CSLAVE_START_MODE<sp/>=<sp/>3,<sp/><sp/></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>I2CSLAVE_ERROR<sp/>=<sp/>0xFF<sp/><sp/></highlight></codeline>
<codeline lineno="245"><highlight class="normal">}<sp/>I2CSlave_Mode;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="_i2_c_slave_8h_1a5e27f9ba25088f9e7071e3e6f806559d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>In<sp/>#I2CSLAVE_MODE_BLOCKING,<sp/>calls<sp/>to<sp/>I2CSlave_read()<sp/>and</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>I2CSlave_write()<sp/>block<sp/>until<sp/>the<sp/>transfer<sp/>completes.<sp/>Other<sp/>threads</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>calling<sp/>I2CSlave_read()<sp/>or<sp/>I2CSlave_write()<sp/>while<sp/>a<sp/>transfer<sp/>is<sp/>in</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>progress<sp/>are<sp/>also<sp/>placed<sp/>into<sp/>a<sp/>blocked<sp/>state.<sp/>If<sp/>multiple<sp/>threads<sp/>are</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>blocked,<sp/>the<sp/>thread<sp/>with<sp/>the<sp/>highest<sp/>priority<sp/>will<sp/>be<sp/>unblocked<sp/>first.</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>This<sp/>implies<sp/>that<sp/>arbitration<sp/>will<sp/>not<sp/>be<sp/>executed<sp/>in<sp/>chronological</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>order.</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>@note<sp/>When<sp/>using<sp/>#I2CSLAVE_MODE_BLOCKING,<sp/>I2CSlave_write()<sp/>and</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>I2CSlave_read()<sp/>must<sp/>be<sp/>called<sp/>from<sp/>a<sp/>thread<sp/>context.</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="_i2_c_slave_8h_1a5e27f9ba25088f9e7071e3e6f806559dac85f5a1e6bca3d9402b2e5704387fa8f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_slave_8h_1a5e27f9ba25088f9e7071e3e6f806559dac85f5a1e6bca3d9402b2e5704387fa8f" kindref="member">I2CSLAVE_MODE_BLOCKING</ref>,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>In<sp/>#I2CSLAVE_MODE_CALLBACK,<sp/>calls<sp/>to<sp/>I2CSlave_read()<sp/>and</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>I2CSlave_write()<sp/>return<sp/>immediately.<sp/>The<sp/>application&apos;s<sp/>callback</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>function,<sp/>#I2CSlave_Params.transferCallbackFxn,<sp/>is<sp/>called<sp/>when<sp/>the</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>transfer<sp/>is<sp/>complete.<sp/>The<sp/>#I2CSlave_Params.transferCallbackFxn<sp/>function</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>will<sp/>be<sp/>called<sp/>asynchronously<sp/>as<sp/>each<sp/>transaction<sp/>is<sp/>completed.</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="_i2_c_slave_8h_1a5e27f9ba25088f9e7071e3e6f806559da1dda6ae35d8aa92739d2714a4eaa4107" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_slave_8h_1a5e27f9ba25088f9e7071e3e6f806559da1dda6ae35d8aa92739d2714a4eaa4107" kindref="member">I2CSLAVE_MODE_CALLBACK</ref></highlight></codeline>
<codeline lineno="276"><highlight class="normal">}<sp/><ref refid="_i2_c_slave_8h_1a5e27f9ba25088f9e7071e3e6f806559d" kindref="member">I2CSlave_TransferMode</ref>;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="_i2_c_slave_8h_1a22bd71094a8a815bccdf665d85900412" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_i2_c_slave_8h_1a22bd71094a8a815bccdf665d85900412" kindref="member">I2CSlave_CallbackFxn</ref>)(I2CSlave_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>status);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="struct_i2_c_slave___params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="307" refid="struct_i2_c_slave___params_1a51c76c5694cd3a9e9102b9273cfe4a7f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>I2CSlave_TransferMode<sp/><sp/><sp/><ref refid="struct_i2_c_slave___params_1a51c76c5694cd3a9e9102b9273cfe4a7f" kindref="member">transferMode</ref>;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="struct_i2_c_slave___params_1afed4d41de559f2ba40d23c0b597db7b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_c_slave_8h_1a22bd71094a8a815bccdf665d85900412" kindref="member">I2CSlave_CallbackFxn</ref><sp/><sp/><sp/><sp/><ref refid="struct_i2_c_slave___params_1afed4d41de559f2ba40d23c0b597db7b8" kindref="member">transferCallbackFxn</ref>;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="struct_i2_c_slave___params_1a7848665af6d0305dd9c2c779bf79c084" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_i2_c_slave___params_1a7848665af6d0305dd9c2c779bf79c084" kindref="member">custom</ref>;</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}<sp/><ref refid="struct_i2_c_slave___params" kindref="compound">I2CSlave_Params</ref>;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*I2CSlave_CloseFxn)<sp/><sp/><sp/><sp/>(I2CSlave_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*I2CSlave_ControlFxn)<sp/><sp/>(I2CSlave_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_fast16_t<sp/>cmd,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*I2CSlave_InitFxn)<sp/><sp/><sp/><sp/><sp/>(I2CSlave_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_i2_c_slave_8h_1a4de60e2f66464b3d961cb0812451f959" kindref="member">I2CSlave_Handle</ref><sp/><sp/>(*I2CSlave_OpenFxn)<sp/><sp/><sp/><sp/><sp/>(I2CSlave_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_c_slave___params" kindref="compound">I2CSlave_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*I2CSlave_WriteFxn)<sp/>(I2CSlave_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*I2CSlave_ReadFxn)<sp/>(I2CSlave_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="struct_i2_c_slave___fxn_table" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="373" refid="struct_i2_c_slave___fxn_table_1a7c9cf5a9299386f5b615e66e996aeb26" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>I2CSlave_CloseFxn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closeFxn;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="376" refid="struct_i2_c_slave___fxn_table_1a5d9e1649f54e3ac467254e1812ae37f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>I2CSlave_ControlFxn<sp/><sp/><sp/><sp/><sp/><sp/>controlFxn;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="379" refid="struct_i2_c_slave___fxn_table_1aa33c7271b7f99e9b1c1391f9181b010d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>I2CSlave_InitFxn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initFxn;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="382" refid="struct_i2_c_slave___fxn_table_1ae9eabd5257e4c7c69454ca932f0aeaa8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>I2CSlave_OpenFxn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openFxn;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="385" refid="struct_i2_c_slave___fxn_table_1a010cac9104f7fd8204737253873d7438" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>I2CSlave_ReadFxn<sp/><sp/><sp/><sp/><sp/>readFxn;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="388" refid="struct_i2_c_slave___fxn_table_1a3ffab7eeff49da96baac7a496f06a269" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>I2CSlave_WriteFxn<sp/><sp/>writeFxn;</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}<sp/><ref refid="struct_i2_c_slave___fxn_table" kindref="compound">I2CSlave_FxnTable</ref>;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="398" refid="struct_i2_c_slave___config__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_i2_c_slave___config__" kindref="compound">I2CSlave_Config_</ref><sp/>{</highlight></codeline>
<codeline lineno="401" refid="struct_i2_c_slave___config___1a124fe47ff36f185767431d7c5b0b8e39" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_i2_c_slave___fxn_table" kindref="compound">I2CSlave_FxnTable</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_i2_c_slave___config___1a124fe47ff36f185767431d7c5b0b8e39" kindref="member">fxnTablePtr</ref>;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="struct_i2_c_slave___config___1a90f00f2ccb6e37009372a462c7ac991e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_i2_c_slave___config___1a90f00f2ccb6e37009372a462c7ac991e" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="struct_i2_c_slave___config___1a555ca8226a0f64d0e8877d256575e136" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_i2_c_slave___config___1a555ca8226a0f64d0e8877d256575e136" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}<sp/><ref refid="_i2_c_slave_8h_1ae81019e35004896b31ade1170297886a" kindref="member">I2CSlave_Config</ref>;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_i2_c_slave_8h_1a323cbb394c10ab1018820c9a76eccc18" kindref="member">I2CSlave_close</ref>(I2CSlave_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_i2_c_slave_8h_1a42d235433a86656597ae52d44a005513" kindref="member">I2CSlave_control</ref>(I2CSlave_Handle<sp/>handle,<sp/>uint_fast16_t<sp/>cmd,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_i2_c_slave_8h_1ad7518283a3f3fb80cefe6cb7ca7a4a36" kindref="member">I2CSlave_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>I2CSlave_Handle<sp/><ref refid="_i2_c_slave_8h_1a18e508a752270fa45b08642d908a8bc7" kindref="member">I2CSlave_open</ref>(uint_least8_t<sp/>index,</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_i2_c_slave___params" kindref="compound">I2CSlave_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_i2_c_slave_8h_1a3c29bf7436be17348ea73fabb6ede3ae" kindref="member">I2CSlave_Params_init</ref>(<ref refid="struct_i2_c_slave___params" kindref="compound">I2CSlave_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_i2_c_slave_8h_1ad5409f453e769676593a1a14d0ba6d7b" kindref="member">I2CSlave_read</ref>(I2CSlave_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_i2_c_slave_8h_1a66c5d4103e022318c746c592ab2295f8" kindref="member">I2CSlave_write</ref>(I2CSlave_Handle<sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_I2CSLAVE__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_msp432/source/ti/drivers/I2CSlave.h"/>
  </compounddef>
</doxygen>
